{"source": "Archmage NAME_END 4 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "prediction": "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "target": "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )"}
{"source": "Booty Bay Bodyguard NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 5 , <pad> , taunt = True )", "prediction": "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )", "target": "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )"}
{"source": "Darkscale Healer NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 2 Health to all friendly characters. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> ) <pad> ( player <pad> ( 2 <pad> , <pad> )", "prediction": "class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "target": "class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"}
{"source": "Fiery War Axe NAME_END 3 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL [SEP] class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> , False ) def create_weapon ( self , player ) : return Weapon ( <pad> , 2 )", "prediction": "class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )", "target": "class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )"}
{"source": "Frostwolf Warlord NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain +1/+1 for each other friendly minion on the battlefield. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = [ Buff ( <pad> Change ( Count ( Minion Selector ( <pad> Player ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( None , Both Player ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( None , Both Player ( ) ) ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "target": "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"}
{"source": "Hellfire NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to ALL characters. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> ( <pad> ( <pad> ) , <pad> ( players = <pad> ( <pad> ) <pad> ( <pad> ) : <pad> ( <pad> , <pad> )", "prediction": "class Hellfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hellfire ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self )", "target": "class Hellfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hellfire ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) targets . append ( game . other_player . hero ) targets . append ( game . current_player . hero ) for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self )"}
{"source": "Innervate NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain 2 Mana Crystals this turn only. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> < 10 : player . <pad> + = <pad>", "prediction": "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 10 : player . mana + = 1", "target": "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10"}
{"source": "Magma Rager NAME_END 5 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( <pad> , 1 <pad> )", "prediction": "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "target": "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )"}
{"source": "Mortal Coil NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion. If that kills it, draw a card. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ) <pad> self . target <pad> ) and <pad> self . target <pad> ) : self . target . damage <pad> . <pad> ( <pad> ) , self <pad> . <pad> player <pad> . <pad> ( player <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "prediction": "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "target": "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and not self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 1 ) , self )"}
{"source": "Polymorph NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 1/1 Sheep. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( ) <pad> . create_minion ( <pad> ) <pad> self . target . <pad> ( <pad> )", "prediction": "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . remove_from_board ( ) self . target . add_effect ( Effect ( Minion Placed ( ) , Action Tag ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) )", "target": "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )"}
{"source": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL [SEP] class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "target": "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"}
{"source": "Silverback Patriarch NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , taunt = True )", "prediction": "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "target": "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )"}
{"source": "Stormwind Knight NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> [SEP] class <pad> Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Knight ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )", "target": "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )"}
{"source": "Voodoo Doctor NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Restore 2 Health. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "prediction": "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "target": "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"}
{"source": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Spell Damage +1 </b> [SEP] class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , <pad> = <pad> )", "prediction": "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "target": "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )"}
{"source": "Astral Communion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 10 Mana Crystals. Discard your hand. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( )", "prediction": "class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . mana + = 10", "target": "class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for card in player . hand : card . unattach ( ) player . trigger ( ` card_discarded ` , card ) player . hand = [ ] player . max_mana = 10 player . mana = 10"}
{"source": "Annoy-o-Tron NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Taunt </b> NL <b> Divine Shield </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , <pad> = True )", "prediction": "class Annoyo Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = True )", "target": "class Annoyo Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = True )"}
{"source": "Burly Rockjaw Trogg NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +2 Attack. [SEP] class <pad> Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trogg ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ] )", "prediction": "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "target": "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )"}
{"source": "Cogmaster's Wrench NAME_END 1 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Has +2 Attack while you have a Mech. [SEP] class Cogmaster ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 1 , <pad> , <pad> = [ <pad> ( Change Attack ( <pad> ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . <pad> ) ) ) , value = 0 ) ) ] )", "prediction": "class Cogmasters Wrench ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` s Wrench ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , buffs = [ Buff ( Change Attack ( 2 ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "target": "class Cogmasters Wrench ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` s Wrench ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , buffs = [ Buff ( Change Attack ( 2 ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )"}
{"source": "Echo of Medivh NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of each friendly minion into your hand. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( <pad> . <pad> ( <pad> , <pad> ) <pad> ( ) <pad> : <pad> = copy . <pad> ( <pad> . <pad> ( <pad> ) <pad> player <pad> ( ) . <pad> ( player , <pad> ) <pad> player . <pad> ) <pad>", "prediction": "class Echo Of Medivh ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echo of Medivh ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . hand ) : minion . put_back ( self . target ) self . target . remove_from_board ( )", "target": "class Echo Of Medivh ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echo of Medivh ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in sorted ( copy . copy ( player . minions ) , key = lambda minion : minion . born ) : if len ( player . hand ) < 10 : player . hand . append ( minion . card )"}
{"source": "Floating Watcher NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn, gain +2/+2. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "prediction": "class Floating Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Floating Watcher ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "target": "class Floating Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Floating Watcher ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Character Damaged ( And ( Is Hero ( ) , Owners Turn ( ) ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )"}
{"source": "Gnomish Experimenter NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Draw a card. If it's a minion, transform it into a Chicken. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ( <pad> ) <pad> = <pad> . <pad> ( <pad> ) <pad> ( <pad> , <pad> ) <pad> , <pad> ) <pad> ( )", "prediction": "class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Draw ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "target": "class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"}
{"source": "Iron Juggernaut NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Shuffle a Mine into your opponent's deck. When drawn, it explodes for 10 damage. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ( )", "prediction": "class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "target": "class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Add Card ( Burrowing Mine ( ) , add_to_deck = True ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )"}
{"source": "Madder Bomber NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 6 damage randomly split between all other characters. [SEP] class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "target": "class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"}
{"source": "Mini-Mage NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> NL <b> Spell Damage +1 </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "prediction": "class Mini Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )", "target": "class Mini Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )"}
{"source": "Piloted Sky Golem NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Deathrattle : </b> Summon a random 4-Cost minion. [SEP] class Piloted <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ <pad> ( <pad> ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "prediction": "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "target": "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )"}
{"source": "Scarlet Purifier NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry </b> : Deal 2 damage to all minions with <b> Deathrattle </b> . [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = Deathrattle ( Damage ( <pad> ) , Minion Selector ( players = Both Player ( ) ) ) , <pad> = <pad> )", "prediction": "class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "target": "class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( Minion Has Deathrattle ( ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"}
{"source": "Siltfin Spiritwalker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies, draw a card. <b> Overload </b> : (1) [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "prediction": "class Siltfin Spiritwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siltfin Spiritwalker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC , overload = 1 ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MURLOC ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "target": "class Siltfin Spiritwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siltfin Spiritwalker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC , overload = 1 ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MURLOC ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"}
{"source": "Tinkertown Technician NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Mech, gain +1/+1 and add a <b> Spare Part </b> to your hand. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = MINION_TYPE . MECH <pad> , <pad> = [ <pad> ( <pad> , <pad> ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) <pad> )", "prediction": "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "target": "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"}
{"source": "Vol'jin NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Swap Health with another minion. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "prediction": "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Health ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "target": "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )"}
{"source": "Death's Bite NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 1 damage to all minions. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , deathrattle = Deathrattle ( Damage ( <pad> ) , <pad> Selector ( players = Both Player ( ) ) ) , taunt = True )", "prediction": "class Deaths Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "target": "class Deaths Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) )"}
{"source": "Maexxna NAME_END 2 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Destroy any minion damaged by this minion. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "prediction": "class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "target": "class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )"}
{"source": "Sludge Belcher NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt. NL Deathrattle : </b> Summon a 1/2 Slime with <b> Taunt </b> . [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) ) , taunt = True )", "prediction": "class Sludge Belcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sludge Belcher ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , deathrattle = Deathrattle ( Summon ( Slime ( ) ) , Player Selector ( ) , Increase Durability ( ) ) )", "target": "class Sludge Belcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sludge Belcher ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True , deathrattle = Deathrattle ( Summon ( Slime ( ) ) , Player Selector ( ) ) )"}
{"source": "Voidcaller NAME_END 3 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Deathrattle : </b> Put a random Demon from your hand into the battlefield. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> = <pad> ( <pad> ( ) <pad> ( <pad> ) <pad> , <pad> ( player <pad> ) )", "prediction": "class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) ) , Player Selector ( ) ) )", "target": "class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] , source = CARD_SOURCE . MY_HAND ) ) , Player Selector ( ) ) )"}
{"source": "Alexstrasza NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Set a hero's remaining Health to 15. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry <pad> ( <pad> , <pad> Selector <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "prediction": "class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Heal ( 15 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "target": "class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Set Health ( 15 ) , Hero Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )"}
{"source": "Arcane Golem NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> . <b> Battlecry : </b> Give your opponent a Mana Crystal. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( <pad> Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "prediction": "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "target": "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"}
{"source": "Baine Bloodhoof NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL [SEP] class <pad> Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Bloodhoof ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 <pad> )", "prediction": "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "target": "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"}
{"source": "Blade Flurry NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = self . target . <pad> ( ) <pad> . target . die <pad> self ) for minion in <pad> . <pad> . minions : minion . damage ( player . effective_spell_damage ( <pad> ) , self )", "prediction": "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "target": "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . weapon is not None : attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) player . weapon . destroy ( ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( attack_power , self ) game . other_player . hero . damage ( attack_power , self )"}
{"source": "Brawl NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions except one. <i>(chosen randomly)</i> [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . <pad> . minions ) for minion in targets : <pad> . <pad> ( <pad> )", "prediction": "class Brawl ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Brawl ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) targets . append ( game . random_choice ( targets ) ) for minion in targets : minion . die ( None ) game . check_delayed ( )", "target": "class Brawl ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Brawl ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 2 def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( player . minions ) minions . extend ( game . other_player . minions ) if len ( minions ) > 1 : survivor = game . random_choice ( minions ) for minion in minions : if minion is not survivor : minion . die ( self )"}
{"source": "Conceal NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions <b> Stealth </b> until your next turn. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "prediction": "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for minion in minions : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "target": "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )"}
{"source": "Defender NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> , False ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "prediction": "class Defender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "target": "class Defender Minion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_minion ( self , p ) : return Minion ( 2 , 1 )"}
{"source": "Doomguard NAME_END 5 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Charge </b> . <b> Battlecry : </b> Discard two random cards. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> 5 , <pad> = <pad> )", "prediction": "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "target": "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )"}
{"source": "Earth Elemental NAME_END 7 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Taunt </b> . <b> Overload : </b> (3) [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Earth Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Elemental ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 3 ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "target": "class Earth Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Elemental ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 3 ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )"}
{"source": "Explosive Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, deal $2 damage to all enemies. [SEP] class <pad> Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self <pad> player <pad> , <pad> ) : <pad> . <pad> ( <pad> , <pad> ) super ( ) . reveal ( )", "prediction": "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "target": "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )"}
{"source": "Flame of Azzinoth NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL [SEP] class <pad> Of <pad> Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> Flame ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "prediction": "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "target": "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"}
{"source": "Gnoll NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , <pad> ) : return Minion <pad> ( <pad> , <pad> )", "prediction": "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 2 , 2 , taunt = True )", "target": "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )"}
{"source": "Holy Wrath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> = <pad> ) <pad> ) <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "prediction": "class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : def reduce_cost ( card ) : card . damage ( player . effective_spell_damage ( reduce_cost ) , self ) player . draw ( )", "target": "class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) fatigue = False if player . deck . left = = 0 : fatigue = True player . draw ( ) if not fatigue : cost = player . hand [ - 1 ] . mana self . target . damage ( player . effective_spell_damage ( cost ) , self )"}
{"source": "Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL [SEP] class <pad> Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON <pad> ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "prediction": "class Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "target": "class Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"}
{"source": "Kirin Tor Mage NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> The next <b> Secret </b> you play this turn costs (0). [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( Give Aura ( <pad> Aura Until ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( <pad> ) ) , <pad> ( <pad> ) <pad> ) <pad> ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( ) ) ] ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "target": "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"}
{"source": "Lightwarden NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a character is healed, gain +2 Attack. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( <pad> ( <pad> , <pad> ( <pad> ( ) <pad> ( ) , <pad> ) ) ) ] )", "prediction": "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "target": "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )"}
{"source": "Mana Wraith NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost (1) more. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "prediction": "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "target": "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )"}
{"source": "Misdirection NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When a character attacks your hero, instead he attacks another random character. [SEP] class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) def _reveal ( self <pad> ) <pad> . <pad> ( <pad> . <pad> )", "prediction": "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character ) : character . attack ( )", "target": "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )"}
{"source": "Noble Sacrifice NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy attacks, summon a 2/1 Defender as the new target. [SEP] class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) self . player = None def _reveal ( self , card , <pad> ) : if <pad> . <pad> ) <pad> self . player . minions ) <pad> ) : <pad> ) . summon ( self . player , <pad> . game , len ( self . player . minions ) ) <pad> . <pad> . player . minions <pad> super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) self . player = None", "prediction": "class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . game . current_player . bind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . game . other_player . minions . append ( target ) target . add_buff ( Buff ( Change Target ( 2 ) ) ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` character_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_played ` , self . _reveal ) self . player = None", "target": "class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : player = attacker . player . game . other_player if len ( player . minions ) < 7 and not attacker . removed : from hearthbreaker . cards . minions . paladin import Defender Minion defender = Defender Minion ( ) defender . summon ( player , player . game , len ( player . minions ) ) attacker . current_target = player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )"}
{"source": "Power of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give your minions +1/+1; or Summon a 3/2 Panther. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> = <pad> Choice ( <pad> ( ) <pad> ( <pad> ( <pad> ) ) , <pad> ( <pad> ( <pad> ) ) <pad> ( <pad> ( ) ) <pad> ( ) ) <pad> Choice ( <pad> ( ) , Summon ( <pad> ( ) , <pad> ) , Player Selector ( ) ) <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> )", "prediction": "class Power Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give your minions + 1 / + 1 ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( )", "target": "class Power Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Leader Of The Pack ( ) , Summon Panther ( ) ] , player ) option . use ( player , game )"}
{"source": "Redemption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, return it to life with 1 Health. [SEP] class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player <pad> . <pad> ( self <pad> . <pad> ( <pad> ) <pad> . <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` minion_died ` , self . _reveal ) def <pad> ( self , player ) : player . <pad> ( <pad> , self . <pad> )", "prediction": "class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "target": "class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion , by ) : resurrection = minion . card . summon ( minion . player , minion . game , min ( minion . index , len ( minion . player . minions ) ) ) if resurrection : resurrection . health = 1 super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )"}
{"source": "Shadow Madness NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn. [SEP] class Shadow <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> , <pad> = lambda target : target . calculate_attack ( ) <pad> = <pad> and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . <pad> . <pad> ( <pad> )", "prediction": "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Turn Ended ( ) , Turn Ended ( ) ) )", "target": "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion = self . target . copy ( player ) minion . active = True minion . exhausted = False self . target . remove_from_board ( ) minion . add_to_board ( len ( player . minions ) ) minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"}
{"source": "Siphon Soul NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion. Restore #3 Health to your hero. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "prediction": "class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "target": "class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )"}
{"source": "Spellbender NAME_END 1 ATK_END 3 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END NIL [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) : <pad> , <pad> . <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( <pad> , <pad> ) <pad>", "prediction": "class Spellbender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 0 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 3 )", "target": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None"}
{"source": "Summoning Portal NAME_END 0 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (2) less, but not less than (1). [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "prediction": "class Summoning Portal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summoning Portal ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "target": "class Summoning Portal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summoning Portal ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , auras = [ Aura ( Mana Change ( - 2 , 1 , minimum = 1 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )"}
{"source": "Thrallmar Farseer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> [SEP] class <pad> Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )", "prediction": "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "target": "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )"}
{"source": "Upgrade! NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon, give it +1/+1. Otherwise equip a 1/3 weapon. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( self )", "prediction": "class Upgrade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Upgrade ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . weapon is not None : self . target . change_attack ( 1 ) self . target . increase_health ( 3 ) else : self . target . add_buff ( Buff ( Change Attack ( 1 ) ) )", "target": "class Upgrade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Upgrade ! ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . weapons . warrior import Heavy Axe if player . weapon : player . weapon . durability + = 1 player . weapon . base_attack + = 1 else : heavy_axe = Heavy Axe ( ) . create_weapon ( player ) heavy_axe . equip ( player )"}
{"source": "Wisp NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , <pad> ) : return Minion ( 1 , 1 )", "prediction": "class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "target": "class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"}
{"source": "Black Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL [SEP] class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "prediction": "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "target": "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"}
{"source": "Dragonkin Sorcerer NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever <b> you </b> target this minion with a spell, gain +1/+1. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell <pad> ( ) , Action Tag ( Give ( Buff <pad> ( Change Attack ( <pad> ) , <pad> ( ) ) ) , Self Selector ( ) ) ) ] )", "prediction": "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( Is Type ( MINION_TYPE . DRAGON ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "target": "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )"}
{"source": "Hungry Dragon NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b> Battlecry : </b> Summon a random 1-Cost minion for your opponent. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Summon ( <pad> ( ) , <pad> ) , Player Selector ( <pad> Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "prediction": "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "target": "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"}
{"source": "Solemn Vigil NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. Costs (1) less for each minion that died this turn. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( player . <pad> ( <pad> )", "prediction": "class Solemn Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "target": "class Solemn Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) for n in range ( 0 , 2 ) : player . draw ( )"}
