{"input": "Archmage NAME_END 4 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "output": "class Archmage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, spell_damage=1)\u00a7", "input_tokens": ["Archmage", "NAME_END", "4", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Archmage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Archmage", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ",", "spell_damage", "=", "1", ")"], "examples": ["class Mini Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )"]}
{"input": "Booty Bay Bodyguard NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class BootyBayBodyguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4, taunt=True)\u00a7", "input_tokens": ["Booty", "Bay", "Bodyguard", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Booty", "Bay", "Bodyguard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Booty", "Bay", "Bodyguard", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )"]}
{"input": "Darkscale Healer NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 2 Health to all friendly characters.", "output": "class DarkscaleHealer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Darkscale Healer\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(2), CharacterSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Darkscale", "Healer", "NAME_END", "4", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "2", "Health", "to", "all", "friendly", "characters."], "output_tokens": ["class", "Darkscale", "Healer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Darkscale", "Healer", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "2", ")", ",", "Character", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Set Health ( 15 ) , Hero Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Sludge Belcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sludge Belcher ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True , deathrattle = Deathrattle ( Summon ( Slime ( ) ) , Player Selector ( ) ) )"]}
{"input": "Fiery War Axe NAME_END 3 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class FieryWarAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fiery War Axe\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2)\u00a7", "input_tokens": ["Fiery", "War", "Axe", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "2", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Fiery", "War", "Axe", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fiery", "War", "Axe", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "2", ")"], "examples": ["class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )"]}
{"input": "Frostwolf Warlord NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain +1/+1 for each other friendly minion on the battlefield.", "output": "class FrostwolfWarlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostwolf Warlord\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))), Buff(ChangeHealth(Count(MinionSelector())))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Frostwolf", "Warlord", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "+1/+1", "for", "each", "other", "friendly", "minion", "on", "the", "battlefield."], "output_tokens": ["class", "Frostwolf", "Warlord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frostwolf", "Warlord", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "Count", "(", "Minion", "Selector", "(", ")", ")", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "Count", "(", "Minion", "Selector", "(", ")", ")", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Deaths Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) )"]}
{"input": "Hellfire NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to ALL characters.", "output": "class Hellfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hellfire\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Hellfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "ALL", "characters."], "output_tokens": ["class", "Hellfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hellfire", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "targets", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "targets", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10", "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )"]}
{"input": "Innervate NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain 2 Mana Crystals this turn only.", "output": "class Innervate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Innervate\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 8:\u00a7            player.mana += 2\u00a7        else:\u00a7            player.mana = 10\u00a7", "input_tokens": ["Innervate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Gain", "2", "Mana", "Crystals", "this", "turn", "only."], "output_tokens": ["class", "Innervate", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Innervate", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "mana", "<", "8", ":", "player", ".", "mana", "+", "=", "2", "else", ":", "player", ".", "mana", "=", "10"], "examples": ["class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for card in player . hand : card . unattach ( ) player . trigger ( ` card_discarded ` , card ) player . hand = [ ] player . max_mana = 10 player . mana = 10", "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . weapon is not None : attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) player . weapon . destroy ( ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( attack_power , self ) game . other_player . hero . damage ( attack_power , self )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None"]}
{"input": "Magma Rager NAME_END 5 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class MagmaRager(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Magma Rager\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 1)\u00a7", "input_tokens": ["Magma", "Rager", "NAME_END", "5", "ATK_END", "1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Magma", "Rager", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Magma", "Rager", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "1", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"]}
{"input": "Mortal Coil NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion. If that kills it, draw a card.", "output": "class MortalCoil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mortal Coil\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(1) and not self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7            player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Mortal", "Coil", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage", "to", "a", "minion.", "If", "that", "kills", "it,", "draw", "a", "card."], "output_tokens": ["class", "Mortal", "Coil", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mortal", "Coil", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "health", "<", "=", "player", ".", "effective_spell_damage", "(", "1", ")", "and", "not", "self", ".", "target", ".", "divine_shield", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "player", ".", "draw", "(", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Solemn Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) for n in range ( 0 , 2 ) : player . draw ( )", "class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) fatigue = False if player . deck . left = = 0 : fatigue = True player . draw ( ) if not fatigue : cost = player . hand [ - 1 ] . mana self . target . damage ( player . effective_spell_damage ( cost ) , self )"]}
{"input": "Polymorph NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 1/1 Sheep.", "output": "class Polymorph(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Polymorph\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.mage import Sheep\u00a7        sheep = Sheep()\u00a7        minion = sheep.create_minion(None)\u00a7        minion.card = sheep\u00a7        self.target.replace(minion)\u00a7", "input_tokens": ["Polymorph", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Transform", "a", "minion", "into", "a", "1/1", "Sheep."], "output_tokens": ["class", "Polymorph", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Polymorph", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "mage", "import", "Sheep", "sheep", "=", "Sheep", "(", ")", "minion", "=", "sheep", ".", "create_minion", "(", "None", ")", "minion", ".", "card", "=", "sheep", "self", ".", "target", ".", "replace", "(", "minion", ")"], "examples": ["class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion = self . target . copy ( player ) minion . active = True minion . exhausted = False self . target . remove_from_board ( ) minion . add_to_board ( len ( player . minions ) ) minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and not self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10"]}
{"input": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL", "output": "class SearingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Searing", "Totem", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Searing", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Searing", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Silverback Patriarch NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class SilverbackPatriarch(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silverback Patriarch\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, taunt=True)\u00a7", "input_tokens": ["Silverback", "Patriarch", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Silverback", "Patriarch", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silverback", "Patriarch", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )", "class Annoyo Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = True )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )"]}
{"input": "Stormwind Knight NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "output": "class StormwindKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormwind Knight\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, charge=True)\u00a7", "input_tokens": ["Stormwind", "Knight", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Stormwind", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stormwind", "Knight", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "charge", "=", "True", ")"], "examples": ["class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )"]}
{"input": "Voodoo Doctor NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Restore 2 Health.", "output": "class VoodooDoctor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voodoo Doctor\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Heal(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Voodoo", "Doctor", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "2", "Health."], "output_tokens": ["class", "Voodoo", "Doctor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Voodoo", "Doctor", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Set Health ( 15 ) , Hero Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )"]}
{"input": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Spell Damage +1</b>", "output": "class WrathOfAirTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, spell_damage=1)\u00a7", "input_tokens": ["Wrath", "of", "Air", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Wrath", "Of", "Air", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "of", "Air", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "spell_damage", "=", "1", ")"], "examples": ["class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Mini Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )"]}
{"input": "Astral Communion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 10 Mana Crystals. Discard your hand.", "output": "class AstralCommunion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Astral Communion\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for card in player.hand:\u00a7            card.unattach()\u00a7            player.trigger(\"card_discarded\", card)\u00a7        player.hand = []\u00a7        player.max_mana = 10\u00a7        player.mana = 10\u00a7", "input_tokens": ["Astral", "Communion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Gain", "10", "Mana", "Crystals.", "Discard", "your", "hand."], "output_tokens": ["class", "Astral", "Communion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Astral", "Communion", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "card", "in", "player", ".", "hand", ":", "card", ".", "unattach", "(", ")", "player", ".", "trigger", "(", "`", "card_discarded", "`", ",", "card", ")", "player", ".", "hand", "=", "[", "]", "player", ".", "max_mana", "=", "10", "player", ".", "mana", "=", "10"], "examples": ["class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )"]}
{"input": "Annoy-o-Tron NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "output": "class AnnoyoTron(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, divine_shield=True, taunt=True)\u00a7", "input_tokens": ["Annoy-o-Tron", "NAME_END", "1", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Annoyo", "Tron", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Annoy", "-", "o", "-", "Tron", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "divine_shield", "=", "True", ",", "taunt", "=", "True", ")"], "examples": ["class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Mini Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )"]}
{"input": "Burly Rockjaw Trogg NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +2 Attack.", "output": "class BurlyRockjawTrogg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burly Rockjaw Trogg\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\u00a7", "input_tokens": ["Burly", "Rockjaw", "Trogg", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "opponent", "casts", "a", "spell,", "gain", "+2", "Attack."], "output_tokens": ["class", "Burly", "Rockjaw", "Trogg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Burly", "Rockjaw", "Trogg", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )"]}
{"input": "Cogmaster's Wrench NAME_END 1 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Has +2 Attack while you have a Mech.", "output": "class CogmastersWrench(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cogmaster's Wrench\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 3, buffs=[Buff(ChangeAttack(2), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])\u00a7", "input_tokens": ["Cogmaster's", "Wrench", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Has", "+2", "Attack", "while", "you", "have", "a", "Mech."], "output_tokens": ["class", "Cogmasters", "Wrench", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cogmaster", "`", "s", "Wrench", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "3", ",", "buffs", "=", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")"], "examples": ["class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )", "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . weapon is not None : attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) player . weapon . destroy ( ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( attack_power , self ) game . other_player . hero . damage ( attack_power , self )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion = self . target . copy ( player ) minion . active = True minion . exhausted = False self . target . remove_from_board ( ) minion . add_to_board ( len ( player . minions ) ) minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Echo of Medivh NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of each friendly minion into your hand.", "output": "class EchoOfMedivh(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Echo of Medivh\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in sorted(copy.copy(player.minions), key=lambda minion: minion.born):\u00a7            if len(player.hand) < 10:\u00a7                player.hand.append(minion.card)\u00a7", "input_tokens": ["Echo", "of", "Medivh", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Put", "a", "copy", "of", "each", "friendly", "minion", "into", "your", "hand."], "output_tokens": ["class", "Echo", "Of", "Medivh", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Echo", "of", "Medivh", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "sorted", "(", "copy", ".", "copy", "(", "player", ".", "minions", ")", ",", "key", "=", "lambda", "minion", ":", "minion", ".", "born", ")", ":", "if", "len", "(", "player", ".", "hand", ")", "<", "10", ":", "player", ".", "hand", ".", "append", "(", "minion", ".", "card", ")"], "examples": ["class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Solemn Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) for n in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Floating Watcher NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn, gain +2/+2.", "output": "class FloatingWatcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Floating Watcher\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(), OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\u00a7", "input_tokens": ["Floating", "Watcher", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "hero", "takes", "damage", "on", "your", "turn,", "gain", "+2/+2."], "output_tokens": ["class", "Floating", "Watcher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Floating", "Watcher", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "And", "(", "Is", "Hero", "(", ")", ",", "Owners", "Turn", "(", ")", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] , source = CARD_SOURCE . MY_HAND ) ) , Player Selector ( ) ) )", "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )"]}
{"input": "Gnomish Experimenter NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Draw a card. If it's a minion, transform it into a Chicken.", "output": "class GnomishExperimenter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Experimenter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=(Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(), Matches(LastDrawnSelector(), IsMinion()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Gnomish", "Experimenter", "NAME_END", "3", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card.", "If", "it's", "a", "minion,", "transform", "it", "into", "a", "Chicken."], "output_tokens": ["class", "Gnomish", "Experimenter", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnomish", "Experimenter", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "(", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Transform", "(", "Gnomish", "Chicken", "(", ")", ")", ",", "Last", "Drawn", "Selector", "(", ")", ",", "Matches", "(", "Last", "Drawn", "Selector", "(", ")", ",", "Is", "Minion", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and not self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( Minion Has Deathrattle ( ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Iron Juggernaut NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Shuffle a Mine into your opponent's deck. When drawn, it explodes for 10 damage.", "output": "class IronJuggernaut(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Juggernaut\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(AddCard(BurrowingMine(), add_to_deck=True), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7", "input_tokens": ["Iron", "Juggernaut", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Shuffle", "a", "Mine", "into", "your", "opponent's", "deck.", "When", "drawn,", "it", "explodes", "for", "10", "damage."], "output_tokens": ["class", "Iron", "Juggernaut", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Iron", "Juggernaut", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Burrowing", "Mine", "(", ")", ",", "add_to_deck", "=", "True", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ")"], "examples": ["class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] , source = CARD_SOURCE . MY_HAND ) ) , Player Selector ( ) ) )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Madder Bomber NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 6 damage randomly split between all other characters.", "output": "class MadderBomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Madder Bomber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Madder", "Bomber", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "6", "damage", "randomly", "split", "between", "all", "other", "characters."], "output_tokens": ["class", "Madder", "Bomber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Madder", "Bomber", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", "6", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Hellfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hellfire ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) targets . append ( game . other_player . hero ) targets . append ( game . current_player . hero ) for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )"]}
{"input": "Mini-Mage NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b> NL <b>Spell Damage +1</b>", "output": "class MiniMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mini-Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1, stealth=True, spell_damage=1)\u00a7", "input_tokens": ["Mini-Mage", "NAME_END", "4", "ATK_END", "1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Stealth", "</b>", "NL", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Mini", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mini", "-", "Mage", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "1", ",", "stealth", "=", "True", ",", "spell_damage", "=", "1", ")"], "examples": ["class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Annoyo Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = True )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )"]}
{"input": "Piloted Sky Golem NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Deathrattle:</b> Summon a random 4-Cost minion.", "output": "class PilotedSkyGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Piloted Sky Golem\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(4), IsMinion()])), PlayerSelector()))\u00a7", "input_tokens": ["Piloted", "Sky", "Golem", "NAME_END", "6", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "random", "4-Cost", "minion."], "output_tokens": ["class", "Piloted", "Sky", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Piloted", "Sky", "Golem", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "4", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )"]}
{"input": "Scarlet Purifier NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry</b>: Deal 2 damage to all minions with <b>Deathrattle</b>.", "output": "class ScarletPurifier(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scarlet Purifier\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(MinionHasDeathrattle(), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Scarlet", "Purifier", "NAME_END", "4", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Deal", "2", "damage", "to", "all", "minions", "with", "<b>", "Deathrattle", "</b>", "."], "output_tokens": ["class", "Scarlet", "Purifier", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Scarlet", "Purifier", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Minion", "Selector", "(", "Minion", "Has", "Deathrattle", "(", ")", ",", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Deaths Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion , by ) : resurrection = minion . card . summon ( minion . player , minion . game , min ( minion . index , len ( minion . player . minions ) ) ) if resurrection : resurrection . health = 1 super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )"]}
{"input": "Siltfin Spiritwalker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies, draw a card. <b>Overload</b>: (1)", "output": "class SiltfinSpiritwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siltfin Spiritwalker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MURLOC)), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Siltfin", "Spiritwalker", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Murloc", "RACE_END", "Epic", "RARITY_END", "Whenever", "another", "friendly", "Murloc", "dies,", "draw", "a", "card.", "<b>", "Overload", "</b>", ":", "(1)"], "output_tokens": ["class", "Siltfin", "Spiritwalker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Siltfin", "Spiritwalker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ",", "overload", "=", "1", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Earth Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Elemental ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 3 ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )"]}
{"input": "Tinkertown Technician NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Mech, gain +1/+1 and add a <b>Spare Part</b> to your hand.", "output": "class TinkertownTechnician(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Tinkertown Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)), Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Tinkertown", "Technician", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you", "have", "a", "Mech,", "gain", "+1/+1", "and", "add", "a", "<b>", "Spare", "Part", "</b>", "to", "your", "hand."], "output_tokens": ["class", "Tinkertown", "Technician", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "super", "(", ")", ".", "__init__", "(", "`", "Tinkertown", "Technician", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", ",", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Add Card ( Burrowing Mine ( ) , add_to_deck = True ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )"]}
{"input": "Vol'jin NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Swap Health with another minion.", "output": "class Voljin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vol'jin\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY, battlecry=Battlecry(SwapStats(\"health\", \"health\", True), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 2)\u00a7", "input_tokens": ["Vol'jin", "NAME_END", "6", "ATK_END", "2", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Swap", "Health", "with", "another", "minion."], "output_tokens": ["class", "Voljin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vol", "`", "jin", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Swap", "Stats", "(", "`", "health", "`", ",", "`", "health", "`", ",", "True", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "2", ")"], "examples": ["class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Death's Bite NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 1 damage to all minions.", "output": "class DeathsBite(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Death's Bite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())))\u00a7", "input_tokens": ["Death's", "Bite", "NAME_END", "4", "ATK_END", "-1", "DEF_END", "4", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Deal", "1", "damage", "to", "all", "minions."], "output_tokens": ["class", "Deaths", "Bite", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Death", "`", "s", "Bite", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "4", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "1", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")"], "examples": ["class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( Minion Has Deathrattle ( ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )", "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Maexxna NAME_END 2 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Destroy any minion damaged by this minion.", "output": "class Maexxna(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Maexxna\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7", "input_tokens": ["Maexxna", "NAME_END", "2", "ATK_END", "8", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "Destroy", "any", "minion", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Maexxna", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Maexxna", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", "Is", "Minion", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )", "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )"]}
{"input": "Sludge Belcher NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. NL Deathrattle:</b> Summon a 1/2 Slime with <b>Taunt</b>.", "output": "class SludgeBelcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sludge Belcher\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(Slime()), PlayerSelector()))\u00a7", "input_tokens": ["Sludge", "Belcher", "NAME_END", "3", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt.", "NL", "Deathrattle", ":", "</b>", "Summon", "a", "1/2", "Slime", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Sludge", "Belcher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sludge", "Belcher", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "taunt", "=", "True", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Slime", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Annoyo Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = True )"]}
{"input": "Voidcaller NAME_END 3 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Deathrattle:</b> Put a random Demon from your hand into the battlefield.", "output": "class Voidcaller(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voidcaller\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsType(MINION_TYPE.DEMON)], source=CARD_SOURCE.MY_HAND)), PlayerSelector()))\u00a7", "input_tokens": ["Voidcaller", "NAME_END", "3", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Put", "a", "random", "Demon", "from", "your", "hand", "into", "the", "battlefield."], "output_tokens": ["class", "Voidcaller", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Voidcaller", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", "]", ",", "source", "=", "CARD_SOURCE", ".", "MY_HAND", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Add Card ( Burrowing Mine ( ) , add_to_deck = True ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Floating Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Floating Watcher ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Character Damaged ( And ( Is Hero ( ) , Owners Turn ( ) ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"]}
{"input": "Alexstrasza NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Set a hero's remaining Health to 15.", "output": "class Alexstrasza(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alexstrasza\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(SetHealth(15), HeroSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Alexstrasza", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Set", "a", "hero's", "remaining", "Health", "to", "15."], "output_tokens": ["class", "Alexstrasza", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Alexstrasza", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Set", "Health", "(", "15", ")", ",", "Hero", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )"]}
{"input": "Arcane Golem NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Give your opponent a Mana Crystal.", "output": "class ArcaneGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(GiveManaCrystal(), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, charge=True)\u00a7", "input_tokens": ["Arcane", "Golem", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Charge", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Give", "your", "opponent", "a", "Mana", "Crystal."], "output_tokens": ["class", "Arcane", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Golem", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "Mana", "Crystal", "(", ")", ",", "Player", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "charge", "=", "True", ")"], "examples": ["class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )"]}
{"input": "Baine Bloodhoof NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class BaineBloodhoof(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baine Bloodhoof\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Baine", "Bloodhoof", "NAME_END", "4", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Baine", "Bloodhoof", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Baine", "Bloodhoof", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )"]}
{"input": "Blade Flurry NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies.", "output": "class BladeFlurry(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blade Flurry\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.weapon is not None:\u00a7            attack_power = player.effective_spell_damage(player.hero.calculate_attack())\u00a7            player.weapon.destroy()\u00a7\u00a7            for minion in copy.copy(game.other_player.minions):\u00a7                minion.damage(attack_power, self)\u00a7\u00a7            game.other_player.hero.damage(attack_power, self)\u00a7", "input_tokens": ["Blade", "Flurry", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Destroy", "your", "weapon", "and", "deal", "its", "damage", "to", "all", "enemies."], "output_tokens": ["class", "Blade", "Flurry", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blade", "Flurry", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "weapon", "is", "not", "None", ":", "attack_power", "=", "player", ".", "effective_spell_damage", "(", "player", ".", "hero", ".", "calculate_attack", "(", ")", ")", "player", ".", "weapon", ".", "destroy", "(", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "attack_power", ",", "self", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "attack_power", ",", "self", ")"], "examples": ["class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10", "class Cogmasters Wrench ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` s Wrench ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , buffs = [ Buff ( Change Attack ( 2 ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for card in player . hand : card . unattach ( ) player . trigger ( ` card_discarded ` , card ) player . hand = [ ] player . max_mana = 10 player . mana = 10", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) fatigue = False if player . deck . left = = 0 : fatigue = True player . draw ( ) if not fatigue : cost = player . hand [ - 1 ] . mana self . target . damage ( player . effective_spell_damage ( cost ) , self )"]}
{"input": "Brawl NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions except one. <i>(chosen randomly)</i>", "output": "class Brawl(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Brawl\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 2\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(player.minions)\u00a7        minions.extend(game.other_player.minions)\u00a7\u00a7        if len(minions) > 1:\u00a7            survivor = game.random_choice(minions)\u00a7            for minion in minions:\u00a7                if minion is not survivor:\u00a7                    minion.die(self)\u00a7", "input_tokens": ["Brawl", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Destroy", "all", "minions", "except", "one.", "<i>(chosen", "randomly)</i>"], "output_tokens": ["class", "Brawl", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Brawl", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "+", "len", "(", "player", ".", "opponent", ".", "minions", ")", ">", "=", "2", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minions", "=", "copy", ".", "copy", "(", "player", ".", "minions", ")", "minions", ".", "extend", "(", "game", ".", "other_player", ".", "minions", ")", "if", "len", "(", "minions", ")", ">", "1", ":", "survivor", "=", "game", ".", "random_choice", "(", "minions", ")", "for", "minion", "in", "minions", ":", "if", "minion", "is", "not", "survivor", ":", "minion", ".", "die", "(", "self", ")"], "examples": ["class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10"]}
{"input": "Conceal NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions <b>Stealth</b> until your next turn.", "output": "class Conceal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Conceal\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            if not minion.stealth:\u00a7                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7", "input_tokens": ["Conceal", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "minions", "<b>", "Stealth", "</b>", "until", "your", "next", "turn."], "output_tokens": ["class", "Conceal", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Conceal", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "player", ".", "minions", ":", "if", "not", "minion", ".", "stealth", ":", "minion", ".", "add_buff", "(", "Buff", "Until", "(", "Stealth", "(", ")", ",", "Turn", "Started", "(", ")", ")", ")"], "examples": ["class Brawl ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Brawl ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 2 def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( player . minions ) minions . extend ( game . other_player . minions ) if len ( minions ) > 1 : survivor = game . random_choice ( minions ) for minion in minions : if minion is not survivor : minion . die ( self )", "class Power Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Leader Of The Pack ( ) , Summon Panther ( ) ] , player ) option . use ( player , game )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion = self . target . copy ( player ) minion . active = True minion . exhausted = False self . target . remove_from_board ( ) minion . add_to_board ( len ( player . minions ) ) minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"]}
{"input": "Defender NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class DefenderMinion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Defender", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Defender", "Minion", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defender", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"]}
{"input": "Doomguard NAME_END 5 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Discard two random cards.", "output": "class Doomguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomguard\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(amount=2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, charge=True)\u00a7", "input_tokens": ["Doomguard", "NAME_END", "5", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "<b>", "Charge", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Discard", "two", "random", "cards."], "output_tokens": ["class", "Doomguard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Doomguard", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Discard", "(", "amount", "=", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "charge", "=", "True", ")"], "examples": ["class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] , source = CARD_SOURCE . MY_HAND ) ) , Player Selector ( ) ) )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Add Card ( Burrowing Mine ( ) , add_to_deck = True ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )"]}
{"input": "Earth Elemental NAME_END 7 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Taunt</b>. <b>Overload:</b> (3)", "output": "class EarthElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Elemental\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=3)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 8, taunt=True)\u00a7", "input_tokens": ["Earth", "Elemental", "NAME_END", "7", "ATK_END", "8", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Overload", ":", "</b>", "(3)"], "output_tokens": ["class", "Earth", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Earth", "Elemental", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "overload", "=", "3", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "8", ",", "taunt", "=", "True", ")"], "examples": ["class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for card in player . hand : card . unattach ( ) player . trigger ( ` card_discarded ` , card ) player . hand = [ ] player . max_mana = 10 player . mana = 10"]}
{"input": "Explosive Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, deal $2 damage to all enemies.", "output": "class ExplosiveTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Hero):\u00a7            game = attacker.player.game\u00a7            enemies = copy.copy(game.current_player.minions)\u00a7            enemies.append(game.current_player.hero)\u00a7            for enemy in enemies:\u00a7                enemy.damage(2, None)\u00a7            game.check_delayed()\u00a7            super().reveal()\u00a7", "input_tokens": ["Explosive", "Trap", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "is", "attacked,", "deal", "$2", "damage", "to", "all", "enemies."], "output_tokens": ["class", "Explosive", "Trap", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Explosive", "Trap", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "isinstance", "(", "target", ",", "Hero", ")", ":", "game", "=", "attacker", ".", "player", ".", "game", "enemies", "=", "copy", ".", "copy", "(", "game", ".", "current_player", ".", "minions", ")", "enemies", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "for", "enemy", "in", "enemies", ":", "enemy", ".", "damage", "(", "2", ",", "None", ")", "game", ".", "check_delayed", "(", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : player = attacker . player . game . other_player if len ( player . minions ) < 7 and not attacker . removed : from hearthbreaker . cards . minions . paladin import Defender Minion defender = Defender Minion ( ) defender . summon ( player , player . game , len ( player . minions ) ) attacker . current_target = player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )"]}
{"input": "Flame of Azzinoth NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class FlameOfAzzinoth(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame of Azzinoth\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Flame", "of", "Azzinoth", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Flame", "Of", "Azzinoth", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flame", "of", "Azzinoth", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None"]}
{"input": "Gnoll NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "output": "class Gnoll(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnoll\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7", "input_tokens": ["Gnoll", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Gnoll", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnoll", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )"]}
{"input": "Holy Wrath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost.", "output": "class HolyWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Wrath\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        fatigue = False\u00a7        if player.deck.left == 0:\u00a7            fatigue = True\u00a7\u00a7        player.draw()\u00a7        if not fatigue:\u00a7            cost = player.hand[-1].mana\u00a7            self.target.damage(player.effective_spell_damage(cost), self)\u00a7", "input_tokens": ["Holy", "Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Draw", "a", "card", "and", "deal", "damage", "equal", "to", "its", "cost."], "output_tokens": ["class", "Holy", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Wrath", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "fatigue", "=", "False", "if", "player", ".", "deck", ".", "left", "=", "=", "0", ":", "fatigue", "=", "True", "player", ".", "draw", "(", ")", "if", "not", "fatigue", ":", "cost", "=", "player", ".", "hand", "[", "-", "1", "]", ".", "mana", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "cost", ")", ",", "self", ")"], "examples": ["class Solemn Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) for n in range ( 0 , 2 ) : player . draw ( )", "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . weapon is not None : attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) player . weapon . destroy ( ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( attack_power , self ) game . other_player . hero . damage ( attack_power , self )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10", "class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : player = attacker . player . game . other_player if len ( player . minions ) < 7 and not attacker . removed : from hearthbreaker . cards . minions . paladin import Defender Minion defender = Defender Minion ( ) defender . summon ( player , player . game , len ( player . minions ) ) attacker . current_target = player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and not self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL", "output": "class Infernal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Infernal", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Infernal", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Infernal", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None"]}
{"input": "Kirin Tor Mage NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> The next <b>Secret</b> you play this turn costs (0).", "output": "class KirinTorMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kirin Tor Mage\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector(condition=IsSecret()), CardPlayed(IsSecret()))]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Kirin", "Tor", "Mage", "NAME_END", "4", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "The", "next", "<b>", "Secret", "</b>", "you", "play", "this", "turn", "costs", "(0)."], "output_tokens": ["class", "Kirin", "Tor", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kirin", "Tor", "Mage", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "Aura", "(", "[", "Aura", "Until", "(", "Mana", "Change", "(", "-", "100", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Secret", "(", ")", ")", ",", "Card", "Played", "(", "Is", "Secret", "(", ")", ")", ")", "]", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )", "class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Lightwarden NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a character is healed, gain +2 Attack.", "output": "class Lightwarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwarden\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\u00a7", "input_tokens": ["Lightwarden", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "character", "is", "healed,", "gain", "+2", "Attack."], "output_tokens": ["class", "Lightwarden", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightwarden", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Healed", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion = self . target . copy ( player ) minion . active = True minion . exhausted = False self . target . remove_from_board ( ) minion . add_to_board ( len ( player . minions ) ) minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10"]}
{"input": "Mana Wraith NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost (1) more.", "output": "class ManaWraith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wraith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])\u00a7", "input_tokens": ["Mana", "Wraith", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "ALL", "minions", "cost", "(1)", "more."], "output_tokens": ["class", "Mana", "Wraith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Wraith", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "1", ")", ",", "Card", "Selector", "(", "Both", "Player", "(", ")", ",", "Is", "Minion", "(", ")", ")", ")", "]", ")"], "examples": ["class Summoning Portal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summoning Portal ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , auras = [ Aura ( Mana Change ( - 2 , 1 , minimum = 1 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class Deaths Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) )", "class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )"]}
{"input": "Misdirection NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a character attacks your hero, instead he attacks another random character.", "output": "class Misdirection(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misdirection\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, character, target):\u00a7        if isinstance(target, Hero) and not character.removed:\u00a7            game = character.player.game\u00a7            possibilities = copy.copy(game.current_player.minions)\u00a7            possibilities.extend(game.other_player.minions)\u00a7            possibilities.append(game.current_player.hero)\u00a7            possibilities.append(game.other_player.hero)\u00a7            possibilities.remove(character.current_target)\u00a7            character.current_target = game.random_choice(possibilities)\u00a7\u00a7            super().reveal()\u00a7", "input_tokens": ["Misdirection", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "a", "character", "attacks", "your", "hero,", "instead", "he", "attacks", "another", "random", "character."], "output_tokens": ["class", "Misdirection", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Misdirection", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "character", ",", "target", ")", ":", "if", "isinstance", "(", "target", ",", "Hero", ")", "and", "not", "character", ".", "removed", ":", "game", "=", "character", ".", "player", ".", "game", "possibilities", "=", "copy", ".", "copy", "(", "game", ".", "current_player", ".", "minions", ")", "possibilities", ".", "extend", "(", "game", ".", "other_player", ".", "minions", ")", "possibilities", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "possibilities", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "possibilities", ".", "remove", "(", "character", ".", "current_target", ")", "character", ".", "current_target", "=", "game", ".", "random_choice", "(", "possibilities", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )", "class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"]}
{"input": "Noble Sacrifice NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy attacks, summon a 2/1 Defender as the new target.", "output": "class NobleSacrifice(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Noble Sacrifice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        player = attacker.player.game.other_player\u00a7        if len(player.minions) < 7 and not attacker.removed:\u00a7            from hearthbreaker.cards.minions.paladin import DefenderMinion\u00a7            defender = DefenderMinion()\u00a7            defender.summon(player, player.game, len(player.minions))\u00a7            attacker.current_target = player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7", "input_tokens": ["Noble", "Sacrifice", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "an", "enemy", "attacks,", "summon", "a", "2/1", "Defender", "as", "the", "new", "target."], "output_tokens": ["class", "Noble", "Sacrifice", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Noble", "Sacrifice", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "player", "=", "attacker", ".", "player", ".", "game", ".", "other_player", "if", "len", "(", "player", ".", "minions", ")", "<", "7", "and", "not", "attacker", ".", "removed", ":", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "paladin", "import", "Defender", "Minion", "defender", "=", "Defender", "Minion", "(", ")", "defender", ".", "summon", "(", "player", ",", "player", ".", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "attacker", ".", "current_target", "=", "player", ".", "minions", "[", "-", "1", "]", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , character , target ) : if isinstance ( target , Hero ) and not character . removed : game = character . player . game possibilities = copy . copy ( game . current_player . minions ) possibilities . extend ( game . other_player . minions ) possibilities . append ( game . current_player . hero ) possibilities . append ( game . other_player . hero ) possibilities . remove ( character . current_target ) character . current_target = game . random_choice ( possibilities ) super ( ) . reveal ( )", "class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion , by ) : resurrection = minion . card . summon ( minion . player , minion . game , min ( minion . index , len ( minion . player . minions ) ) ) if resurrection : resurrection . health = 1 super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) fatigue = False if player . deck . left = = 0 : fatigue = True player . draw ( ) if not fatigue : cost = player . hand [ - 1 ] . mana self . target . damage ( player . effective_spell_damage ( cost ) , self )", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Power of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give your minions +1/+1; or Summon a 3/2 Panther.", "output": "class PowerOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Power", "of", "the", "Wild", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Give", "your", "minions", "+1/+1;", "or", "Summon", "a", "3/2", "Panther."], "output_tokens": ["class", "Power", "Of", "The", "Wild", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Power", "of", "the", "Wild", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Leader", "Of", "The", "Pack", "(", ")", ",", "Summon", "Panther", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )", "class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion , by ) : resurrection = minion . card . summon ( minion . player , minion . game , min ( minion . index , len ( minion . player . minions ) ) ) if resurrection : resurrection . health = 1 super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Redemption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, return it to life with 1 Health.", "output": "class Redemption(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Redemption\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))\u00a7        if resurrection:\u00a7            resurrection.health = 1\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7", "input_tokens": ["Redemption", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "one", "of", "your", "minions", "dies,", "return", "it", "to", "life", "with", "1", "Health."], "output_tokens": ["class", "Redemption", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Redemption", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "minion", ",", "by", ")", ":", "resurrection", "=", "minion", ".", "card", ".", "summon", "(", "minion", ".", "player", ",", "minion", ".", "game", ",", "min", "(", "minion", ".", "index", ",", "len", "(", "minion", ".", "player", ".", "minions", ")", ")", ")", "if", "resurrection", ":", "resurrection", ".", "health", "=", "1", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( Minion Has Deathrattle ( ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : player = attacker . player . game . other_player if len ( player . minions ) < 7 and not attacker . removed : from hearthbreaker . cards . minions . paladin import Defender Minion defender = Defender Minion ( ) defender . summon ( player , player . game , len ( player . minions ) ) attacker . current_target = player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Hero ) : game = attacker . player . game enemies = copy . copy ( game . current_player . minions ) enemies . append ( game . current_player . hero ) for enemy in enemies : enemy . damage ( 2 , None ) game . check_delayed ( ) super ( ) . reveal ( )", "class Power Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Leader Of The Pack ( ) , Summon Panther ( ) ] , player ) option . use ( player , game )"]}
{"input": "Shadow Madness NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn.", "output": "class ShadowMadness(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Madness\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7\u00a7        super().use(player, game)\u00a7\u00a7        minion = self.target.copy(player)\u00a7        minion.active = True\u00a7        minion.exhausted = False\u00a7\u00a7        self.target.remove_from_board()\u00a7        minion.add_to_board(len(player.minions))\u00a7\u00a7        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Shadow", "Madness", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Gain", "control", "of", "an", "enemy", "minion", "with", "3", "or", "less", "Attack", "until", "end", "of", "turn."], "output_tokens": ["class", "Shadow", "Madness", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "Madness", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "calculate_attack", "(", ")", "<", "=", "3", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minion", "=", "self", ".", "target", ".", "copy", "(", "player", ")", "minion", ".", "active", "=", "True", "minion", ".", "exhausted", "=", "False", "self", ".", "target", ".", "remove_from_board", "(", ")", "minion", ".", "add_to_board", "(", "len", "(", "player", ".", "minions", ")", ")", "minion", ".", "add_buff", "(", "Buff", "Until", "(", "Stolen", "(", ")", ",", "Turn", "Ended", "(", ")", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10", "class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if not minion . stealth : minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )"]}
{"input": "Siphon Soul NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion. Restore #3 Health to your hero.", "output": "class SiphonSoul(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siphon Soul\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(3), self)\u00a7", "input_tokens": ["Siphon", "Soul", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Destroy", "a", "minion.", "Restore", "#3", "Health", "to", "your", "hero."], "output_tokens": ["class", "Siphon", "Soul", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Siphon", "Soul", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "3", ")", ",", "self", ")"], "examples": ["class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Astral Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for card in player . hand : card . unattach ( ) player . trigger ( ` card_discarded ` , card ) player . hand = [ ] player . max_mana = 10 player . mana = 10", "class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Spellbender NAME_END 1 ATK_END 3 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END NIL", "output": "class Spellbender(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7", "input_tokens": ["Spellbender", "NAME_END", "1", "ATK_END", "3", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "NIL"], "output_tokens": ["class", "Spellbender", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spellbender", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "card", ",", "index", ")", ":", "if", "card", ".", "is_spell", "(", ")", "and", "len", "(", "self", ".", "player", ".", "minions", ")", "<", "7", "and", "card", ".", "target", "and", "card", ".", "target", ".", "is_minion", "(", ")", ":", "Spellbender", "Minion", "(", ")", ".", "summon", "(", "self", ".", "player", ",", "self", ".", "player", ".", "game", ",", "len", "(", "self", ".", "player", ".", "minions", ")", ")", "card", ".", "target", "=", "self", ".", "player", ".", "minions", "[", "-", "1", "]", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "player", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "None"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Summoning Portal NAME_END 0 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (2) less, but not less than (1).", "output": "class SummoningPortal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Summoning Portal\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1), CardSelector(condition=IsMinion()))])\u00a7", "input_tokens": ["Summoning", "Portal", "NAME_END", "0", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Your", "minions", "cost", "(2)", "less,", "but", "not", "less", "than", "(1)."], "output_tokens": ["class", "Summoning", "Portal", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Summoning", "Portal", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "4", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "-", "2", ",", "1", ",", "minimum", "=", "1", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Minion", "(", ")", ")", ")", "]", ")"], "examples": ["class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )"]}
{"input": "Thrallmar Farseer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "output": "class ThrallmarFarseer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thrallmar Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, windfury=True)\u00a7", "input_tokens": ["Thrallmar", "Farseer", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Thrallmar", "Farseer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Thrallmar", "Farseer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "windfury", "=", "True", ")"], "examples": ["class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Booty Bay Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )"]}
{"input": "Upgrade! NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon, give it +1/+1. Otherwise equip a 1/3 weapon.", "output": "class Upgrade(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Upgrade!\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.weapons.warrior import HeavyAxe\u00a7        if player.weapon:\u00a7            player.weapon.durability += 1\u00a7            player.weapon.base_attack += 1\u00a7        else:\u00a7            heavy_axe = HeavyAxe().create_weapon(player)\u00a7            heavy_axe.equip(player)\u00a7", "input_tokens": ["Upgrade!", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "If", "you", "have", "a", "weapon,", "give", "it", "+1/+1.", "Otherwise", "equip", "a", "1/3", "weapon."], "output_tokens": ["class", "Upgrade", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Upgrade", "!", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "weapons", ".", "warrior", "import", "Heavy", "Axe", "if", "player", ".", "weapon", ":", "player", ".", "weapon", ".", "durability", "+", "=", "1", "player", ".", "weapon", ".", "base_attack", "+", "=", "1", "else", ":", "heavy_axe", "=", "Heavy", "Axe", "(", ")", ".", "create_weapon", "(", "player", ")", "heavy_axe", ".", "equip", "(", "player", ")"], "examples": ["class Cogmasters Wrench ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` s Wrench ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , buffs = [ Buff ( Change Attack ( 2 ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . weapon is not None : attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) player . weapon . destroy ( ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( attack_power , self ) game . other_player . hero . damage ( attack_power , self )", "class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . mage import Sheep sheep = Sheep ( ) minion = sheep . create_minion ( None ) minion . card = sheep self . target . replace ( minion )", "class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )", "class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 8 : player . mana + = 2 else : player . mana = 10"]}
{"input": "Wisp NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class Wisp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wisp\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Wisp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Wisp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wisp", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )"]}
{"input": "Black Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL", "output": "class BlackWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Black Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Black", "Whelp", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Black", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Black", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )", "class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )", "class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"]}
{"input": "Dragonkin Sorcerer NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever <b>you</b> target this minion with a spell, gain +1/+1.", "output": "class DragonkinSorcerer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragonkin Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector())])])\u00a7", "input_tokens": ["Dragonkin", "Sorcerer", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "Whenever", "<b>", "you", "</b>", "target", "this", "minion", "with", "a", "spell,", "gain", "+1/+1."], "output_tokens": ["class", "Dragonkin", "Sorcerer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragonkin", "Sorcerer", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Spell", "Targeted", "(", ")", ",", "[", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Power Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Leader Of The Pack ( ) , Summon Panther ( ) ] , player ) option . use ( player , game )"]}
{"input": "Hungry Dragon NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> Summon a random 1-Cost minion for your opponent.", "output": "class HungryDragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hungry Dragon\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Summon(CardQuery(conditions=[ManaCost(1), IsMinion()])), PlayerSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7", "input_tokens": ["Hungry", "Dragon", "NAME_END", "5", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "random", "1-Cost", "minion", "for", "your", "opponent."], "output_tokens": ["class", "Hungry", "Dragon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hungry", "Dragon", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "1", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "6", ")"], "examples": ["class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )", "class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` health ` , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )", "class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"]}
{"input": "Solemn Vigil NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. Costs (1) less for each minion that died this turn.", "output": "class SolemnVigil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Solemn Vigil\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for n in range(0, 2):\u00a7            player.draw()\u00a7", "input_tokens": ["Solemn", "Vigil", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Draw", "2", "cards.", "Costs", "(1)", "less", "for", "each", "minion", "that", "died", "this", "turn."], "output_tokens": ["class", "Solemn", "Vigil", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Solemn", "Vigil", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Dead", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "n", "in", "range", "(", "0", ",", "2", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) fatigue = False if player . deck . left = = 0 : fatigue = True player . draw ( ) if not fatigue : cost = player . hand [ - 1 ] . mana self . target . damage ( player . effective_spell_damage ( cost ) , self )", "class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 1 ) and not self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )"]}
