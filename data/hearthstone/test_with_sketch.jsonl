{"input": "Archmage NAME_END 4 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "output": "class Archmage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, spell_damage=1)\u00a7", "input_tokens": ["Archmage", "NAME_END", "4", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Archmage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Archmage", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ",", "spell_damage", "=", "1", ")"], "examples": ["class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Azure Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Azure Drake ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_damage = 1 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_damage = 1 )"]}
{"input": "Booty Bay Bodyguard NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class BootyBayBodyguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4, taunt=True)\u00a7", "input_tokens": ["Booty", "Bay", "Bodyguard", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Booty", "Bay", "Bodyguard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Booty", "Bay", "Bodyguard", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 5 , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 4 <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 5 , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 4 <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )"]}
{"input": "Darkscale Healer NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 2 Health to all friendly characters.", "output": "class DarkscaleHealer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Darkscale Healer\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(2), CharacterSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Darkscale", "Healer", "NAME_END", "4", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "2", "Health", "to", "all", "friendly", "characters."], "output_tokens": ["class", "Darkscale", "Healer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Darkscale", "Healer", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "2", ")", ",", "Character", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> ) <pad> ( player <pad> ( 2 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion <pad> = <pad> ( 5 <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ) <pad> ) <pad> ( player <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> 5 <pad> )"]}
{"input": "Fiery War Axe NAME_END 3 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class FieryWarAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fiery War Axe\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2)\u00a7", "input_tokens": ["Fiery", "War", "Axe", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "2", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Fiery", "War", "Axe", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fiery", "War", "Axe", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "2", ")"], "examples": ["class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "class Ogre Warmaul ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Warmaul ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"], "sketch": ["class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> , False ) def create_weapon ( self , player ) : return Weapon ( <pad> , 2 )", "class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> , False ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> )", "class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> )", "class Axe <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> , <pad> 2 <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon <pad> ( <pad> , <pad> 2 <pad> )"], "oracle-sketch": ["class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , 2 )", "class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> )", "class <pad> Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Axe ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> )", "class Axe <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> 2 <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon <pad> ( <pad> , <pad> 2 <pad> )"]}
{"input": "Frostwolf Warlord NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain +1/+1 for each other friendly minion on the battlefield.", "output": "class FrostwolfWarlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostwolf Warlord\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))), Buff(ChangeHealth(Count(MinionSelector())))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Frostwolf", "Warlord", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "+1/+1", "for", "each", "other", "friendly", "minion", "on", "the", "battlefield."], "output_tokens": ["class", "Frostwolf", "Warlord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frostwolf", "Warlord", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "Count", "(", "Minion", "Selector", "(", ")", ")", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "Count", "(", "Minion", "Selector", "(", ")", ")", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "class King Of Beasts ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King of Beasts ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 6 , taunt = True )", "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = [ Buff ( <pad> Change ( Count ( Minion Selector ( <pad> Player ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( <pad> Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( <pad> ( <pad> ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> = <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> [ <pad> ( ) <pad> ) ) , Player Selector ( <pad> Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = [ Buff ( <pad> Change ( Count ( Minion Selector ( <pad> , <pad> ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( <pad> Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( <pad> ( <pad> ) ) ) ) <pad> ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( ) <pad> ) ) , <pad> Selector ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )"]}
{"input": "Hellfire NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to ALL characters.", "output": "class Hellfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hellfire\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Hellfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "ALL", "characters."], "output_tokens": ["class", "Hellfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hellfire", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "targets", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "targets", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Missiles ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Missiles ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> ( <pad> ( <pad> ) , <pad> ( players = <pad> ( <pad> ) <pad> ( <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> = <pad> ( <pad> ) <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for <pad> in <pad> ( 3 <pad> ) <pad> targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) <pad> . <pad> ( targets <pad> . <pad> ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( ) , <pad> ( <pad> ( <pad> ) <pad> ( <pad> = <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , <pad> , <pad> ( <pad> ( <pad> , <pad> = <pad> ( ) ) ) <pad> ( <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( ) <pad> ) , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) <pad> game . <pad> targets <pad> . damage ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( ) <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> )"]}
{"input": "Innervate NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain 2 Mana Crystals this turn only.", "output": "class Innervate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Innervate\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 8:\u00a7            player.mana += 2\u00a7        else:\u00a7            player.mana = 10\u00a7", "input_tokens": ["Innervate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Gain", "2", "Mana", "Crystals", "this", "turn", "only."], "output_tokens": ["class", "Innervate", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Innervate", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "mana", "<", "8", ":", "player", ".", "mana", "+", "=", "2", "else", ":", "player", ".", "mana", "=", "10"], "examples": ["class Gallywixs Coin ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Coin ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 10 : player . mana + = 1", "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Excess Mana ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Excess Mana ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . draw ( )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> < 10 : player . <pad> + = <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> < <pad> : player . <pad> + = <pad> : player <pad> . <pad> ( <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> ( 2 <pad> player . hero . <pad> ( 2 )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> ( <pad> ) player . hero . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < <pad> : player . mana + = <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> < <pad> : player . <pad> + = <pad> else : <pad> player <pad> . <pad> = <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> 2 <pad> player <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player <pad> . <pad> player . <pad> . <pad>"]}
{"input": "Magma Rager NAME_END 5 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class MagmaRager(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Magma Rager\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 1)\u00a7", "input_tokens": ["Magma", "Rager", "NAME_END", "5", "ATK_END", "1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Magma", "Rager", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Magma", "Rager", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "1", ")"], "examples": ["class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Voidwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidwalker ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , taunt = True )", "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( <pad> , 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( <pad> , 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 <pad> , <pad> )"]}
{"input": "Mortal Coil NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion. If that kills it, draw a card.", "output": "class MortalCoil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mortal Coil\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(1) and not self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7            player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Mortal", "Coil", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage", "to", "a", "minion.", "If", "that", "kills", "it,", "draw", "a", "card."], "output_tokens": ["class", "Mortal", "Coil", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mortal", "Coil", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "health", "<", "=", "player", ".", "effective_spell_damage", "(", "1", ")", "and", "not", "self", ".", "target", ".", "divine_shield", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "player", ".", "draw", "(", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ) <pad> self . target <pad> ) and <pad> self . target <pad> ) : self . target . damage <pad> . <pad> ( <pad> ) , self <pad> . <pad> player <pad> . <pad> ( player <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game <pad> ) : super ( ) <pad> . <pad> use ( <pad> player , game <pad> ) <pad> self ) <pad> . <pad> . <pad> ) : target . damage ( player . effective_spell_damage ( <pad> ) , <pad> ) <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> ( ) <pad> ) <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ) <pad> self . target <pad> and self . target <pad> : self . target . <pad> ( <pad> ) self <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ) <pad> self . target <pad> and self . target <pad> : self . target . <pad> ( <pad> ) self <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ) <pad> . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage <pad> ( <pad> ) and not self . target . divine_shield <pad> : self . target . damage ( player . effective_spell_damage ( <pad> ) , self <pad> ) <pad> player <pad> . <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game <pad> ) : super ( ) <pad> . <pad> use ( <pad> player , game ) <pad> target . <pad> player . effective_spell_damage ( 1 <pad> ) <pad> self <pad> . <pad> . <pad> self <pad> target . damage ( player . effective_spell_damage ( <pad> ) , <pad> ) <pad> player <pad> . <pad> ( <pad> ) <pad> self . target <pad> . <pad> ( player , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) if self . target . <pad> . <pad> and self . target <pad> : self . target . <pad> ( <pad> ) self <pad> . <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) if self . target . <pad> . <pad> and self . target <pad> : self . target . <pad> ( <pad> ) self <pad> . <pad> ( <pad> ) else : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> . <pad> . <pad> : <pad> . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )"]}
{"input": "Polymorph NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 1/1 Sheep.", "output": "class Polymorph(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Polymorph\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.mage import Sheep\u00a7        sheep = Sheep()\u00a7        minion = sheep.create_minion(None)\u00a7        minion.card = sheep\u00a7        self.target.replace(minion)\u00a7", "input_tokens": ["Polymorph", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Transform", "a", "minion", "into", "a", "1/1", "Sheep."], "output_tokens": ["class", "Polymorph", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Polymorph", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "mage", "import", "Sheep", "sheep", "=", "Sheep", "(", ")", "minion", "=", "sheep", ".", "create_minion", "(", "None", ")", "minion", ".", "card", "=", "sheep", "self", ".", "target", ".", "replace", "(", "minion", ")"], "examples": ["class Hex ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hex ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) frog = hearthbreaker . cards . minions . neutral . Frog ( ) minion = frog . create_minion ( None ) minion . card = frog self . target . replace ( minion )", "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( ) <pad> . create_minion ( <pad> ) <pad> self . target . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> , <pad> ) <pad> , <pad> = <pad> ( ) <pad> create_minion ( self <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) <pad> ( ) <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> ( ) <pad> ( self <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> , <pad> ( <pad> , <pad> . <pad> ) <pad> ( self , <pad> ) : <pad> ( <pad> ) <pad> . <pad> def <pad> ( self <pad> , <pad> player <pad> ) <pad> ( <pad> ( <pad> self <pad> player <pad> . <pad> . <pad> , self . <pad> ) <pad> . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> . <pad> . <pad> . <pad> ( <pad> . <pad> ) <pad> self <pad> . <pad> . <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> hearthbreaker . cards . minions . <pad> ( ) minion = <pad> . create_minion ( None ) minion . card = <pad> self . target . replace ( minion )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> ( ) <pad> , <pad> ) <pad> = <pad> ( ) <pad> create_minion ( self <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) <pad> ( <pad> , <pad> , <pad> ( ) <pad> ( <pad> ) <pad> ( ) <pad> create_minion ( self <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY <pad> . <pad> , <pad> . <pad> . <pad> ) <pad> def <pad> ( self , player ) : <pad> ( <pad> ) <pad> . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> . <pad> ( ) <pad> . <pad> ( <pad> ) <pad> . <pad> self . <pad> . <pad> ( )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . cards <pad> . <pad> = <pad> ( ) <pad> = <pad> . <pad> ( <pad> ) <pad> . <pad> = <pad> self <pad> . <pad> . <pad> ) <pad>"]}
{"input": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL", "output": "class SearingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Searing", "Totem", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Searing", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Searing", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Mana Tide Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Tide Totem ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"], "sketch": ["class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( 1 <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( 1 <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> , <pad> )"], "oracle-sketch": ["class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( 1 <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( 1 <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion <pad> ( <pad> , <pad> )"]}
{"input": "Silverback Patriarch NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class SilverbackPatriarch(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silverback Patriarch\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, taunt=True)\u00a7", "input_tokens": ["Silverback", "Patriarch", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Silverback", "Patriarch", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silverback", "Patriarch", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , taunt = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , taunt = True )"]}
{"input": "Stormwind Knight NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "output": "class StormwindKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormwind Knight\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, charge=True)\u00a7", "input_tokens": ["Stormwind", "Knight", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Stormwind", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stormwind", "Knight", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "charge", "=", "True", ")"], "examples": ["class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )"], "sketch": ["class <pad> Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Knight ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Knight ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class Stormwind <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )"], "oracle-sketch": ["class <pad> Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Knight ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Knight ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class Stormwind <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )"]}
{"input": "Voodoo Doctor NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Restore 2 Health.", "output": "class VoodooDoctor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voodoo Doctor\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Heal(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Voodoo", "Doctor", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "2", "Health."], "output_tokens": ["class", "Voodoo", "Doctor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Voodoo", "Doctor", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , <pad> = <pad> ) <pad> ( <pad> , <pad> ) <pad> ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Heal ( <pad> ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE , <pad> = <pad> ) <pad> ( <pad> , <pad> ) <pad> ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )"]}
{"input": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Spell Damage +1</b>", "output": "class WrathOfAirTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, spell_damage=1)\u00a7", "input_tokens": ["Wrath", "of", "Air", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Wrath", "Of", "Air", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "of", "Air", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "spell_damage", "=", "1", ")"], "examples": ["class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Mana Tide Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Tide Totem ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"], "sketch": ["class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , <pad> = <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , <pad> = <pad> 1 <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = <pad> )"], "oracle-sketch": ["class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , <pad> = <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , <pad> = <pad> 1 <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 <pad> , <pad> 2 <pad> , <pad> )", "class <pad> Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Totem ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = <pad> )"]}
{"input": "Astral Communion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 10 Mana Crystals. Discard your hand.", "output": "class AstralCommunion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Astral Communion\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for card in player.hand:\u00a7            card.unattach()\u00a7            player.trigger(\"card_discarded\", card)\u00a7        player.hand = []\u00a7        player.max_mana = 10\u00a7        player.mana = 10\u00a7", "input_tokens": ["Astral", "Communion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Gain", "10", "Mana", "Crystals.", "Discard", "your", "hand."], "output_tokens": ["class", "Astral", "Communion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Astral", "Communion", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "card", "in", "player", ".", "hand", ":", "card", ".", "unattach", "(", ")", "player", ".", "trigger", "(", "`", "card_discarded", "`", ",", "card", ")", "player", ".", "hand", "=", "[", "]", "player", ".", "max_mana", "=", "10", "player", ".", "mana", "=", "10"], "examples": ["class Excess Mana ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Excess Mana ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . draw ( )", "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "class Lava Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Shock ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 2 , self ) player . upcoming_overload = 0 player . mana + = player . current_overload player . current_overload = 0", "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> < 10 : player . <pad> + = <pad> : player . hand . <pad> ( <pad> ( <pad> ) <pad> . player <pad> player", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> player <pad> player . <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , <pad> ) ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> , <pad> = <pad> ( <pad> ( <pad> , <pad> ( ) ) ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player . <pad> : <pad> . <pad> player <pad> . <pad> ( <pad> ) player . hand [ <pad> ] . player = <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ) player . <pad> player . <pad> = player . <pad> player . <pad> = <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> = <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> )"]}
{"input": "Annoy-o-Tron NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "output": "class AnnoyoTron(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, divine_shield=True, taunt=True)\u00a7", "input_tokens": ["Annoy-o-Tron", "NAME_END", "1", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Annoyo", "Tron", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Annoy", "-", "o", "-", "Tron", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "divine_shield", "=", "True", ",", "taunt", "=", "True", ")"], "examples": ["class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "class Enhanceo Mechano ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Enhance - o Mechano ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> - o <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , divine_shield = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , divine_shield = True , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> - o <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , divine_shield = True , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , divine_shield = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , divine_shield = True , <pad> = True )"]}
{"input": "Burly Rockjaw Trogg NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +2 Attack.", "output": "class BurlyRockjawTrogg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burly Rockjaw Trogg\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\u00a7", "input_tokens": ["Burly", "Rockjaw", "Trogg", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "opponent", "casts", "a", "spell,", "gain", "+2", "Attack."], "output_tokens": ["class", "Burly", "Rockjaw", "Trogg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Burly", "Rockjaw", "Trogg", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "class Trade Prince Gallywix ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Trade Prince Gallywix ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 8 , effects = [ Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Friendly Player ( ) ) ) ) , Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Gallywixs Coin ( ) ) , Player Selector ( Enemy Player ( ) ) ) ) ] )", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Lorewalker Cho ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lorewalker Cho ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Spell Cast ( player = Both Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Other Player ( ) ) ) ) ] )"], "sketch": ["class <pad> Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trogg ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast <pad> ( <pad> = <pad> Enemy Player ( ) ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> ( <pad> = <pad> ( ) <pad> ) <pad> , <pad> ( <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = <pad> Player ( ) ) , Action Tag ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector <pad> ( <pad> ) ) ) ] )"], "oracle-sketch": ["class <pad> Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trogg ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast <pad> ( <pad> = <pad> Enemy Player ( ) ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> ( <pad> = <pad> ( ) <pad> ) <pad> , <pad> ( <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( player = <pad> Player ( ) ) , Action Tag ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector <pad> ( <pad> ) ) ) ] )"]}
{"input": "Cogmaster's Wrench NAME_END 1 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Has +2 Attack while you have a Mech.", "output": "class CogmastersWrench(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cogmaster's Wrench\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 3, buffs=[Buff(ChangeAttack(2), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])\u00a7", "input_tokens": ["Cogmaster's", "Wrench", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Has", "+2", "Attack", "while", "you", "have", "a", "Mech."], "output_tokens": ["class", "Cogmasters", "Wrench", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cogmaster", "`", "s", "Wrench", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "3", ",", "buffs", "=", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")"], "examples": ["class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "class Goblin Sapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Sapper ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Change Attack ( 4 ) , Greater Than ( Count ( Card Selector ( Enemy Player ( ) ) ) , value = 5 ) ) ] )", "class Sword Of Justice ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sword of Justice ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 5 , effects = [ Effect ( Minion Summoned ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Target Selector ( ) ) ) , Effect ( Minion Summoned ( ) , Action Tag ( Decrease Durability ( ) , Weapon Selector ( ) ) ) ] )", "class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )"], "sketch": ["class Cogmaster ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 1 , <pad> , <pad> = [ <pad> ( Change Attack ( <pad> ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . <pad> ) ) ) , value = 0 ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , <pad> = [ <pad> ( <pad> ( ) , Greater Than ( Count ( <pad> Selector ( ) ) , value = 0 ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , <pad> = [ <pad> ( Change Attack ( <pad> ) , Greater Than ( Count ( <pad> Selector ( <pad> ( ) ) ) , value = <pad> ) ) ] )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , <pad> , <pad> = [ <pad> ( <pad> ( ) , <pad> ( <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) ) <pad> ) , <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ( <pad> ( <pad> , <pad> ) ) ] )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> , <pad> = [ <pad> ( <pad> Attack ( <pad> ( ) ) , <pad> ( <pad> ( <pad> ( <pad> ( ) , <pad> ( ) ) ) , <pad> ) ) ] )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 1 , <pad> , <pad> = [ <pad> ( Change Attack ( 2 <pad> ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , buffs = [ Buff ( <pad> ( ) , Greater Than ( Count ( <pad> Selector ( ) ) , value = 0 ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , buffs = [ Buff ( Change Attack ( <pad> ) , Greater Than ( Count ( <pad> Selector ( <pad> ( ) ) ) , value = <pad> ) ) ] )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , <pad> , <pad> = <pad> [ Buff ( Change Attack ( <pad> ) , <pad> ( <pad> ( <pad> Selector ( <pad> ( <pad> ) <pad> ) , <pad> ) ) ] )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` s <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> , <pad> = [ <pad> ( <pad> Attack <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ( <pad> ) ) ) , <pad> ) ) ] )"]}
{"input": "Echo of Medivh NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of each friendly minion into your hand.", "output": "class EchoOfMedivh(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Echo of Medivh\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in sorted(copy.copy(player.minions), key=lambda minion: minion.born):\u00a7            if len(player.hand) < 10:\u00a7                player.hand.append(minion.card)\u00a7", "input_tokens": ["Echo", "of", "Medivh", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Put", "a", "copy", "of", "each", "friendly", "minion", "into", "your", "hand."], "output_tokens": ["class", "Echo", "Of", "Medivh", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Echo", "of", "Medivh", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "sorted", "(", "copy", ".", "copy", "(", "player", ".", "minions", ")", ",", "key", "=", "lambda", "minion", ":", "minion", ".", "born", ")", ":", "if", "len", "(", "player", ".", "hand", ")", "<", "10", ":", "player", ".", "hand", ".", "append", "(", "minion", ".", "card", ")"], "examples": ["class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Ancestors Call ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestor ` s Call ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for player in game . players : minions = [ card for card in player . hand if card . is_minion ( ) ] if len ( minions ) and len ( player . minions ) < 7 : minion_card = game . random_choice ( minions ) minion_card . unattach ( ) player . hand . remove ( minion_card ) minion_card . summon ( player , game , len ( player . minions ) )", "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( <pad> . <pad> ( <pad> , <pad> ) <pad> ( ) <pad> : <pad> = copy . <pad> ( <pad> . <pad> ( <pad> ) <pad> player <pad> ( ) . <pad> ( player , <pad> ) <pad> player . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( <pad> ( <pad> . <pad> ) <pad> ) : card = copy . <pad> ( <pad> . <pad> ( <pad> . hand ) <pad> player . hand . append ( <pad> ) <pad> . player <pad> player", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) <pad> def <pad> self , <pad> . <pad> . <pad> ) <pad> def <pad> ( self , player ) : <pad> ( <pad> ) <pad> . <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> player . <pad> ) <pad> : <pad> = <pad> ( <pad> ( <pad> self <pad> player . hand . append ( new_card <pad> . <pad> , self . <pad> ) <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def <pad> ( self , player , game ) : <pad> super <pad> . <pad> ( <pad> ) <pad> ( <pad> . <pad> ( <pad> , <pad> . <pad> ) <pad> ( <pad> ) <pad> : minion_card = game . <pad> ( <pad> . <pad> ( ) player . hand . <pad> ( <pad> ) <pad> . <pad> ( player , <pad> ( player <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ( <pad> ( <pad> . <pad> and <pad> ) <pad> : <pad> = <pad> ( <pad> . <pad> ( <pad> . <pad> ( <pad> ) <pad> . <pad> ( <pad> ) <pad> . <pad> ( <pad> ) <pad> hand <pad> . <pad> ( <pad> , <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) <pad> ( <pad> copy . copy <pad> ( player <pad> ) <pad> , <pad> : <pad> . <pad> ) <pad> len ( player . <pad> ) < <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( <pad> . <pad> . <pad> ) <pad> = <pad> . <pad> ( <pad> . hand ) <pad> player . hand . append ( card ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) <pad> def <pad> ( self , player ) : <pad> ( <pad> ) <pad> . <pad> ( <pad> , <pad> ) <pad> . <pad> ( <pad> . <pad> ) <pad> = <pad> minion <pad> : <pad> ) : if len ( <pad> player . hand ) < 10 : <pad> player . hand . append <pad> ( <pad> . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def <pad> ( self , player , game ) : <pad> super ( ) . <pad> ( player , game ) <pad> ( <pad> . <pad> ( player <pad> . minions <pad> ) <pad> , <pad> : <pad> . <pad> ) <pad> : <pad> if <pad> len ( player . <pad> ) < <pad> : <pad> player . hand <pad> . <pad> ( <pad> . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) for <pad> in <pad> ( <pad> . <pad> ( <pad> player <pad> . <pad> ) <pad> , <pad> : <pad> . <pad> ) <pad> : if len ( player . hand ) < 10 : player . hand . append <pad> ( <pad> . <pad> )"]}
{"input": "Floating Watcher NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn, gain +2/+2.", "output": "class FloatingWatcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Floating Watcher\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(), OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\u00a7", "input_tokens": ["Floating", "Watcher", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "hero", "takes", "damage", "on", "your", "turn,", "gain", "+2/+2."], "output_tokens": ["class", "Floating", "Watcher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Floating", "Watcher", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "And", "(", "Is", "Hero", "(", ")", ",", "Owners", "Turn", "(", ")", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , <pad> = <pad> ( <pad> ( <pad> ) , Hero Selector ( ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag ( Damage ( 2 ) , <pad> Selector ( <pad> ( <pad> ( <pad> ) ) , <pad> ) , <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( 4 , <pad> , effects = [ Effect ( <pad> Attack ( <pad> Hero ( ) ) , Action Tag ( <pad> ( 2 ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Damaged ( ) , Action Tag ( <pad> ( 2 ) , <pad> Selector ( <pad> ( ) ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag ( <pad> ( 2 ) , <pad> ( <pad> ( <pad> ) ) <pad> ) , <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( 4 , <pad> , effects = [ Effect ( Character <pad> ( Is Hero ( ) ) , Action Tag ( <pad> ( 2 ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Damaged ( ) , Action Tag ( <pad> ( 2 ) , <pad> ( <pad> ( ) ) ) ) ] )"]}
{"input": "Gnomish Experimenter NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Draw a card. If it's a minion, transform it into a Chicken.", "output": "class GnomishExperimenter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Experimenter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=(Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(), Matches(LastDrawnSelector(), IsMinion()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Gnomish", "Experimenter", "NAME_END", "3", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card.", "If", "it's", "a", "minion,", "transform", "it", "into", "a", "Chicken."], "output_tokens": ["class", "Gnomish", "Experimenter", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnomish", "Experimenter", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "(", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Transform", "(", "Gnomish", "Chicken", "(", ")", ")", ",", "Last", "Drawn", "Selector", "(", ")", ",", "Matches", "(", "Last", "Drawn", "Selector", "(", ")", ",", "Is", "Minion", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Call Pet ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Call Pet ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : def reduce_cost ( card ) : if card . is_minion ( ) and card . minion_type = = MINION_TYPE . BEAST : card . add_buff ( Buff ( Mana Change ( - 4 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ( <pad> ) <pad> = <pad> . <pad> ( <pad> ) <pad> ( <pad> , <pad> ) <pad> , <pad> ) <pad> ( )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Transform ( <pad> ( <pad> ) , <pad> Selector ( ) , <pad> Count <pad> ( <pad> ( <pad> ) , value = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) ) <pad> ) , <pad> Selector ( ) ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> ( ) <pad> ( <pad> , <pad> = <pad> ( <pad> ) <pad> card . minion_type is MINION_TYPE . <pad> ( <pad> ) <pad> ( <pad> ) <pad> self <pad> player <pad> ( <pad> ) , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> ( ) <pad> ( <pad> ( <pad> ( <pad> ) ) ) <pad> ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Transform ( <pad> ( ) ) , <pad> Selector ( ) , <pad> ( <pad> Selector ( Is <pad> ( <pad> ) ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> ( <pad> ( <pad> ) ) <pad> ) <pad> ) ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> ) <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) <pad> ) <pad> self <pad> player <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Iron Juggernaut NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Shuffle a Mine into your opponent's deck. When drawn, it explodes for 10 damage.", "output": "class IronJuggernaut(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Juggernaut\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(AddCard(BurrowingMine(), add_to_deck=True), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7", "input_tokens": ["Iron", "Juggernaut", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Shuffle", "a", "Mine", "into", "your", "opponent's", "deck.", "When", "drawn,", "it", "explodes", "for", "10", "damage."], "output_tokens": ["class", "Iron", "Juggernaut", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Iron", "Juggernaut", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Burrowing", "Mine", "(", ")", ",", "add_to_deck", "=", "True", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ")"], "examples": ["class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ( )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> player <pad> ( <pad> ( <pad> ) ( ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . <pad> , <pad> = [ <pad> ( <pad> ( Card Query ( source = <pad> . <pad> , <pad> Self Selector ( <pad> ) , <pad> ) , Player Selector ( ) ) <pad> ( <pad> ( ) <pad> ( ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( <pad> ( ) <pad> ) , Player Selector ( <pad> Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ( <pad> . <pad> ) ) , Player Selector ( ) ) ) <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> ( self <pad> ) ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( Add <pad> Card <pad> ( <pad> ( <pad> ) , add_to_deck = True ) , Player Selector ( ) ) <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( <pad> ( ) , <pad> ) , Player Selector ( <pad> Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> , <pad> = <pad> , <pad> ( Add <pad> Card <pad> ( <pad> ( <pad> ) <pad> ) , Player Selector ( ) ) ) <pad> )"]}
{"input": "Madder Bomber NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 6 damage randomly split between all other characters.", "output": "class MadderBomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Madder Bomber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Madder", "Bomber", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "6", "damage", "randomly", "split", "between", "all", "other", "characters."], "output_tokens": ["class", "Madder", "Bomber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Madder", "Bomber", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", "6", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Avenging Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenging Wrath ` , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )"], "sketch": ["class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( <pad> Player ( ) , Random Picker <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ( <pad> ( <pad> ) <pad> , <pad> ( <pad> = <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Damage ( 1 ) , Character Selector ( <pad> Player ( ) , Random Picker ( <pad> ) ) ) ) <pad> )"], "oracle-sketch": ["class <pad> Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Bomber ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( <pad> Player ( ) , Random Picker <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ( <pad> ( <pad> ) <pad> , <pad> ( <pad> = <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Damage ( 1 ) , Character Selector ( <pad> Player ( ) , Random Picker ( <pad> ) ) ) ) <pad> )"]}
{"input": "Mini-Mage NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b> NL <b>Spell Damage +1</b>", "output": "class MiniMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mini-Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1, stealth=True, spell_damage=1)\u00a7", "input_tokens": ["Mini-Mage", "NAME_END", "4", "ATK_END", "1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Stealth", "</b>", "NL", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Mini", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mini", "-", "Mage", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "1", ",", "stealth", "=", "True", ",", "spell_damage", "=", "1", ")"], "examples": ["class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Azure Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Azure Drake ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Mage ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> , spell_damage = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True , <pad> = <pad> )"]}
{"input": "Piloted Sky Golem NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Deathrattle:</b> Summon a random 4-Cost minion.", "output": "class PilotedSkyGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Piloted Sky Golem\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(4), IsMinion()])), PlayerSelector()))\u00a7", "input_tokens": ["Piloted", "Sky", "Golem", "NAME_END", "6", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "random", "4-Cost", "minion."], "output_tokens": ["class", "Piloted", "Sky", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Piloted", "Sky", "Golem", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "4", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )"], "sketch": ["class Piloted <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ <pad> ( <pad> ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class <pad> Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Golem ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( <pad> Golem ( ) ) , Player Selector ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( ) , Minion <pad> ( <pad> ( ) , <pad> ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( <pad> ( ) ) , Player Selector ( ) ) )", "class <pad> Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Golem ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> ( <pad> ( Minion <pad> ( <pad> ) ) , <pad> ( <pad> ( ) , <pad> Selector ( <pad> ) ) <pad> )"], "oracle-sketch": ["class Piloted <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( <pad> ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class <pad> Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Golem ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( <pad> ( ) ) , Player Selector ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( <pad> ( <pad> = <pad> ( ) , <pad> ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( <pad> ( ) ) , Player Selector ( ) ) )", "class <pad> Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Golem ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( ) ) <pad> ) , <pad> Selector ( <pad> ) ) <pad> )"]}
{"input": "Scarlet Purifier NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry</b>: Deal 2 damage to all minions with <b>Deathrattle</b>.", "output": "class ScarletPurifier(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scarlet Purifier\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(MinionHasDeathrattle(), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Scarlet", "Purifier", "NAME_END", "4", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Deal", "2", "damage", "to", "all", "minions", "with", "<b>", "Deathrattle", "</b>", "."], "output_tokens": ["class", "Scarlet", "Purifier", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Scarlet", "Purifier", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Minion", "Selector", "(", "Minion", "Has", "Deathrattle", "(", ")", ",", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = Deathrattle ( Damage ( <pad> ) , Minion Selector ( players = Both Player ( ) ) ) , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector <pad> ( <pad> = <pad> Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = Deathrattle ( Damage ( 2 ) , <pad> Selector ( players = Both Player ( ) ) ) , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( <pad> ) , Minion Selector ( <pad> Player <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , Character Selector ( players = Both Player <pad> ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( Damage ( <pad> ) , Minion Selector ( <pad> Both Player ( ) ) ) , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( <pad> ( <pad> ) , <pad> Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Damage ( 2 ) , <pad> Selector ( <pad> Both Player ( ) ) ) , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( <pad> ) , Minion Selector ( <pad> ( ) , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( <pad> ( ) , <pad> ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Siltfin Spiritwalker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies, draw a card. <b>Overload</b>: (1)", "output": "class SiltfinSpiritwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siltfin Spiritwalker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MURLOC)), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Siltfin", "Spiritwalker", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Murloc", "RACE_END", "Epic", "RARITY_END", "Whenever", "another", "friendly", "Murloc", "dies,", "draw", "a", "card.", "<b>", "Overload", "</b>", ":", "(1)"], "output_tokens": ["class", "Siltfin", "Spiritwalker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Siltfin", "Spiritwalker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ",", "overload", "=", "1", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Murloc Tidecaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidecaller ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ ( Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ) ] )", "class Junkbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Junkbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ ( Effect ( Minion <pad> ( Is Type ( MINION_TYPE . MURLOC ) , <pad> Both Player ( ) ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . <pad> ) ) , Action Tag <pad> ( <pad> ) , <pad> ( <pad> ) <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MURLOC <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( <pad> ( <pad> ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) <pad> ( <pad> ) <pad> ( <pad> ( ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ <pad> Effect ( Minion <pad> ( Is Type ( MINION_TYPE . MURLOC <pad> ) ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . <pad> ) ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MURLOC , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = [ <pad> ( <pad> Minion <pad> ( Is Type ( MINION_TYPE . MURLOC <pad> ) <pad> ) , <pad> ( <pad> ( <pad> ) , <pad> Player ( ) ) ) ] )"]}
{"input": "Tinkertown Technician NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Mech, gain +1/+1 and add a <b>Spare Part</b> to your hand.", "output": "class TinkertownTechnician(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Tinkertown Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)), Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Tinkertown", "Technician", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you", "have", "a", "Mech,", "gain", "+1/+1", "and", "add", "a", "<b>", "Spare", "Part", "</b>", "to", "your", "hand."], "output_tokens": ["class", "Tinkertown", "Technician", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "super", "(", ")", ".", "__init__", "(", "`", "Tinkertown", "Technician", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", ",", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Mech Bear Cat ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mech - Bear - Cat ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Damaged ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = MINION_TYPE . MECH <pad> , <pad> = [ <pad> ( <pad> , <pad> ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) <pad> )", "class <pad> Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . <pad> ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , <pad> = MINION_TYPE . MECH ) <pad> ( <pad> , <pad> ) <pad> spare_part_list <pad> ( <pad> = <pad> ( Add Card ( Card Query ( source = <pad> . LIST , <pad> spare_part_list ) ) , Player Selector ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = [ <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) <pad> ) ) , Player Selector ( ) ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) <pad> ( <pad> , <pad> ) <pad> Minion ( <pad> , <pad> = <pad> ) , <pad> ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) <pad> )", "class <pad> Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( <pad> Is Type ( MINION_TYPE . <pad> ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , <pad> = <pad> ) <pad> ( <pad> , <pad> ) <pad> Minion ( <pad> , <pad> = <pad> ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) <pad> ( <pad> ) <pad> , <pad> , <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> ( Add Card ( Card Query ( <pad> = <pad> Is Type ( MINION_TYPE . MECH ) <pad> ) ) , <pad> ) ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( 1 ) , <pad> Selector ( <pad> , <pad> ( ) , <pad> ( <pad> ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Vol'jin NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Swap Health with another minion.", "output": "class Voljin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vol'jin\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY, battlecry=Battlecry(SwapStats(\"health\", \"health\", True), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 2)\u00a7", "input_tokens": ["Vol'jin", "NAME_END", "6", "ATK_END", "2", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Swap", "Health", "with", "another", "minion."], "output_tokens": ["class", "Voljin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vol", "`", "jin", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Swap", "Stats", "(", "`", "health", "`", ",", "`", "health", "`", ",", "True", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "2", ")"], "examples": ["class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( ) , <pad> ( <pad> ( <pad> ) , <pad> Player <pad> ) , <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> , <pad> = <pad> ( <pad> ( ) , Minion Selector ( players = <pad> Player ( ) , <pad> = <pad> ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Heal ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Swap Stats ( ` health ` , ` <pad> ` , <pad> ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( ) , Minion Selector <pad> ( <pad> Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> , <pad> ( <pad> , <pad> , <pad> ) , Minion Selector ( players = <pad> Player ( ) , picker = <pad> Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Death's Bite NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 1 damage to all minions.", "output": "class DeathsBite(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Death's Bite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())))\u00a7", "input_tokens": ["Death's", "Bite", "NAME_END", "4", "ATK_END", "-1", "DEF_END", "4", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Deal", "1", "damage", "to", "all", "minions."], "output_tokens": ["class", "Deaths", "Bite", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Death", "`", "s", "Bite", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "4", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "1", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")"], "examples": ["class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , deathrattle = Deathrattle ( Damage ( <pad> ) , <pad> Selector ( players = Both Player ( ) ) ) , taunt = True )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , deathrattle = Deathrattle ( Damage ( 1 ) , <pad> Selector ( players = Both Player ( ) ) ) , taunt = True )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( Damage ( <pad> ) , Minion Selector <pad> ( <pad> ) <pad> players = <pad> Player ( <pad> ) ) ) <pad> , <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> ) <pad> ( <pad> ) , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , deathrattle = Deathrattle ( Damage ( <pad> ) , <pad> Selector ( players = Both Player ( ) ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( Damage ( <pad> ) , Minion Selector <pad> ( <pad> players = <pad> Player ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> ) <pad> ) <pad> )"]}
{"input": "Maexxna NAME_END 2 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Destroy any minion damaged by this minion.", "output": "class Maexxna(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Maexxna\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7", "input_tokens": ["Maexxna", "NAME_END", "2", "ATK_END", "8", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "Destroy", "any", "minion", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Maexxna", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Maexxna", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", "Is", "Minion", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Water Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Water Elemental ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , Target Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , Target Selector ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> = [ <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> Selector ( Is <pad> ( <pad> ) ) <pad> ) ) ] <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , Target Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , Target Selector ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> = [ <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> Selector ( Is <pad> ( <pad> ) ) <pad> ) ) ] <pad> )"]}
{"input": "Sludge Belcher NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. NL Deathrattle:</b> Summon a 1/2 Slime with <b>Taunt</b>.", "output": "class SludgeBelcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sludge Belcher\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(Slime()), PlayerSelector()))\u00a7", "input_tokens": ["Sludge", "Belcher", "NAME_END", "3", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt.", "NL", "Deathrattle", ":", "</b>", "Summon", "a", "1/2", "Slime", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Sludge", "Belcher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sludge", "Belcher", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "taunt", "=", "True", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Slime", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Cenarius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cenarius ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 8 )", "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) ) , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> ( <pad> ( <pad> , Summon ( <pad> ( ) <pad> ) , Player Selector ( <pad> ) <pad> ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player <pad> ) : <pad> , <pad> = <pad> ( ) <pad> ( <pad> ( <pad> ) ) <pad> , <pad> ( ) <pad> ) <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , <pad> = <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> ( <pad> ( <pad> ) , <pad> ( <pad> , <pad> ( <pad> ) ) ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( <pad> ) , <pad> Player ( <pad> ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) <pad> ( <pad> , <pad> ) <pad> Minion <pad> ( <pad> , <pad> , Summon ( <pad> ( ) <pad> ) , Player Selector ( <pad> ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) ) <pad> , <pad> ( ) <pad> ) <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , <pad> = True , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 )"]}
{"input": "Voidcaller NAME_END 3 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Deathrattle:</b> Put a random Demon from your hand into the battlefield.", "output": "class Voidcaller(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voidcaller\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsType(MINION_TYPE.DEMON)], source=CARD_SOURCE.MY_HAND)), PlayerSelector()))\u00a7", "input_tokens": ["Voidcaller", "NAME_END", "3", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Put", "a", "random", "Demon", "from", "your", "hand", "into", "the", "battlefield."], "output_tokens": ["class", "Voidcaller", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Voidcaller", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", "]", ",", "source", "=", "CARD_SOURCE", ".", "MY_HAND", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Ancestors Call ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestor ` s Call ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for player in game . players : minions = [ card for card in player . hand if card . is_minion ( ) ] if len ( minions ) and len ( player . minions ) < 7 : minion_card = game . random_choice ( minions ) minion_card . unattach ( ) player . hand . remove ( minion_card ) minion_card . summon ( player , game , len ( player . minions ) )", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> = <pad> ( <pad> ( ) <pad> ( <pad> ) <pad> , <pad> ( player <pad> ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( <pad> , lambda <pad> ( <pad> , <pad> = <pad> ( ) <pad> ( <pad> . <pad> ) <pad> , <pad> ( ) <pad> ) <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( <pad> . <pad> ) , Player <pad> ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ( <pad> , <pad> ( <pad> = MINION_TYPE . DEMON <pad> = <pad> ( <pad> < <pad> ( <pad> . <pad> ( <pad> ) <pad> ) <pad> ( <pad> ( <pad> ( <pad> ) <pad> ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ( <pad> ( <pad> . <pad> ) ) <pad> ( <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( <pad> , <pad> , <pad> ( <pad> ( <pad> = [ <pad> ( <pad> . <pad> ) <pad> = <pad> . <pad> ) <pad> ) <pad> , <pad> ( <pad> ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> Card <pad> ( <pad> = <pad> ( <pad> ) <pad> = <pad> . <pad> ) <pad> ) <pad> ( ) <pad> ) <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( CARD_SOURCE . <pad> ) , Player Selector ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> = <pad> MINION_TYPE . DEMON ) <pad> = <pad> . <pad> ) <pad> ) <pad> , <pad> ( <pad> ) <pad> ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ( <pad> ( <pad> = <pad> ( <pad> . <pad> . <pad> ) ) <pad> ( <pad> ) <pad>"]}
{"input": "Alexstrasza NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Set a hero's remaining Health to 15.", "output": "class Alexstrasza(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alexstrasza\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(SetHealth(15), HeroSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Alexstrasza", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Set", "a", "hero's", "remaining", "Health", "to", "15."], "output_tokens": ["class", "Alexstrasza", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Alexstrasza", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Set", "Health", "(", "15", ")", ",", "Hero", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Nozdormu ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nozdormu ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry <pad> ( <pad> , <pad> Selector <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( <pad> ( <pad> ( ) , <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 8 , 8 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> = <pad> . <pad> ) ) , Player Selector ( ) ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry <pad> ( <pad> ( <pad> , Hero Selector ( <pad> Player ( <pad> ) , <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> ) , <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 9 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 8 , 8 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON <pad> , <pad> = <pad> ( <pad> ( ) , <pad> ( <pad> = <pad> , <pad> = <pad> ) ) <pad> ) ) <pad> ) <pad> )"]}
{"input": "Arcane Golem NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Give your opponent a Mana Crystal.", "output": "class ArcaneGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(GiveManaCrystal(), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, charge=True)\u00a7", "input_tokens": ["Arcane", "Golem", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Charge", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Give", "your", "opponent", "a", "Mana", "Crystal."], "output_tokens": ["class", "Arcane", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Golem", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "Mana", "Crystal", "(", ")", ",", "Player", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "charge", "=", "True", ")"], "examples": ["class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( <pad> Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( ) <pad> ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( <pad> ( Buff ( Charge ( ) <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> Mana Crystal <pad> , <pad> ( <pad> = <pad> ( <pad> ( <pad> , <pad> ) , Player Selector ( players = Both Player ( ) ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = <pad> Battlecry ( Give <pad> ( <pad> ) <pad> Buff ( Charge ( <pad> ) <pad> ) , <pad> ( ) , <pad> Selector ( <pad> ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( <pad> Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> , battlecry = Battlecry <pad> ( Give <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> ( <pad> Give Mana Crystal <pad> ( ) , Player Selector ( players = <pad> Player ( ) ) ) <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = <pad> Battlecry ( Give <pad> ( ) , <pad> Selector ( <pad> = <pad> ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )"]}
{"input": "Baine Bloodhoof NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class BaineBloodhoof(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baine Bloodhoof\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Baine", "Bloodhoof", "NAME_END", "4", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Baine", "Bloodhoof", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Baine", "Bloodhoof", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Bloodhoof ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 <pad> , <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( <pad> 4 <pad> , <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Bloodhoof ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( <pad> 4 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Blade Flurry NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies.", "output": "class BladeFlurry(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blade Flurry\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.weapon is not None:\u00a7            attack_power = player.effective_spell_damage(player.hero.calculate_attack())\u00a7            player.weapon.destroy()\u00a7\u00a7            for minion in copy.copy(game.other_player.minions):\u00a7                minion.damage(attack_power, self)\u00a7\u00a7            game.other_player.hero.damage(attack_power, self)\u00a7", "input_tokens": ["Blade", "Flurry", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Destroy", "your", "weapon", "and", "deal", "its", "damage", "to", "all", "enemies."], "output_tokens": ["class", "Blade", "Flurry", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blade", "Flurry", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "weapon", "is", "not", "None", ":", "attack_power", "=", "player", ".", "effective_spell_damage", "(", "player", ".", "hero", ".", "calculate_attack", "(", ")", ")", "player", ".", "weapon", ".", "destroy", "(", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "attack_power", ",", "self", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "attack_power", ",", "self", ")"], "examples": ["class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Betrayal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Betrayal ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) left_minion = None right_minion = None index = self . target . index if index > 0 : left_minion = game . other_player . minions [ index - 1 ] if index < min ( len ( game . other_player . minions ) - 1 , 6 ) : right_minion = game . other_player . minions [ index + 1 ] original_immune = self . target . immune self . target . immune = True if left_minion is not None : left_minion . damage ( self . target . calculate_attack ( ) , self . target ) if right_minion is not None : right_minion . damage ( self . target . calculate_attack ( ) , self . target ) self . target . immune = original_immune", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = self . target . <pad> ( ) <pad> . target . die <pad> self ) for minion in <pad> . <pad> . minions : minion . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = self . target <pad> game <pad> . <pad> ( <pad> ) <pad> game <pad> self . target <pad> . <pad> ( self <pad> ) <pad> : <pad> . damage ( <pad> ( ) , self <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> , <pad> ( <pad> , <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> , <pad> targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target <pad> . <pad> ( <pad> ) <pad> self . target <pad> . <pad> ( <pad> self ) <pad> game . other_player . <pad> : <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ) ) <pad> ( <pad> ( <pad> ) <pad> ( None , <pad> Player ( <pad> ( <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> . calculate_attack ( ) <pad> . <pad> . <pad> ( <pad> ) for minion in game . other_player . minions : minion . damage ( <pad> . <pad> ( <pad> , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> : <pad> = <pad> . <pad> ( <pad> . <pad> . <pad> ) <pad> ) <pad> . <pad> . <pad> . <pad> . <pad> . <pad> : <pad> . damage <pad> ( <pad> , self <pad> ) <pad> . <pad> . <pad> . <pad> ( <pad> , self <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> , <pad> , <pad> ) ) <pad> ( <pad> ) <pad> ( <pad> ( ) ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ) for minion in copy . copy ( game . other_player . minions ) <pad> : minion . damage <pad> ( <pad> , self ) <pad> game . other_player . hero . damage <pad> ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( ) ) <pad> ( <pad> ( <pad> ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )"]}
{"input": "Brawl NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions except one. <i>(chosen randomly)</i>", "output": "class Brawl(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Brawl\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 2\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(player.minions)\u00a7        minions.extend(game.other_player.minions)\u00a7\u00a7        if len(minions) > 1:\u00a7            survivor = game.random_choice(minions)\u00a7            for minion in minions:\u00a7                if minion is not survivor:\u00a7                    minion.die(self)\u00a7", "input_tokens": ["Brawl", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Destroy", "all", "minions", "except", "one.", "<i>(chosen", "randomly)</i>"], "output_tokens": ["class", "Brawl", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Brawl", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "+", "len", "(", "player", ".", "opponent", ".", "minions", ")", ">", "=", "2", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minions", "=", "copy", ".", "copy", "(", "player", ".", "minions", ")", "minions", ".", "extend", "(", "game", ".", "other_player", ".", "minions", ")", "if", "len", "(", "minions", ")", ">", "1", ":", "survivor", "=", "game", ".", "random_choice", "(", "minions", ")", "for", "minion", "in", "minions", ":", "if", "minion", "is", "not", "survivor", ":", "minion", ".", "die", "(", "self", ")"], "examples": ["class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "class Ysera Awakens ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera Awakens ` , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . other_player . minions ) targets . extend ( player . game . current_player . minions ) targets . append ( player . game . other_player . hero ) targets . append ( player . game . current_player . hero ) targets = filter ( lambda m : not m . is_minion ( ) or m . card . name ! = ` Ysera ` , targets ) for minion in targets : minion . damage ( player . effective_spell_damage ( 5 ) , self )", "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . <pad> . minions ) for minion in targets : <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( <pad> game . other_player . minions ) targets . extend ( <pad> game . current_player . minions ) targets . append ( <pad> . game . <pad> . <pad> ) targets . append ( <pad> game <pad> ( ) <pad> , <pad> ) for <pad> in targets <pad> . <pad> ( player . <pad> ( <pad> ) <pad> self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> . <pad> ( game , <pad> ) <pad> : <pad> . die ( <pad> game . <pad> ) for <pad> in <pad> ) . <pad> ( <pad> . player <pad> . <pad> , <pad> ( <pad> ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , <pad> = hearthbreaker . targeting . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ) <pad> ) ) <pad> def <pad> ( self , player , game ) : super ( ) . <pad> ( player , game ) <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ( <pad> ( <pad> ) <pad> = <pad> ( <pad> , <pad> ) <pad> ) <pad> ( ) <pad> ) <pad> ( <pad> , player ) <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = copy . copy ( game . other_player . minions ) <pad> ( game . <pad> minions ) for minion in <pad> : minion . die ( self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player , game ) : super ( ) . <pad> ( player , game ) <pad> ( player <pad> . minions ) <pad> ( player <pad> . <pad> . minions ) <pad> ( player <pad> game . <pad> ) <pad> . <pad> ( player . game . <pad> . <pad> ) <pad> ( <pad> : <pad> . <pad> ( <pad> ) for minion in <pad> : minion <pad> . <pad> ( <pad> self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player , game ) : super ( ) . <pad> ( player , game ) <pad> . minions . <pad> . <pad> ( <pad> , <pad> ) <pad> : <pad> ( <pad> ) <pad> . <pad> ( ) <pad> ( ) . <pad> ( <pad> . <pad> . <pad> len ( <pad> . <pad> minions ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , <pad> , <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) <pad> = <pad> def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . die ( self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ( <pad> ( <pad> ( ) <pad> ( <pad> = <pad> ( ) <pad> ) <pad> ( <pad> = <pad> ( <pad> ( <pad> ) <pad> ( ) <pad> ( <pad> ) : <pad> ( <pad> )"]}
{"input": "Conceal NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions <b>Stealth</b> until your next turn.", "output": "class Conceal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Conceal\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            if not minion.stealth:\u00a7                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7", "input_tokens": ["Conceal", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "minions", "<b>", "Stealth", "</b>", "until", "your", "next", "turn."], "output_tokens": ["class", "Conceal", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Conceal", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "player", ".", "minions", ":", "if", "not", "minion", ".", "stealth", ":", "minion", ".", "add_buff", "(", "Buff", "Until", "(", "Stealth", "(", ")", ",", "Turn", "Started", "(", ")", ")", ")"], "examples": ["class Finicky Cloakfield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finicky Cloakfield ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Headcrack ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Headcrack ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) if player . cards_played > 0 : player . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Add Card ( self ) , Player Selector ( ) ) ) )", "class Power Overwhelming ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Overwhelming ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )", "class Betrayal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Betrayal ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) left_minion = None right_minion = None index = self . target . index if index > 0 : left_minion = game . other_player . minions [ index - 1 ] if index < min ( len ( game . other_player . minions ) - 1 , 6 ) : right_minion = game . other_player . minions [ index + 1 ] original_immune = self . target . immune self . target . immune = True if left_minion is not None : left_minion . damage ( self . target . calculate_attack ( ) , self . target ) if right_minion is not None : right_minion . damage ( self . target . calculate_attack ( ) , self . target ) self . target . immune = original_immune"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . <pad> . <pad> . <pad> . <pad> ( <pad> ) <pad> . <pad> ( <pad> ( ) , <pad> self ) <pad> ( <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) <pad> game <pad> self . <pad> . <pad> . <pad> ( <pad> ( ) , <pad> ) <pad> : <pad> . <pad> ( ) <pad> self <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player . <pad> if <pad> . <pad> : <pad> . <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) , <pad> ( <pad> ) <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . minions <pad> : <pad> if <pad> not <pad> : <pad> . <pad> ( <pad> ( ) , <pad> ( ) <pad> ) <pad>"]}
{"input": "Defender NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class DefenderMinion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Defender", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Defender", "Minion", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defender", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Silver Hand Recruit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Recruit ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Lights Justice ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light ` s Justice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 1 , 4 )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> , False ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> , 1 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON <pad> ) def <pad> ( self <pad> , <pad> ) : <pad> ( <pad> , <pad> 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( 2 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( 2 , 1 )"]}
{"input": "Doomguard NAME_END 5 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Discard two random cards.", "output": "class Doomguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomguard\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(amount=2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, charge=True)\u00a7", "input_tokens": ["Doomguard", "NAME_END", "5", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "<b>", "Charge", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Discard", "two", "random", "cards."], "output_tokens": ["class", "Doomguard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Doomguard", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Discard", "(", "amount", "=", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "charge", "=", "True", ")"], "examples": ["class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> 5 , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( ) , 2 ) , Player Selector <pad> Player ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry <pad> ( Buff ( Charge ( <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 5 <pad> , <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> 2 ) , Player Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True <pad> )"]}
{"input": "Earth Elemental NAME_END 7 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Taunt</b>. <b>Overload:</b> (3)", "output": "class EarthElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Elemental\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=3)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 8, taunt=True)\u00a7", "input_tokens": ["Earth", "Elemental", "NAME_END", "7", "ATK_END", "8", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Overload", ":", "</b>", "(3)"], "output_tokens": ["class", "Earth", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Earth", "Elemental", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "overload", "=", "3", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "8", ",", "taunt", "=", "True", ")"], "examples": ["class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Al Akir The Windlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Al ` Akir the Windlord ` , 8 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 5 , windfury = True , charge = True , divine_shield = True , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Elemental ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , overload = <pad> ) def <pad> ( self , player <pad> ) : <pad> , <pad> ) <pad> ( ) <pad> ( <pad> ( self <pad> , <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , overload = 3 <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( 7 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> , taunt = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . EPIC , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Elemental ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , overload = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> = <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , overload = 3 <pad> ) def create_minion ( self , player ) : return Minion ( 7 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )"]}
{"input": "Explosive Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, deal $2 damage to all enemies.", "output": "class ExplosiveTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Hero):\u00a7            game = attacker.player.game\u00a7            enemies = copy.copy(game.current_player.minions)\u00a7            enemies.append(game.current_player.hero)\u00a7            for enemy in enemies:\u00a7                enemy.damage(2, None)\u00a7            game.check_delayed()\u00a7            super().reveal()\u00a7", "input_tokens": ["Explosive", "Trap", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "is", "attacked,", "deal", "$2", "damage", "to", "all", "enemies."], "output_tokens": ["class", "Explosive", "Trap", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Explosive", "Trap", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "isinstance", "(", "target", ",", "Hero", ")", ":", "game", "=", "attacker", ".", "player", ".", "game", "enemies", "=", "copy", ".", "copy", "(", "game", ".", "current_player", ".", "minions", ")", "enemies", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "for", "enemy", "in", "enemies", ":", "enemy", ".", "damage", "(", "2", ",", "None", ")", "game", ".", "check_delayed", "(", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "class Ice Barrier ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Barrier ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : if target is self . player . hero and not attacker . removed : attacker . player . game . other_player . hero . armor + = 8 super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )"], "sketch": ["class <pad> Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self <pad> player <pad> , <pad> ) : <pad> . <pad> ( <pad> , <pad> ) super ( ) . reveal ( )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> player <pad> hero <pad> : <pad> player . game . other_player . hero . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player . <pad> . <pad> ( ` character_attack ` , self . _reveal ) def <pad> ( self , <pad> ) : player <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` <pad> ` , <pad> . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) def _reveal ( self , minion ) : <pad> . <pad> ( <pad> , <pad> ) super ( ) . reveal ( )", "class <pad> Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker <pad> , <pad> ) <pad> : <pad> ( <pad> . <pad> . <pad> ( <pad> ( 2 <pad> ) super ( ) . reveal ( )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> game ) for minion in <pad> ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . <pad> ( player . <pad> ( 2 ) , self )"], "oracle-sketch": ["class <pad> Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , <pad> ) : <pad> = <pad> . <pad> . <pad> . <pad> . <pad> ) <pad> . <pad> . <pad> . <pad> for <pad> in <pad> : <pad> . <pad> ( <pad> , <pad> game <pad> . <pad> ) super ( ) . reveal ( )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> player <pad> : <pad> player <pad> . <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player . opponent . <pad> ( ` character_attack ` , self . _reveal ) def <pad> ( self , <pad> ) : player . <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal ) def _reveal ( self , <pad> ) : <pad> . damage ( <pad> , None ) super ( ) . reveal ( )", "class <pad> Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( <pad> , <pad> ) <pad> attacker . <pad> . <pad> ( ) <pad> . <pad> . <pad> ( 2 ) <pad> ) super ( ) . reveal ( )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player , <pad> ) : <pad> ( ) <pad> ( <pad> , game <pad> copy . copy ( game . <pad> . minions ) <pad> . <pad> ( <pad> game . <pad> . hero . damage ( <pad> . <pad> ( <pad> ) <pad> )"]}
{"input": "Flame of Azzinoth NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class FlameOfAzzinoth(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame of Azzinoth\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Flame", "of", "Azzinoth", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Flame", "Of", "Azzinoth", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flame", "of", "Azzinoth", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"], "sketch": ["class <pad> Of <pad> Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> Flame ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> Of <pad> Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> Flame ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class Flame <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 2 , 1 <pad> , <pad> 1 <pad> )", "class <pad> Of <pad> Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> Flame ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )"], "oracle-sketch": ["class <pad> Of <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> Of <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class Flame <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 2 <pad> , <pad> 1 <pad> )", "class <pad> Of <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )"]}
{"input": "Gnoll NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "output": "class Gnoll(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnoll\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7", "input_tokens": ["Gnoll", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Gnoll", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnoll", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Spirit Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spirit Wolf ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 2 , 3 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , <pad> ) : return Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , <pad> ) : return Minion ( 2 , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , <pad> ) : return Minion ( <pad> , 2 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False ) def create_minion ( self , <pad> ) : return Minion ( 2 , <pad> , taunt = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , <pad> ) : return Minion ( 2 , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , <pad> ) : return Minion ( <pad> , 2 , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False ) def create_minion ( self , <pad> ) : return Minion ( 2 , <pad> , taunt = True )"]}
{"input": "Holy Wrath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost.", "output": "class HolyWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Wrath\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        fatigue = False\u00a7        if player.deck.left == 0:\u00a7            fatigue = True\u00a7\u00a7        player.draw()\u00a7        if not fatigue:\u00a7            cost = player.hand[-1].mana\u00a7            self.target.damage(player.effective_spell_damage(cost), self)\u00a7", "input_tokens": ["Holy", "Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Draw", "a", "card", "and", "deal", "damage", "equal", "to", "its", "cost."], "output_tokens": ["class", "Holy", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Wrath", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "fatigue", "=", "False", "if", "player", ".", "deck", ".", "left", "=", "=", "0", ":", "fatigue", "=", "True", "player", ".", "draw", "(", ")", "if", "not", "fatigue", ":", "cost", "=", "player", ".", "hand", "[", "-", "1", "]", ".", "mana", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "cost", ")", ",", "self", ")"], "examples": ["class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> = <pad> ) <pad> ) <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> . <pad> ( ) ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> , <pad> , <pad> ) , <pad> ( <pad> ( self <pad> ) <pad> ( <pad> , <pad> )", "class <pad> Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Wrath ` , <pad> , CHARACTER_CLASS . PALADIN , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . target . damage ( player . effective_spell_damage ( <pad> ) , self ) player . draw ( )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game <pad> ) : super ( ) <pad> . <pad> use ( <pad> player , game <pad> ) <pad> self <pad> . <pad> : <pad> . damage ( player . effective_spell_damage ( <pad> ) <pad> . <pad> ) , <pad> ) <pad> player <pad> = <pad> . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> . <pad> ( ) <pad> . <pad> . <pad> self <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> . <pad> . <pad> ) <pad> player . <pad> . damage ( player . effective_spell_damage <pad> ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> , <pad> , <pad> ) <pad> ( ) <pad> ( <pad> ) <pad> player ) : <pad> ( <pad> , <pad> )", "class <pad> Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Wrath ` , <pad> , CHARACTER_CLASS . PALADIN , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( <pad> ) , self <pad> )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game <pad> ) : super ( ) <pad> . <pad> use ( <pad> player , game ) <pad> . <pad> . <pad> player . draw <pad> ( <pad> ) <pad> : <pad> = <pad> . <pad> . <pad> self <pad> target . damage ( player . effective_spell_damage <pad> ( <pad> ) <pad> , <pad> self <pad> )"]}
{"input": "Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL", "output": "class Infernal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Infernal", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Infernal", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Infernal", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"], "examples": ["class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )"], "sketch": ["class <pad> Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON <pad> ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 <pad> 6 <pad> )"], "oracle-sketch": ["class <pad> Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON <pad> ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 <pad> )"]}
{"input": "Kirin Tor Mage NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> The next <b>Secret</b> you play this turn costs (0).", "output": "class KirinTorMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kirin Tor Mage\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector(condition=IsSecret()), CardPlayed(IsSecret()))]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Kirin", "Tor", "Mage", "NAME_END", "4", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "The", "next", "<b>", "Secret", "</b>", "you", "play", "this", "turn", "costs", "(0)."], "output_tokens": ["class", "Kirin", "Tor", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kirin", "Tor", "Mage", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "Aura", "(", "[", "Aura", "Until", "(", "Mana", "Change", "(", "-", "100", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Secret", "(", ")", ")", ",", "Card", "Played", "(", "Is", "Secret", "(", ")", ")", ")", "]", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Pint Sized Summoner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pint - Sized Summoner ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give Aura ( Aura Until ( Mana Change ( - 1 ) , Card Selector ( condition = Is Minion ( ) ) , Minion Placed ( ) ) ) , Player Selector ( ) ) ) ] )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( Give Aura ( <pad> Aura Until ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( <pad> ) ) , <pad> ( <pad> ) <pad> ) <pad> ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Give Aura ( Aura Until ( Mana Change ( - <pad> ) , Card Selector ( condition = Is <pad> ( ) ) , <pad> ( ) ) ) , Player Selector ( ) ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) , <pad> ( <pad> ( <pad> , <pad> ) ) , <pad> ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> , <pad> ( <pad> ) , Greater Than <pad> ( <pad> Selector ( <pad> ( <pad> ) ) , value = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE <pad> , <pad> ( <pad> ( <pad> , <pad> , <pad> ( <pad> = <pad> ( ) <pad> ) <pad> , <pad> ) <pad> ( <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - <pad> ) , Card Selector ( condition = Is <pad> ( <pad> ) ) , Card Played ( Is <pad> ( <pad> ) ) <pad> ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Give Aura ( Aura Until ( Mana Change ( - <pad> ) , Card Selector ( condition = Is <pad> ( ) ) , <pad> ( ) ) ) , Player Selector ( ) ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> Change <pad> ( <pad> ) , <pad> Selector ( <pad> ) ) , <pad> ( <pad> Secret ( ) ) <pad> ) ) , <pad> Selector ( ) ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( ) , <pad> ( <pad> ) ) , <pad> ( Is <pad> ( <pad> ) ) ) , <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE <pad> , <pad> ( <pad> ( <pad> ( <pad> ( ) <pad> = <pad> ( ) <pad> ) <pad> ( <pad> ) <pad> , <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"]}
{"input": "Lightwarden NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a character is healed, gain +2 Attack.", "output": "class Lightwarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwarden\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\u00a7", "input_tokens": ["Lightwarden", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "character", "is", "healed,", "gain", "+2", "Attack."], "output_tokens": ["class", "Lightwarden", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightwarden", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Healed", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Murloc Tidecaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidecaller ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ ( Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ) ] )", "class Secretkeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Secretkeeper ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( <pad> ( <pad> , <pad> ( <pad> ( ) <pad> ( ) , <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ <pad> Effect ( <pad> ( <pad> ( <pad> ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect <pad> ( <pad> ( <pad> Player ( ) ) , Action Tag ( Give <pad> ( Change Attack <pad> ( <pad> ) <pad> ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , effects = [ Effect ( Character Healed <pad> ( <pad> player = Both Player ( ) ) , Action Tag ( <pad> ( ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ] ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( <pad> ( <pad> ( <pad> ) <pad> ) , <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ <pad> Effect <pad> ( <pad> ( <pad> player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect <pad> ( <pad> ( <pad> Both Player ( ) ) , Action Tag ( Give <pad> ( Change Attack <pad> ( <pad> ) <pad> ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , effects = [ Effect ( Character Healed <pad> ( <pad> player = Both Player ( ) ) , Action Tag ( <pad> ( ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( Give ( Change Attack ( <pad> ) ) , Self Selector ( ) ) ) ] <pad> )"]}
{"input": "Mana Wraith NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost (1) more.", "output": "class ManaWraith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wraith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])\u00a7", "input_tokens": ["Mana", "Wraith", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "ALL", "minions", "cost", "(1)", "more."], "output_tokens": ["class", "Mana", "Wraith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Wraith", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "1", ")", ",", "Card", "Selector", "(", "Both", "Player", "(", ")", ",", "Is", "Minion", "(", ")", ")", ")", "]", ")"], "examples": ["class Venture Co Mercenary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Venture Co . Mercenary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 6 , auras = [ Aura ( Mana Change ( 3 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class Equality ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Equality ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . set_health_to ( 1 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) > 0 or len ( game . other_player . minions ) > 0 )", "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Mechwarper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechwarper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) ] )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , <pad> = [ <pad> ( Is <pad> ( <pad> ) , <pad> ( <pad> ) , Minion Selector ( condition = <pad> players = Both Player ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is <pad> ( <pad> ) ) ) ] )", "class Mana <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = [ <pad> ( <pad> ( <pad> , <pad> ( Change <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( <pad> Is Minion ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( 1 ) <pad> , <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , <pad> = [ <pad> ( <pad> ( 1 ) , <pad> Selector ( <pad> Both Player ( ) ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , auras = [ Aura ( Mana Change ( <pad> 1 ) , Card Selector ( <pad> Is <pad> ( <pad> ) ) ) ] )", "class Mana <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = [ <pad> ( <pad> Change <pad> ( <pad> ) , <pad> ( <pad> ) , <pad> ( ) ) ) ] )"]}
{"input": "Misdirection NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a character attacks your hero, instead he attacks another random character.", "output": "class Misdirection(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misdirection\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, character, target):\u00a7        if isinstance(target, Hero) and not character.removed:\u00a7            game = character.player.game\u00a7            possibilities = copy.copy(game.current_player.minions)\u00a7            possibilities.extend(game.other_player.minions)\u00a7            possibilities.append(game.current_player.hero)\u00a7            possibilities.append(game.other_player.hero)\u00a7            possibilities.remove(character.current_target)\u00a7            character.current_target = game.random_choice(possibilities)\u00a7\u00a7            super().reveal()\u00a7", "input_tokens": ["Misdirection", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "a", "character", "attacks", "your", "hero,", "instead", "he", "attacks", "another", "random", "character."], "output_tokens": ["class", "Misdirection", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Misdirection", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "character", ",", "target", ")", ":", "if", "isinstance", "(", "target", ",", "Hero", ")", "and", "not", "character", ".", "removed", ":", "game", "=", "character", ".", "player", ".", "game", "possibilities", "=", "copy", ".", "copy", "(", "game", ".", "current_player", ".", "minions", ")", "possibilities", ".", "extend", "(", "game", ".", "other_player", ".", "minions", ")", "possibilities", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "possibilities", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "possibilities", ".", "remove", "(", "character", ".", "current_target", ")", "character", ".", "current_target", "=", "game", ".", "random_choice", "(", "possibilities", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) def _reveal ( self <pad> ) <pad> . <pad> ( <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self <pad> attacker <pad> , <pad> ( ) <pad> player <pad> , <pad> ) : <pad> ( <pad> player . <pad> ( <pad> ) ) super ( ) . reveal <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player . game . <pad> ( self <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player <pad> ) : <pad> player <pad> game <pad> , <pad> . <pad> ) <pad> . <pad> = <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player . game . current_player . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) <pad> def <pad> ( self , player ) : <pad> . <pad> ( <pad> , self . <pad> ) <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` <pad> ` , self . _reveal ) <pad> def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player . <pad> . <pad> ( <pad> . <pad> ( <pad> , self <pad> . <pad> )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal ) def _reveal ( self , <pad> ) : <pad> . <pad> ( <pad> ) super ( ) . reveal ( )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , <pad> , target ) : if isinstance ( target , <pad> ) : <pad> = <pad> . <pad> . minions . <pad> . <pad> ( ) <pad> . <pad> game . other_player <pad> ) <pad> . <pad> ( <pad> . game <pad> . <pad> ) super ( ) . reveal ( )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> ) : <pad> ( <pad> self . player . <pad> if not <pad> . <pad> : <pad> = <pad> . player . game . <pad> ( <pad> . <pad> . minions ) <pad> . <pad> ( <pad> ) <pad> . <pad> ( <pad> ) <pad> ( <pad> . <pad> ) <pad> ( <pad> ) <pad> . <pad> . <pad> ) <pad> ( <pad> ) <pad> . <pad> ( <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player , <pad> ) <pad> ( ) . <pad> ( <pad> , <pad> ) def _reveal ( self , <pad> , <pad> ) : if <pad> ( ) : <pad> . <pad> = <pad> ( ) . <pad> ( <pad> ) <pad> . game . current_player . <pad> ( <pad> . <pad> ) <pad> ( <pad> ) <pad> . game <pad> . <pad> ( <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) <pad> def activate ( self , player ) : player . bind ( ` <pad> ` , self . _reveal ) <pad> def deactivate ( self , player ) : player . unbind ( ` <pad> ` , self . _reveal ) <pad> def _reveal ( self , <pad> , <pad> ) : <pad> ( <pad> , <pad> ) : <pad> . player . <pad> = <pad> ( <pad> . <pad> ) ( ) <pad> . <pad> . <pad> . append ( <pad> ) <pad> . <pad> ( <pad> . <pad> ) super ( ) . reveal ( )"]}
{"input": "Noble Sacrifice NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy attacks, summon a 2/1 Defender as the new target.", "output": "class NobleSacrifice(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Noble Sacrifice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        player = attacker.player.game.other_player\u00a7        if len(player.minions) < 7 and not attacker.removed:\u00a7            from hearthbreaker.cards.minions.paladin import DefenderMinion\u00a7            defender = DefenderMinion()\u00a7            defender.summon(player, player.game, len(player.minions))\u00a7            attacker.current_target = player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7", "input_tokens": ["Noble", "Sacrifice", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "an", "enemy", "attacks,", "summon", "a", "2/1", "Defender", "as", "the", "new", "target."], "output_tokens": ["class", "Noble", "Sacrifice", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Noble", "Sacrifice", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "player", "=", "attacker", ".", "player", ".", "game", ".", "other_player", "if", "len", "(", "player", ".", "minions", ")", "<", "7", "and", "not", "attacker", ".", "removed", ":", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "paladin", "import", "Defender", "Minion", "defender", "=", "Defender", "Minion", "(", ")", "defender", ".", "summon", "(", "player", ",", "player", ".", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "attacker", ".", "current_target", "=", "player", ".", "minions", "[", "-", "1", "]", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) self . player = None def _reveal ( self , card , <pad> ) : if <pad> . <pad> ) <pad> self . player . minions ) <pad> ) : <pad> ) . summon ( self . player , <pad> . game , len ( self . player . minions ) ) <pad> . <pad> . player . minions <pad> super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) self . player = None", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( <pad> , Minion ) <pad> . <pad> . <pad> ( ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( <pad> ) ) super ( ) . reveal ( )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player . <pad> . <pad> self <pad> . <pad> . <pad> ( <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player . <pad> ( <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) self . player = None def <pad> ( self , <pad> self . player . <pad> ) <pad> : <pad> . <pad> ( <pad> len <pad> self . player . minions ) ) <pad> player . <pad> . <pad> . <pad> ( <pad> ` , <pad> . <pad> ) def activate ( self , player ) : player . game . current_player . bind ( ` <pad> ` , self . _reveal ) self . player <pad> def deactivate ( self , player ) : player . game . current_player . unbind ( ` <pad> ` , self . _reveal ) self . <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> ) <pad> . <pad> [ <pad> : <pad> ( ) <pad> : <pad> ( ) <pad> . <pad> . <pad> ( Effect ( Attack ( ) , Action Tag ( <pad> ( ) , Player Selector ( <pad> ) ) ) )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) <pad> def _reveal ( self , <pad> , <pad> ) : <pad> . <pad> len ( <pad> player . minions ) < 7 and <pad> . <pad> . <pad> . <pad> Minion ( ) . summon ( <pad> player , <pad> player . game , len ( <pad> player . minions ) ) <pad> . <pad> = <pad> player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` <pad> ` , self . _reveal ) <pad> def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal ) <pad>", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , <pad> ) : player . game . <pad> . <pad> ( <pad> , <pad> . <pad> ) def <pad> ( self , player ) : player <pad> . <pad> . <pad> ( ` character_attack ` , self . _reveal ) def <pad> ( self <pad> , <pad> ) <pad> : <pad> . <pad> . <pad> ( <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , <pad> , <pad> ) : if len ( <pad> player . minions <pad> not <pad> . <pad> : <pad> = <pad> . player . game <pad> ( <pad> player . minions ) <pad> . <pad> . <pad> super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) <pad> def _reveal ( self , <pad> ) : if len ( <pad> player . minions ) < 7 : <pad> = <pad> ( <pad> . player <pad> . <pad> len ( <pad> player . minions ) ) <pad> . <pad> player . <pad> super ( ) . reveal ( ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` <pad> ` , self . _reveal ) <pad> def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player <pad> game ) : <pad> ( ) . <pad> ( player , game ) <pad> player <pad> . <pad> [ <pad> ] <pad> ( ) <pad> ( ) self . <pad> . <pad> ( <pad> , <pad> ( <pad> ) <pad> ( <pad> )"]}
{"input": "Power of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give your minions +1/+1; or Summon a 3/2 Panther.", "output": "class PowerOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Power", "of", "the", "Wild", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Give", "your", "minions", "+1/+1;", "or", "Summon", "a", "3/2", "Panther."], "output_tokens": ["class", "Power", "Of", "The", "Wild", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Power", "of", "the", "Wild", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Leader", "Of", "The", "Pack", "(", ")", ",", "Summon", "Panther", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Cenarius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cenarius ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 8 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> = <pad> Choice ( <pad> ( ) <pad> ( <pad> ( <pad> ) ) , <pad> ( <pad> ( <pad> ) ) <pad> ( <pad> ( ) ) <pad> ( ) ) <pad> Choice ( <pad> ( ) , Summon ( <pad> ( ) , <pad> ) , Player Selector ( ) ) <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> )", "class <pad> Of The <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of the <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , <pad> = <pad> ( <pad> ( ) , <pad> ( <pad> ( ) ) , <pad> ( ) ) <pad> Choice ( <pad> ( ) , <pad> ( <pad> ( ) ) , <pad> ( ) ) <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY <pad> , <pad> ( <pad> ) . <pad> , <pad> hearthbreaker . targeting . find_minion_spell_target ( <pad> ) def use ( <pad> player , game ) <pad> ( <pad> class <pad> ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False <pad> , <pad> ) <pad> hearthbreaker . targeting . find_minion_spell_target <pad> ) <pad> def use ( self , player , game ) <pad> , <pad> target . <pad> ( <pad> ) <pad> ) <pad> class <pad> ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon <pad> ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False <pad> , <pad> . minions ) <pad> use <pad> player <pad> ( <pad>", "class <pad> Of <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game <pad> : <pad> Choice <pad> ( <pad> super ( ) <pad> ( <pad> Attack <pad> hearthbreaker <pad> targeting . find_minion_spell_target <pad> use ( <pad> player , game ) <pad> ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , <pad> . <pad> ) def use ( self , player , game ) : <pad> . <pad> ) <pad> ( ) . use ( player , game ) <pad> = <pad> option = <pad> . agent . choose_option ( [ <pad> ( ) , <pad> ( ) ] , player ) option . use ( player , game )", "class <pad> Of The <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of the <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import <pad> player . <pad> : minion <pad> . <pad> ( <pad> ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) ] <pad> , player ) <pad> ( <pad> , <pad> )", "class <pad> Of The <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of the <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON <pad> ) <pad> ( <pad> , <pad> ) ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) ] <pad> , player ) <pad> ( <pad> , <pad> )", "class <pad> ( Spell <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON <pad> ) <pad> def use ( self , player , <pad> game <pad> ) : super <pad> ( <pad> ) <pad> . <pad> use <pad> ( player <pad> , <pad> game <pad> ) <pad> option = player . agent . choose_option ( [ <pad> ( ) , <pad> ( ) ] , player ) option . use ( player , game )", "class <pad> Of <pad> ( Spell <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON <pad> ) def use ( self , player , game ) : <pad> super ( ) . use ( player , game ) <pad> option = <pad> . agent . choose_option ( [ <pad> Of <pad> ( ) , <pad> ( ) ] , player ) option . use ( player , game )", "class <pad> Of The <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of the <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player <pad> . <pad> . <pad> ( <pad> ( Summon <pad> ( ) ) <pad> ( <pad> )"]}
{"input": "Redemption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, return it to life with 1 Health.", "output": "class Redemption(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Redemption\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))\u00a7        if resurrection:\u00a7            resurrection.health = 1\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7", "input_tokens": ["Redemption", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "one", "of", "your", "minions", "dies,", "return", "it", "to", "life", "with", "1", "Health."], "output_tokens": ["class", "Redemption", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Redemption", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "minion", ",", "by", ")", ":", "resurrection", "=", "minion", ".", "card", ".", "summon", "(", "minion", ".", "player", ",", "minion", ".", "game", ",", "min", "(", "minion", ".", "index", ",", "len", "(", "minion", ".", "player", ".", "minions", ")", ")", ")", "if", "resurrection", ":", "resurrection", ".", "health", "=", "1", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Reincarnate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reincarnate ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . check_delayed ( ) self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player <pad> . <pad> ( self <pad> . <pad> ( <pad> ) <pad> . <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` minion_died ` , self . _reveal ) def <pad> ( self , player ) : player . <pad> ( <pad> , self . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> game <pad> . <pad> . <pad> ( self ) <pad> . <pad> ) <pad> . <pad> . <pad> . <pad> ( self . <pad> , <pad> ( self . <pad> ) )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) <pad> def <pad> ( self , player ) : player . <pad> ( ` <pad> ` , self . <pad> ) <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` minion_died ` , self . _reveal ) <pad> def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player <pad> . <pad> ( <pad> , self <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : player . game . <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self <pad> , <pad> ) <pad> : <pad> . <pad> . <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : player . game . <pad> . <pad> ( <pad> , <pad> . <pad> ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self <pad> , <pad> player <pad> ) : <pad> player . <pad> ( <pad> . <pad> . <pad> )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , <pad> , <pad> ) : <pad> minion <pad> . <pad> . <pad> minion <pad> . player . game . <pad> ( <pad> . player . minions ) <pad> ) <pad> . <pad> super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , <pad> , <pad> ) : <pad> . <pad> ( player , game ) <pad> . <pad> ( <pad> ) <pad> . <pad> ( ) self <pad> . <pad> ( self <pad> . <pad> ( self <pad> player . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) <pad> def <pad> ( self , <pad> ) : player . <pad> ( <pad> , <pad> . <pad> ) <pad> . <pad> = <pad> def <pad> ( self , player ) : player . <pad> ( ` minion_died ` , self . _reveal ) <pad> def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> player <pad> . <pad> ( <pad> , self <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , <pad> ) : player . game . <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self <pad> , <pad> ) <pad> : <pad> . <pad> ( <pad> . <pad> )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : player . game . <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self <pad> , <pad> player <pad> ) : <pad> player . <pad> ( <pad> . <pad> )"]}
{"input": "Shadow Madness NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn.", "output": "class ShadowMadness(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Madness\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7\u00a7        super().use(player, game)\u00a7\u00a7        minion = self.target.copy(player)\u00a7        minion.active = True\u00a7        minion.exhausted = False\u00a7\u00a7        self.target.remove_from_board()\u00a7        minion.add_to_board(len(player.minions))\u00a7\u00a7        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Shadow", "Madness", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Gain", "control", "of", "an", "enemy", "minion", "with", "3", "or", "less", "Attack", "until", "end", "of", "turn."], "output_tokens": ["class", "Shadow", "Madness", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "Madness", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "calculate_attack", "(", ")", "<", "=", "3", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minion", "=", "self", ".", "target", ".", "copy", "(", "player", ")", "minion", ".", "active", "=", "True", "minion", ".", "exhausted", "=", "False", "self", ".", "target", ".", "remove_from_board", "(", ")", "minion", ".", "add_to_board", "(", "len", "(", "player", ".", "minions", ")", ")", "minion", ".", "add_buff", "(", "Buff", "Until", "(", "Stolen", "(", ")", ",", "Turn", "Ended", "(", ")", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Shadow Word Death ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Death ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) > = 5 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Shadow Word Pain ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Pain ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Power Overwhelming ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Overwhelming ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )"], "sketch": ["class Shadow <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> , <pad> = lambda target : target . calculate_attack ( ) <pad> = <pad> and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . <pad> . <pad> ( <pad> )", "class Shadow <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> , filter_func = lambda target : target . calculate_attack ( ) <pad> = <pad> and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = self . target <pad> ( <pad> ) self . target . <pad> ( ) <pad> . <pad> ( <pad> ) ) def <pad> ( self , player , game ) : <pad> super ( ) . <pad> ( player , game ) <pad> . <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) <pad> ( ) <pad> ) ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( <pad> ( ) , <pad> ( <pad> ) ) ) <pad> . <pad> . <pad> ( <pad> ) self <pad> target . <pad>"], "oracle-sketch": ["class Shadow <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> , filter_func = lambda target : target . calculate_attack ( ) <pad> = <pad> and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( self )", "class Shadow <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = self . target . copy ( player ) self . target . remove_from_board ( ) <pad> . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> ( <pad> ( <pad> ) <pad> ( ) ) ) ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( ) <pad> ( <pad> ( ) , <pad> ( ) ) ) <pad> self <pad> ( <pad> ) <pad> . <pad> ( <pad> )"]}
{"input": "Siphon Soul NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion. Restore #3 Health to your hero.", "output": "class SiphonSoul(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siphon Soul\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(3), self)\u00a7", "input_tokens": ["Siphon", "Soul", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Destroy", "a", "minion.", "Restore", "#3", "Health", "to", "your", "hero."], "output_tokens": ["class", "Siphon", "Soul", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Siphon", "Soul", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "3", ")", ",", "self", ")"], "examples": ["class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target <pad> . <pad> ( <pad> self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target <pad> . <pad> ( <pad> self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target <pad> . <pad> ( <pad> self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target <pad> . <pad> ( <pad> self ) player . hero . heal ( player . effective_heal_power ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ( self <pad> player <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ( self <pad> player <pad> ( <pad> , <pad> )"]}
{"input": "Spellbender NAME_END 1 ATK_END 3 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END NIL", "output": "class Spellbender(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7", "input_tokens": ["Spellbender", "NAME_END", "1", "ATK_END", "3", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "NIL"], "output_tokens": ["class", "Spellbender", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spellbender", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "card", ",", "index", ")", ":", "if", "card", ".", "is_spell", "(", ")", "and", "len", "(", "self", ".", "player", ".", "minions", ")", "<", "7", "and", "card", ".", "target", "and", "card", ".", "target", ".", "is_minion", "(", ")", ":", "Spellbender", "Minion", "(", ")", ".", "summon", "(", "self", ".", "player", ",", "self", ".", "player", ".", "game", ",", "len", "(", "self", ".", "player", ".", "minions", ")", ")", "card", ".", "target", "=", "self", ".", "player", ".", "minions", "[", "-", "1", "]", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "player", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "None"], "examples": ["class Mirror Image ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Image ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Pyroblast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pyroblast ` , 10 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 10 ) , self )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) : <pad> , <pad> . <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 1 <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player , <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def <pad> ( self , <pad> , <pad> ) : <pad> ( ) <pad> ( player <pad> ) <pad> ( <pad> ) : <pad> Minion ( ) . summon ( player , game , len ( player . minions ) ) def <pad> ( self , player <pad> ) : <pad> ( ) . <pad> ( player <pad> game <pad> ( <pad> . <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> Minion ( 1 , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , <pad> . <pad> . <pad> ) <pad> ( self , player , <pad> ) <pad> super ( ) . <pad> ( player , <pad> ) self . <pad> ( player . <pad> ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> Minion ( 1 , <pad> )"]}
{"input": "Summoning Portal NAME_END 0 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (2) less, but not less than (1).", "output": "class SummoningPortal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Summoning Portal\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1), CardSelector(condition=IsMinion()))])\u00a7", "input_tokens": ["Summoning", "Portal", "NAME_END", "0", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Your", "minions", "cost", "(2)", "less,", "but", "not", "less", "than", "(1)."], "output_tokens": ["class", "Summoning", "Portal", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Summoning", "Portal", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "4", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "-", "2", ",", "1", ",", "minimum", "=", "1", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Minion", "(", ")", ")", ")", "]", ")"], "examples": ["class Venture Co Mercenary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Venture Co . Mercenary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 6 , auras = [ Aura ( Mana Change ( 3 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Sorcerers Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sorcerer ` s Apprentice ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )", "class Mechwarper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechwarper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) ] )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , auras = [ Aura ( Change <pad> ( 1 ) , Minion Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is <pad> ( <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( <pad> ( ) , <pad> Selector ( ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( <pad> ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 4 , auras = [ Aura ( Change <pad> ( 1 ) , <pad> Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is <pad> ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is <pad> ( <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , auras = [ Aura ( <pad> ( ) , <pad> Selector ( ) ) ] )"]}
{"input": "Thrallmar Farseer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "output": "class ThrallmarFarseer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thrallmar Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, windfury=True)\u00a7", "input_tokens": ["Thrallmar", "Farseer", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Thrallmar", "Farseer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Thrallmar", "Farseer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "windfury", "=", "True", ")"], "examples": ["class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Raging Worgen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raging Worgen ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) , Aura ( Windfury ( ) , Self Selector ( ) ) ] )", "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )", "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"], "sketch": ["class <pad> Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> , windfury = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , windfury = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"], "oracle-sketch": ["class <pad> Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 3 , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> , windfury = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , windfury = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )"]}
{"input": "Upgrade! NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon, give it +1/+1. Otherwise equip a 1/3 weapon.", "output": "class Upgrade(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Upgrade!\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.weapons.warrior import HeavyAxe\u00a7        if player.weapon:\u00a7            player.weapon.durability += 1\u00a7            player.weapon.base_attack += 1\u00a7        else:\u00a7            heavy_axe = HeavyAxe().create_weapon(player)\u00a7            heavy_axe.equip(player)\u00a7", "input_tokens": ["Upgrade!", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "If", "you", "have", "a", "weapon,", "give", "it", "+1/+1.", "Otherwise", "equip", "a", "1/3", "weapon."], "output_tokens": ["class", "Upgrade", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Upgrade", "!", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "weapons", ".", "warrior", "import", "Heavy", "Axe", "if", "player", ".", "weapon", ":", "player", ".", "weapon", ".", "durability", "+", "=", "1", "player", ".", "weapon", ".", "base_attack", "+", "=", "1", "else", ":", "heavy_axe", "=", "Heavy", "Axe", "(", ")", ".", "create_weapon", "(", "player", ")", "heavy_axe", ".", "equip", "(", "player", ")"], "examples": ["class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Warsong Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warsong Commander ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . <pad> . <pad> : self . target . <pad> ( <pad> . <pad> ( <pad> ) , self ) else : self . target . <pad> ( player . <pad> ( <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = [ <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> ( <pad> ( <pad> ( ) ) , <pad> ( ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> game <pad> . <pad> . <pad> ( <pad> . <pad> ) if <pad> . <pad> . <pad> . <pad> ( <pad> . <pad> ( <pad> ) <pad> self ) <pad> . <pad> ( player . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> player . game <pad> ) <pad> self . target <pad> card . minion_type <pad> MINION_TYPE . <pad> self . <pad> self . target . <pad> ( <pad> ) self <pad> ( <pad> ) else : self . target <pad> ( player . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player <pad> . <pad> : <pad> . <pad> . <pad> player . <pad> else : <pad> . <pad> ( player . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> . <pad> . <pad> . <pad> player . <pad> . <pad> = <pad> : <pad> ( <pad> ) <pad> . <pad> ( player . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> if <pad> . <pad> . <pad> . <pad> . <pad> . <pad> : <pad> ( <pad> ) <pad> . <pad> ( <pad> ) <pad> . <pad> ( player <pad> )"]}
{"input": "Wisp NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class Wisp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wisp\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Wisp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Wisp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wisp", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , <pad> ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , p ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Black Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL", "output": "class BlackWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Black Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Black", "Whelp", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Black", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Black", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )"], "oracle-sketch": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 )"]}
{"input": "Dragonkin Sorcerer NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever <b>you</b> target this minion with a spell, gain +1/+1.", "output": "class DragonkinSorcerer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragonkin Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector())])])\u00a7", "input_tokens": ["Dragonkin", "Sorcerer", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "Whenever", "<b>", "you", "</b>", "target", "this", "minion", "with", "a", "spell,", "gain", "+1/+1."], "output_tokens": ["class", "Dragonkin", "Sorcerer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragonkin", "Sorcerer", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Spell", "Targeted", "(", ")", ",", "[", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Violet Teacher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Teacher ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )", "class Siege Engine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siege Engine ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell <pad> ( ) , Action Tag ( Give ( Buff <pad> ( Change Attack ( <pad> ) , <pad> ( ) ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Minion <pad> ( <pad> Has <pad> ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( Has <pad> ( ) ) , Action Tag ( Give ( Change Attack ( 1 <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) ) , <pad> ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell <pad> ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , effects = [ Effect ( <pad> ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell <pad> ( ) , Action Tag ( Give ( Buff <pad> ( Change Attack ( <pad> ) , <pad> ( ) ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , Action Tag ( Give ( Change Attack ( 1 <pad> ) ) , <pad> ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell <pad> ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 5 , effects = [ Effect ( <pad> ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Hungry Dragon NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> Summon a random 1-Cost minion for your opponent.", "output": "class HungryDragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hungry Dragon\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Summon(CardQuery(conditions=[ManaCost(1), IsMinion()])), PlayerSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7", "input_tokens": ["Hungry", "Dragon", "NAME_END", "5", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "random", "1-Cost", "minion", "for", "your", "opponent."], "output_tokens": ["class", "Hungry", "Dragon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hungry", "Dragon", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "1", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "6", ")"], "examples": ["class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Summon ( <pad> ( ) , <pad> ) , Player Selector ( <pad> Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , <pad> = <pad> ( <pad> ( <pad> ( <pad> ( <pad> Player ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( Summon ( <pad> ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry <pad> ( <pad> ( Card <pad> ( <pad> ) <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class Dragon <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) , Card <pad> ( <pad> = <pad> ( <pad> ) ) , <pad> ( <pad> ) <pad> ) <pad> ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Summon ( <pad> ( ) , <pad> ) , Player Selector ( <pad> Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , <pad> = <pad> ( <pad> ( <pad> ( <pad> ( <pad> = <pad> ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( Summon ( <pad> ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) ) <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class Dragon <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DRAGON , battlecry = <pad> ( <pad> ( <pad> ( <pad> Card <pad> ( <pad> = <pad> ( <pad> ) , <pad> Is <pad> ( <pad> ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )"]}
{"input": "Solemn Vigil NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. Costs (1) less for each minion that died this turn.", "output": "class SolemnVigil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Solemn Vigil\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for n in range(0, 2):\u00a7            player.draw()\u00a7", "input_tokens": ["Solemn", "Vigil", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Draw", "2", "cards.", "Costs", "(1)", "less", "for", "each", "minion", "that", "died", "this", "turn."], "output_tokens": ["class", "Solemn", "Vigil", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Solemn", "Vigil", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Dead", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "n", "in", "range", "(", "0", ",", "2", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Dragons Breath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon ` s Breath ` , 5 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( player . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> = <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> , <pad> = [ <pad> ( <pad> ( player = Both Player ( ) ) , <pad> ( <pad> ) , <pad> ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( <pad> Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( player . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = [ <pad> ( <pad> ( <pad> = Both Player ( ) ) , <pad> ( <pad> ( ) , <pad> ( ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( <pad> Both Player ( ) ) ) , - 1 ) ) ] ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"]}
