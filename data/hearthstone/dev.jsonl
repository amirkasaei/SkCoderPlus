{"input": "Assassin's Blade NAME_END 3 ATK_END -1 DEF_END 5 COST_END 4 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class AssassinsBlade(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 4)\u00a7", "input_tokens": ["Assassin's", "Blade", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "5", "COST_END", "4", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Assassins", "Blade", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Assassin", "`", "s", "Blade", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "4", ")"]}
{"input": "Boulderfist Ogre NAME_END 6 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class BoulderfistOgre(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boulderfist Ogre\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 7)\u00a7", "input_tokens": ["Boulderfist", "Ogre", "NAME_END", "6", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Boulderfist", "Ogre", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boulderfist", "Ogre", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "7", ")"]}
{"input": "Deadly Poison NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your weapon +2 Attack.", "output": "class DeadlyPoison(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deadly Poison\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        player.weapon.base_attack += 2\u00a7        player.hero.change_temp_attack(2)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and player.weapon is not None\u00a7", "input_tokens": ["Deadly", "Poison", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "your", "weapon", "+2", "Attack."], "output_tokens": ["class", "Deadly", "Poison", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deadly", "Poison", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "weapon", ".", "base_attack", "+", "=", "2", "player", ".", "hero", ".", "change_temp_attack", "(", "2", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "player", ".", "weapon", "is", "not", "None"]}
{"input": "Fire Elemental NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage.", "output": "class FireElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fire Elemental\", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7", "input_tokens": ["Fire", "Elemental", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage."], "output_tokens": ["class", "Fire", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fire", "Elemental", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ")"]}
{"input": "Gnomish Inventor NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Draw a card.", "output": "class GnomishInventor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Inventor\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Gnomish", "Inventor", "NAME_END", "2", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Gnomish", "Inventor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnomish", "Inventor", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"]}
{"input": "Heroic Strike NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +4 Attack this turn.", "output": "class HeroicStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heroic Strike\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(4)\u00a7", "input_tokens": ["Heroic", "Strike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "your", "hero", "+4", "Attack", "this", "turn."], "output_tokens": ["class", "Heroic", "Strike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Heroic", "Strike", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "4", ")"]}
{"input": "Ironbark Protector NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class IronbarkProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironbark Protector\", 8, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, taunt=True)\u00a7", "input_tokens": ["Ironbark", "Protector", "NAME_END", "8", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Ironbark", "Protector", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ironbark", "Protector", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ",", "taunt", "=", "True", ")"]}
{"input": "Mark of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Taunt</b> and +2/+2.<i> (+2 Attack/+2 Health)</i>", "output": "class MarkOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mark of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(2)\u00a7        self.target.increase_health(2)\u00a7        self.target.taunt = True\u00a7", "input_tokens": ["Mark", "of", "the", "Wild", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "<b>", "Taunt", "</b>", "and", "+2/+2.<i>", "(+2", "Attack/+2", "Health)</i>"], "output_tokens": ["class", "Mark", "Of", "The", "Wild", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mark", "of", "the", "Wild", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "self", ".", "target", ".", "taunt", "=", "True"]}
{"input": "Multi-Shot NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to two random enemy minions.", "output": "class MultiShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Multi-Shot\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        for i in range(0, 2):\u00a7            target = game.random_choice(targets)\u00a7            targets.remove(target)\u00a7            target.damage(player.effective_spell_damage(3), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7", "input_tokens": ["Multi-Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "two", "random", "enemy", "minions."], "output_tokens": ["class", "Multi", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Multi", "-", "Shot", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "targets", ".", "remove", "(", "target", ")", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "2"]}
{"input": "Power Word: Shield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +2 Health. NL Draw a card.", "output": "class PowerWordShield(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power Word: Shield\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.increase_health(2)\u00a7        player.draw()\u00a7", "input_tokens": ["Power", "Word", ":", "Shield", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "+2", "Health.", "NL", "Draw", "a", "card."], "output_tokens": ["class", "Power", "Word", "Shield", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Power", "Word", ":", "Shield", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "player", ".", "draw", "(", ")"]}
{"input": "Sen'jin Shieldmasta NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Taunt</b>", "output": "class SenjinShieldmasta(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7", "input_tokens": ["Sen'jin", "Shieldmasta", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Senjin", "Shieldmasta", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sen", "`", "jin", "Shieldmasta", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "taunt", "=", "True", ")"]}
{"input": "Sinister Strike NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to the enemy hero.", "output": "class SinisterStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sinister Strike\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        game.other_player.hero.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Sinister", "Strike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Sinister", "Strike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sinister", "Strike", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"]}
{"input": "Succubus NAME_END 4 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b>Battlecry:</b> Discard a random card.", "output": "class Succubus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Succubus\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Succubus", "NAME_END", "4", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Discard", "a", "random", "card."], "output_tokens": ["class", "Succubus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Succubus", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Discard", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"]}
{"input": "War Golem NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class WarGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"War Golem\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7", "input_tokens": ["War", "Golem", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "War", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "War", "Golem", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ")"]}
{"input": "Acidmaw NAME_END 4 ATK_END 2 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever another minion takes damage, destroy it.", "output": "class Acidmaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acidmaw\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, effects=[Effect(CharacterDamaged(MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(), TargetSelector())])])\u00a7", "input_tokens": ["Acidmaw", "NAME_END", "4", "ATK_END", "2", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "Whenever", "another", "minion", "takes", "damage,", "destroy", "it."], "output_tokens": ["class", "Acidmaw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Acidmaw", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "Minion", "Is", "Not", "Target", "(", ")", ",", "Both", "Player", "(", ")", ")", ",", "[", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", ")", ")", "]", ")", "]", ")"]}
{"input": "Boar NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "output": "class Boar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Boar", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Boar", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boar", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"]}
{"input": "Anodized Robo Cub NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b>. <b>Choose One -</b> NL +1 Attack; or +1 Health.", "output": "class AnodizedRoboCub(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anodized Robo Cub\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[Choice(AttackMode(), Give([Buff(ChangeAttack(1))]), SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))]), SelfSelector())])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7", "input_tokens": ["Anodized", "Robo", "Cub", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Choose", "One", "-", "</b>", "NL", "+1", "Attack;", "or", "+1", "Health."], "output_tokens": ["class", "Anodized", "Robo", "Cub", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Anodized", "Robo", "Cub", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "choices", "=", "[", "Choice", "(", "Attack", "Mode", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Tank", "Mode", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "taunt", "=", "True", ")"]}
{"input": "Burrowing Mine NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END When you draw this, it explodes. You take 10 damage and draw a card.", "output": "class BurrowingMine(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burrowing Mine\", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard(query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)), PlayerSelector())), Effect(Drawn(), ActionTag(Draw(), PlayerSelector()))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7", "input_tokens": ["Burrowing", "Mine", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "When", "you", "draw", "this,", "it", "explodes.", "You", "take", "10", "damage", "and", "draw", "a", "card."], "output_tokens": ["class", "Burrowing", "Mine", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Burrowing", "Mine", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "effects", "=", "[", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "10", ")", ",", "Hero", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Discard", "(", "query", "=", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LAST_DRAWN", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")"]}
{"input": "Crackle NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3-$6 damage. <b>Overload:</b> (1)", "output": "class Crackle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crackle\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(game.random_amount(3, 6)), self)\u00a7", "input_tokens": ["Crackle", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3-$6", "damage.", "<b>", "Overload", ":", "</b>", "(1)"], "output_tokens": ["class", "Crackle", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Crackle", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "overload", "=", "1", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "game", ".", "random_amount", "(", "3", ",", "6", ")", ")", ",", "self", ")"]}
{"input": "Emergency Coolant NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Freeze</b> a minion.", "output": "class EmergencyCoolant(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emergency Coolant\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Emergency", "Coolant", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Freeze", "</b>", "a", "minion."], "output_tokens": ["class", "Emergency", "Coolant", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Emergency", "Coolant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"]}
{"input": "Flying Machine NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Windfury</b>", "output": "class FlyingMachine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flying Machine\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, windfury=True)\u00a7", "input_tokens": ["Flying", "Machine", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Flying", "Machine", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flying", "Machine", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "windfury", "=", "True", ")"]}
{"input": "Goblin Auto-Barber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Battlecry</b>: Give your weapon +1 Attack.", "output": "class GoblinAutoBarber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Auto-Barber\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Goblin", "Auto-Barber", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Give", "your", "weapon", "+1", "Attack."], "output_tokens": ["class", "Goblin", "Auto", "Barber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Goblin", "Auto", "-", "Barber", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Increase", "Weapon", "Attack", "(", "1", ")", ",", "Weapon", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"]}
{"input": "Iron Sensei NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, give another friendly Mech +2/+2.", "output": "class IronSensei(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Sensei\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\u00a7", "input_tokens": ["Iron", "Sensei", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "give", "another", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Iron", "Sensei", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Iron", "Sensei", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"]}
{"input": "Mal'Ganis NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Your other Demons have +2/+2. NL Your hero is <b>Immune</b>.", "output": "class MalGanis(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(), HeroSelector())])\u00a7", "input_tokens": ["Mal'Ganis", "NAME_END", "9", "ATK_END", "7", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Legendary", "RARITY_END", "Your", "other", "Demons", "have", "+2/+2.", "NL", "Your", "hero", "is", "<b>", "Immune", "</b>", "."], "output_tokens": ["class", "Mal", "Ganis", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mal", "`", "Ganis", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "auras", "=", "[", "Aura", "(", "Change", "Health", "(", "2", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", ")", ")", ",", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", ")", ")", ",", "Aura", "(", "Immune", "(", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")"]}
{"input": "Mistress of Pain NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END Whenever this minion deals damage, restore that much Health to your hero.", "output": "class MistressOfPain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mistress of Pain\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(EventValue()), HeroSelector()))])\u00a7", "input_tokens": ["Mistress", "of", "Pain", "NAME_END", "1", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "Whenever", "this", "minion", "deals", "damage,", "restore", "that", "much", "Health", "to", "your", "hero."], "output_tokens": ["class", "Mistress", "Of", "Pain", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mistress", "of", "Pain", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "Event", "Value", "(", ")", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"]}
{"input": "Powermace NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Deathrattle</b>: Give a random friendly Mech +2/+2.", "output": "class Powermace(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Powermace\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))\u00a7", "input_tokens": ["Powermace", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "3", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Deathrattle", "</b>", ":", "Give", "a", "random", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Powermace", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Powermace", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"]}
{"input": "Screwjank Clunker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry</b>: Give a friendly Mech +2/+2.", "output": "class ScrewjankClunker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Screwjank Clunker\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7", "input_tokens": ["Screwjank", "Clunker", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Give", "a", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Screwjank", "Clunker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Screwjank", "Clunker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ")"]}
{"input": "Sneed's Old Shredder NAME_END 5 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a random legendary minion.", "output": "class SneedsOldShredder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])), PlayerSelector()))\u00a7", "input_tokens": ["Sneed's", "Old", "Shredder", "NAME_END", "5", "ATK_END", "7", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "random", "legendary", "minion."], "output_tokens": ["class", "Sneeds", "Old", "Shredder", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sneed", "`", "s", "Old", "Shredder", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Rarity", "(", "CARD_RARITY", ".", "LEGENDARY", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"]}
{"input": "Toshley NAME_END 5 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry and Deathrattle:</b> Add a <b>Spare Part</b> card to your hand.", "output": "class Toshley(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Toshley\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\u00a7", "input_tokens": ["Toshley", "NAME_END", "5", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", "and", "Deathrattle", ":", "</b>", "Add", "a", "<b>", "Spare", "Part", "</b>", "card", "to", "your", "hand."], "output_tokens": ["class", "Toshley", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "super", "(", ")", ".", "__init__", "(", "`", "Toshley", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "return", "Minion", "(", "5", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"]}
{"input": "Warbot NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Enrage:</b> +1 Attack.", "output": "class Warbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Warbot\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\u00a7", "input_tokens": ["Warbot", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "+1", "Attack."], "output_tokens": ["class", "Warbot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Warbot", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"]}
{"input": "Deathlord NAME_END 2 ATK_END 8 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. Deathrattle:</b> Your opponent puts a minion from their deck into the battlefield.", "output": "class Deathlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deathlord\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)), PlayerSelector(EnemyPlayer())))\u00a7", "input_tokens": ["Deathlord", "NAME_END", "2", "ATK_END", "8", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt.", "Deathrattle", ":", "</b>", "Your", "opponent", "puts", "a", "minion", "from", "their", "deck", "into", "the", "battlefield."], "output_tokens": ["class", "Deathlord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deathlord", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "8", ",", "taunt", "=", "True", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Minion", "(", ")", "]", ",", "source", "=", "CARD_SOURCE", ".", "MY_DECK", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"]}
{"input": "Nerub'ar Weblord NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Minions with <b>Battlecry</b> cost (2) more.", "output": "class NerubarWeblord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(BothPlayer(), HasBattlecry()))])\u00a7", "input_tokens": ["Nerub'ar", "Weblord", "NAME_END", "1", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Minions", "with", "<b>", "Battlecry", "</b>", "cost", "(2)", "more."], "output_tokens": ["class", "Nerubar", "Weblord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerub", "`", "ar", "Weblord", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "2", ")", ",", "Card", "Selector", "(", "Both", "Player", "(", ")", ",", "Has", "Battlecry", "(", ")", ")", ")", "]", ")"]}
{"input": "Spectral Knight NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "output": "class SpectralKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spectral Knight\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6, spell_targetable=False)\u00a7", "input_tokens": ["Spectral", "Knight", "NAME_END", "4", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Spectral", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spectral", "Knight", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "6", ",", "spell_targetable", "=", "False", ")"]}
{"input": "Wailing Soul NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry: Silence</b> your other minions.", "output": "class WailingSoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wailing Soul\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5)\u00a7", "input_tokens": ["Wailing", "Soul", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "Silence", "</b>", "your", "other", "minions."], "output_tokens": ["class", "Wailing", "Soul", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wailing", "Soul", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Silence", "(", ")", ",", "Minion", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ")"]}
{"input": "Amani Berserker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> +3 Attack", "output": "class AmaniBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Amani Berserker\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\u00a7", "input_tokens": ["Amani", "Berserker", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "+3", "Attack"], "output_tokens": ["class", "Amani", "Berserker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Amani", "Berserker", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "3", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"]}
{"input": "Archmage Antonidas NAME_END 5 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a spell, add a 'Fireball' spell to your hand.", "output": "class ArchmageAntonidas(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage Antonidas\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(hearthbreaker.cards.Fireball()), PlayerSelector()))])\u00a7", "input_tokens": ["Archmage", "Antonidas", "NAME_END", "5", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "add", "a", "'Fireball'", "spell", "to", "your", "hand."], "output_tokens": ["class", "Archmage", "Antonidas", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Archmage", "Antonidas", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "hearthbreaker", ".", "cards", ".", "Fireball", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"]}
{"input": "Bananas NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1/+1.", "output": "class Bananas(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bananas\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(1)\u00a7        self.target.increase_health(1)\u00a7", "input_tokens": ["Bananas", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "+1/+1."], "output_tokens": ["class", "Bananas", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bananas", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "1", ")", "self", ".", "target", ".", "increase_health", "(", "1", ")"]}
{"input": "Blessed Champion NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Double a minion's Attack.", "output": "class BlessedChampion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessed Champion\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(DoubleAttack()))\u00a7", "input_tokens": ["Blessed", "Champion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Double", "a", "minion's", "Attack."], "output_tokens": ["class", "Blessed", "Champion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blessed", "Champion", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Double", "Attack", "(", ")", ")", ")"]}
{"input": "Cabal Shadow Priest NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Take control of an enemy minion that has 2 or less Attack.", "output": "class CabalShadowPriest(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cabal Shadow Priest\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Cabal", "Shadow", "Priest", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Take", "control", "of", "an", "enemy", "minion", "that", "has", "2", "or", "less", "Attack."], "output_tokens": ["class", "Cabal", "Shadow", "Priest", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cabal", "Shadow", "Priest", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Steal", "(", ")", ",", "Minion", "Selector", "(", "Attack", "Less", "Than", "Or", "Equal", "To", "(", "2", ")", ",", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"]}
{"input": "Cone of Cold NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> a minion and the minions next to it, and deal $1 damage to them.", "output": "class ConeOfCold(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cone of Cold\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7        index = self.target.index\u00a7\u00a7        if self.target.index < len(self.target.player.minions) - 1:\u00a7            minion = self.target.player.minions[index + 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        if self.target.index > 0:\u00a7            minion = self.target.player.minions[index - 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Cone", "of", "Cold", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "a", "minion", "and", "the", "minions", "next", "to", "it,", "and", "deal", "$1", "damage", "to", "them."], "output_tokens": ["class", "Cone", "Of", "Cold", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cone", "of", "Cold", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")", "index", "=", "self", ".", "target", ".", "index", "if", "self", ".", "target", ".", "index", "<", "len", "(", "self", ".", "target", ".", "player", ".", "minions", ")", "-", "1", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "+", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "if", "self", ".", "target", ".", "index", ">", "0", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "-", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"]}
{"input": "Defender of Argus NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions +1/+1 and <b>Taunt</b>.", "output": "class DefenderOfArgus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender of Argus\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([ Buff(Taunt()), Buff(ChangeAttack(1)), Buff(ChangeHealth(1)) ]), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Defender", "of", "Argus", "NAME_END", "2", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "adjacent", "minions", "+1/+1", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Defender", "Of", "Argus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defender", "of", "Argus", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Taunt", "(", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"]}
{"input": "Doomhammer NAME_END 2 ATK_END -1 DEF_END 5 COST_END 8 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Windfury, Overload:</b> (2)", "output": "class Doomhammer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomhammer\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=2)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 8, buffs=[Buff(Windfury())])\u00a7", "input_tokens": ["Doomhammer", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "5", "COST_END", "8", "DUR_END", "Weapon", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Windfury,", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Doomhammer", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Doomhammer", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "overload", "=", "2", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "8", ",", "buffs", "=", "[", "Buff", "(", "Windfury", "(", ")", ")", "]", ")"]}
{"input": "Earth Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Silence</b> a minion, then deal $1 damage to it.", "output": "class EarthShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Shock\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.silence()\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Earth", "Shock", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Silence", "</b>", "a", "minion,", "then", "deal", "$1", "damage", "to", "it."], "output_tokens": ["class", "Earth", "Shock", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Earth", "Shock", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "silence", "(", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"]}
{"input": "Eye for an Eye NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero takes damage, deal that much damage to the enemy hero.", "output": "class EyeForAnEye(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eye for an Eye\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, character, attacker, amount):\u00a7        if character.is_hero():\u00a7            character.player.opponent.hero.damage(amount, self)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"character_damaged\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"character_damaged\", self._reveal)\u00a7", "input_tokens": ["Eye", "for", "an", "Eye", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "takes", "damage,", "deal", "that", "much", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Eye", "For", "An", "Eye", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Eye", "for", "an", "Eye", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "character", ",", "attacker", ",", "amount", ")", ":", "if", "character", ".", "is_hero", "(", ")", ":", "character", ".", "player", ".", "opponent", ".", "hero", ".", "damage", "(", "amount", ",", "self", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "character_damaged", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "character_damaged", "`", ",", "self", ".", "_reveal", ")"]}
{"input": "Flare NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END All minions lose <b>Stealth</b>. Destroy all enemy <b>Secrets</b>. Draw a card.", "output": "class Flare(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flare\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in hearthbreaker.targeting.find_minion_spell_target(game, lambda m: m.stealth):\u00a7            minion.stealth = False\u00a7\u00a7        for secret in game.other_player.secrets:\u00a7            secret.deactivate(game.other_player)\u00a7\u00a7        game.other_player.secrets = []\u00a7        player.draw()\u00a7", "input_tokens": ["Flare", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "All", "minions", "lose", "<b>", "Stealth", "</b>", ".", "Destroy", "all", "enemy", "<b>", "Secrets", "</b>", ".", "Draw", "a", "card."], "output_tokens": ["class", "Flare", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flare", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "m", ":", "m", ".", "stealth", ")", ":", "minion", ".", "stealth", "=", "False", "for", "secret", "in", "game", ".", "other_player", ".", "secrets", ":", "secret", ".", "deactivate", "(", "game", ".", "other_player", ")", "game", ".", "other_player", ".", "secrets", "=", "[", "]", "player", ".", "draw", "(", ")"]}
{"input": "Gorehowl NAME_END 7 ATK_END -1 DEF_END 7 COST_END 1 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Attacking a minion costs 1 Attack instead of 1 Durability.", "output": "class Gorehowl(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gorehowl\", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(), TargetIsMinion())), [ActionTag(IncreaseDurability(), WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1), WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1), AttackCompleted())), HeroSelector())])])\u00a7", "input_tokens": ["Gorehowl", "NAME_END", "7", "ATK_END", "-1", "DEF_END", "7", "COST_END", "1", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Attacking", "a", "minion", "costs", "1", "Attack", "instead", "of", "1", "Durability."], "output_tokens": ["class", "Gorehowl", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gorehowl", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "7", ",", "1", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "And", "(", "Is", "Hero", "(", ")", ",", "Target", "Is", "Minion", "(", ")", ")", ")", ",", "[", "Action", "Tag", "(", "Increase", "Durability", "(", ")", ",", "Weapon", "Selector", "(", ")", ")", ",", "Action", "Tag", "(", "Increase", "Weapon", "Attack", "(", "-", "1", ")", ",", "Weapon", "Selector", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "1", ")", ",", "Attack", "Completed", "(", ")", ")", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")", "]", ")"]}
{"input": "Hound NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "output": "class Hound(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hound\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, charge=True)\u00a7", "input_tokens": ["Hound", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Hound", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hound", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "charge", "=", "True", ")"]}
{"input": "Injured Blademaster NAME_END 4 ATK_END 7 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage to HIMSELF.", "output": "class InjuredBlademaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Injured Blademaster\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7)\u00a7", "input_tokens": ["Injured", "Blademaster", "NAME_END", "4", "ATK_END", "7", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "4", "damage", "to", "HIMSELF."], "output_tokens": ["class", "Injured", "Blademaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Injured", "Blademaster", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "4", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ")"]}
{"input": "Knife Juggler NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you summon a minion, deal 1 damage to a random enemy.", "output": "class KnifeJuggler(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Knife Juggler\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])\u00a7", "input_tokens": ["Knife", "Juggler", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "After", "you", "summon", "a", "minion,", "deal", "1", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Knife", "Juggler", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Knife", "Juggler", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "effects", "=", "[", "Effect", "(", "After", "Added", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ",", "condition", "=", "None", ")", ")", ")", "]", ")"]}
{"input": "Lightwell NAME_END 0 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the start of your turn, restore 3 Health to a damaged friendly character.", "output": "class Lightwell(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwell\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3), CharacterSelector(condition=IsDamaged(), picker=RandomPicker())))])\u00a7", "input_tokens": ["Lightwell", "NAME_END", "0", "ATK_END", "5", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "restore", "3", "Health", "to", "a", "damaged", "friendly", "character."], "output_tokens": ["class", "Lightwell", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightwell", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "3", ")", ",", "Character", "Selector", "(", "condition", "=", "Is", "Damaged", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"]}
{"input": "Mana Wyrm NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you cast a spell, gain +1 Attack.", "output": "class ManaWyrm(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wyrm\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Mana", "Wyrm", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "gain", "+1", "Attack."], "output_tokens": ["class", "Mana", "Wyrm", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Wyrm", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"]}
{"input": "Mogu'shan Warden NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class MogushanWarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7, taunt=True)\u00a7", "input_tokens": ["Mogu'shan", "Warden", "NAME_END", "1", "ATK_END", "7", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Mogushan", "Warden", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mogu", "`", "shan", "Warden", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "7", ",", "taunt", "=", "True", ")"]}
{"input": "Nourish NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One</b> - Gain 2 Mana Crystals; or Draw 3 cards.", "output": "class Nourish(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nourish\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        class Gain2(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Gain 2 mana crystals\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                if player.max_mana < 8:\u00a7                    player.max_mana += 2\u00a7                    player.mana += 2\u00a7                else:\u00a7                    player.max_mana = 10\u00a7                    player.mana += 2\u00a7\u00a7        class Draw3(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Draw three cards\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                player.draw()\u00a7                player.draw()\u00a7                player.draw()\u00a7\u00a7        option = player.agent.choose_option([Gain2(), Draw3()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Nourish", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Gain", "2", "Mana", "Crystals;", "or", "Draw", "3", "cards."], "output_tokens": ["class", "Nourish", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nourish", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "class", "Gain2", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gain", "2", "mana", "crystals", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "if", "player", ".", "max_mana", "<", "8", ":", "player", ".", "max_mana", "+", "=", "2", "player", ".", "mana", "+", "=", "2", "else", ":", "player", ".", "max_mana", "=", "10", "player", ".", "mana", "+", "=", "2", "class", "Draw3", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Draw", "three", "cards", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Gain2", "(", ")", ",", "Draw3", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"]}
{"input": "Preparation NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END The next spell you cast this turn costs (3) less.", "output": "class Preparation(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Preparation\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=IsSpell()), SpellCast()))\u00a7", "input_tokens": ["Preparation", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "The", "next", "spell", "you", "cast", "this", "turn", "costs", "(3)", "less."], "output_tokens": ["class", "Preparation", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Preparation", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "add_aura", "(", "Aura", "Until", "(", "Mana", "Change", "(", "-", "3", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Spell", "(", ")", ")", ",", "Spell", "Cast", "(", ")", ")", ")"]}
{"input": "Repentance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, reduce its Health to 1.", "output": "class Repentance(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Repentance\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion):\u00a7\u00a7        minion.set_health_to(1)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7", "input_tokens": ["Repentance", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "opponent", "plays", "a", "minion,", "reduce", "its", "Health", "to", "1."], "output_tokens": ["class", "Repentance", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Repentance", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "minion", ")", ":", "minion", ".", "set_health_to", "(", "1", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")"]}
{"input": "Shadow of Nothing NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Mindgames whiffed! Your opponent had no minions!", "output": "class ShadowOfNothing(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow of Nothing\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(0, 1)\u00a7", "input_tokens": ["Shadow", "of", "Nothing", "NAME_END", "0", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Mindgames", "whiffed!", "Your", "opponent", "had", "no", "minions!"], "output_tokens": ["class", "Shadow", "Of", "Nothing", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "of", "Nothing", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "0", ",", "1", ")"]}
{"input": "Slam NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it survives, draw a card.", "output": "class Slam(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Slam\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health > player.effective_spell_damage(2) or self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7            player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Slam", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "a", "minion.", "If", "it", "survives,", "draw", "a", "card."], "output_tokens": ["class", "Slam", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Slam", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "health", ">", "player", ".", "effective_spell_damage", "(", "2", ")", "or", "self", ".", "target", ".", "divine_shield", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "player", ".", "draw", "(", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"]}
{"input": "Spellbreaker NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> <b>Silence</b> a minion.", "output": "class Spellbreaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbreaker\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Spellbreaker", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "<b>", "Silence", "</b>", "a", "minion."], "output_tokens": ["class", "Spellbreaker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spellbreaker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "NONE", ",", "battlecry", "=", "Battlecry", "(", "Silence", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"]}
{"input": "Sunfury Protector NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions <b>Taunt</b>.", "output": "class SunfuryProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sunfury Protector\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Sunfury", "Protector", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "adjacent", "minions", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Sunfury", "Protector", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sunfury", "Protector", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Taunt", "(", ")", ")", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"]}
{"input": "Tinkmaster Overspark NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Transform another random minion into a 5/5 Devilsaur or a 1/1 Squirrel.", "output": "class TinkmasterOverspark(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tinkmaster Overspark\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Tinkmaster", "Overspark", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Transform", "another", "random", "minion", "into", "a", "5/5", "Devilsaur", "or", "a", "1/1", "Squirrel."], "output_tokens": ["class", "Tinkmaster", "Overspark", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tinkmaster", "Overspark", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Transform", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "[", "Devilsaur", "(", ")", ",", "Squirrel", "(", ")", "]", ")", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"]}
{"input": "Vaporize NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a minion attacks your hero, destroy it.", "output": "class Vaporize(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vaporize\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if target is self.player.hero and attacker.is_minion() and not attacker.removed:\u00a7            attacker.die(self)\u00a7            attacker.game.check_delayed()\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7", "input_tokens": ["Vaporize", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "a", "minion", "attacks", "your", "hero,", "destroy", "it."], "output_tokens": ["class", "Vaporize", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vaporize", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "target", "is", "self", ".", "player", ".", "hero", "and", "attacker", ".", "is_minion", "(", ")", "and", "not", "attacker", ".", "removed", ":", "attacker", ".", "die", "(", "self", ")", "attacker", ".", "game", ".", "check_delayed", "(", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")"]}
{"input": "Worgen Infiltrator NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Stealth</b>", "output": "class WorgenInfiltrator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Worgen Infiltrator\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, stealth=True)\u00a7", "input_tokens": ["Worgen", "Infiltrator", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Worgen", "Infiltrator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Worgen", "Infiltrator", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "stealth", "=", "True", ")"]}
{"input": "Blackwing Corruptor NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry</b>: If you're holding a Dragon, deal 3 damage.", "output": "class BlackwingCorruptor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blackwing Corruptor\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Blackwing", "Corruptor", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "If", "you're", "holding", "a", "Dragon,", "deal", "3", "damage."], "output_tokens": ["class", "Blackwing", "Corruptor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blackwing", "Corruptor", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"]}
{"input": "Drakonid Crusher NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If your opponent has 15 or less Health, gain +3/+3.", "output": "class DrakonidCrusher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Drakonid Crusher\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Attribute('health', HeroSelector(EnemyPlayer())), value=15)))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Drakonid", "Crusher", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "your", "opponent", "has", "15", "or", "less", "Health,", "gain", "+3/+3."], "output_tokens": ["class", "Drakonid", "Crusher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Drakonid", "Crusher", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "3", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "3", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Not", "(", "Greater", "Than", "(", "Attribute", "(", "`", "health", "`", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ",", "value", "=", "15", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"]}
{"input": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "output": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Imp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"]}
{"input": "Twilight Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +2 Health.", "output": "class TwilightWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twilight Whelp\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Twilight", "Whelp", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you're", "holding", "a", "Dragon,", "gain", "+2", "Health."], "output_tokens": ["class", "Twilight", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Twilight", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"]}
