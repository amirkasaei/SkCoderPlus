{"intent": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample0-example0"}
{"intent": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample0-example1"}
{"intent": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample0-example2"}
{"intent": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample0-example3"}
{"intent": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample0-example4"}
{"intent": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b> Taunt </b> .", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], "source": "sample1-example0"}
{"intent": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b> Taunt </b> .", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample1-example1"}
{"intent": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b> Taunt </b> .", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample1-example2"}
{"intent": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b> Taunt </b> .", "example": "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample1-example3"}
{"intent": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b> Taunt </b> .", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample1-example4"}
{"intent": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], "source": "sample2-example0"}
{"intent": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], "source": "sample2-example1"}
{"intent": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "source": "sample2-example2"}
{"intent": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], "source": "sample2-example3"}
{"intent": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample2-example4"}
{"intent": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample3-example0"}
{"intent": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample3-example1"}
{"intent": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "example": "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample3-example2"}
{"intent": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample3-example3"}
{"intent": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample3-example4"}
{"intent": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "example": "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample4-example0"}
{"intent": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample4-example1"}
{"intent": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample4-example2"}
{"intent": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "example": "class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample4-example3"}
{"intent": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "example": "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample4-example4"}
{"intent": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample5-example0"}
{"intent": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "example": "class Avenging Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenging Wrath ` , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample5-example1"}
{"intent": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "example": "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample5-example2"}
{"intent": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample5-example3"}
{"intent": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample5-example4"}
{"intent": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample6-example0"}
{"intent": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Arcane Missiles ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Missiles ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample6-example1"}
{"intent": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample6-example2"}
{"intent": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample6-example3"}
{"intent": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample6-example4"}
{"intent": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], "source": "sample7-example0"}
{"intent": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample7-example1"}
{"intent": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample7-example2"}
{"intent": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample7-example3"}
{"intent": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample7-example4"}
{"intent": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "example": "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample8-example0"}
{"intent": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample8-example1"}
{"intent": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample8-example2"}
{"intent": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "example": "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample8-example3"}
{"intent": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "example": "class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample8-example4"}
{"intent": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample9-example0"}
{"intent": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample9-example1"}
{"intent": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample9-example2"}
{"intent": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample9-example3"}
{"intent": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample9-example4"}
{"intent": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample10-example0"}
{"intent": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "example": "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample10-example1"}
{"intent": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "example": "class Unleash The Hounds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unleash the Hounds ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for target in hearthbreaker . targeting . find_enemy_minion_spell_target ( player . game , lambda x : True ) : hound = hearthbreaker . cards . minions . hunter . Hound ( ) hound . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1 and len ( player . minions ) < 7", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], "source": "sample10-example2"}
{"intent": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample10-example3"}
{"intent": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "example": "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample10-example4"}
{"intent": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "example": "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample11-example0"}
{"intent": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "example": "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample11-example1"}
{"intent": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample11-example2"}
{"intent": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample11-example3"}
{"intent": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample11-example4"}
{"intent": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample12-example0"}
{"intent": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample12-example1"}
{"intent": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample12-example2"}
{"intent": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample12-example3"}
{"intent": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample12-example4"}
{"intent": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample13-example0"}
{"intent": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "example": "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample13-example1"}
{"intent": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample13-example2"}
{"intent": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample13-example3"}
{"intent": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample13-example4"}
{"intent": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Charge </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample14-example0"}
{"intent": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Charge </b>", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample14-example1"}
{"intent": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Charge </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample14-example2"}
{"intent": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Charge </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample14-example3"}
{"intent": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Charge </b>", "example": "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample14-example4"}
{"intent": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample15-example0"}
{"intent": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample15-example1"}
{"intent": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample15-example2"}
{"intent": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample15-example3"}
{"intent": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample15-example4"}
{"intent": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b> Charge </b> .", "example": "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample16-example0"}
{"intent": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b> Charge </b> .", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample16-example1"}
{"intent": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b> Charge </b> .", "example": "class Hex ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hex ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) frog = hearthbreaker . cards . minions . neutral . Frog ( ) minion = frog . create_minion ( None ) minion . card = frog self . target . replace ( minion )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample16-example2"}
{"intent": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b> Charge </b> .", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample16-example3"}
{"intent": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b> Charge </b> .", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample16-example4"}
{"intent": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample17-example0"}
{"intent": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample17-example1"}
{"intent": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample17-example2"}
{"intent": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Spectral Spider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Spider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample17-example3"}
{"intent": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample17-example4"}
{"intent": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "example": "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample18-example0"}
{"intent": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "example": "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample18-example1"}
{"intent": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample18-example2"}
{"intent": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample18-example3"}
{"intent": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], "source": "sample18-example4"}
{"intent": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample19-example0"}
{"intent": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample19-example1"}
{"intent": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample19-example2"}
{"intent": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample19-example3"}
{"intent": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample19-example4"}
{"intent": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample20-example0"}
{"intent": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample20-example1"}
{"intent": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample20-example2"}
{"intent": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample20-example3"}
{"intent": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample20-example4"}
{"intent": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample21-example0"}
{"intent": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample21-example1"}
{"intent": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample21-example2"}
{"intent": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample21-example3"}
{"intent": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample21-example4"}
{"intent": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "example": "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample22-example0"}
{"intent": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample22-example1"}
{"intent": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "example": "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample22-example2"}
{"intent": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], "source": "sample22-example3"}
{"intent": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "source": "sample22-example4"}
{"intent": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample23-example0"}
{"intent": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample23-example1"}
{"intent": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample23-example2"}
{"intent": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample23-example3"}
{"intent": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample23-example4"}
{"intent": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "source": "sample24-example0"}
{"intent": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample24-example1"}
{"intent": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample24-example2"}
{"intent": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample24-example3"}
{"intent": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample24-example4"}
{"intent": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/1 Mechanical Dragonling.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample25-example0"}
{"intent": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/1 Mechanical Dragonling.", "example": "class Nerubian Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian Egg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample25-example1"}
{"intent": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/1 Mechanical Dragonling.", "example": "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample25-example2"}
{"intent": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/1 Mechanical Dragonling.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample25-example3"}
{"intent": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/1 Mechanical Dragonling.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample25-example4"}
{"intent": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample26-example0"}
{"intent": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample26-example1"}
{"intent": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample26-example2"}
{"intent": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample26-example3"}
{"intent": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample26-example4"}
{"intent": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to ALL other characters.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample27-example0"}
{"intent": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to ALL other characters.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample27-example1"}
{"intent": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to ALL other characters.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample27-example2"}
{"intent": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to ALL other characters.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample27-example3"}
{"intent": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to ALL other characters.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample27-example4"}
{"intent": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample28-example0"}
{"intent": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample28-example1"}
{"intent": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample28-example2"}
{"intent": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample28-example3"}
{"intent": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample28-example4"}
{"intent": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "example": "class Headcrack ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Headcrack ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) if player . cards_played > 0 : player . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Add Card ( self ) , Player Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample29-example0"}
{"intent": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "example": "class Gallywixs Coin ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Coin ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 10 : player . mana + = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], "source": "sample29-example1"}
{"intent": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample29-example2"}
{"intent": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "example": "class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample29-example3"}
{"intent": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "example": "class Feign Death ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feign Death ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in sorted ( player . minions , key = lambda m : m . born ) : for deathrattle in minion . deathrattle : deathrattle . do ( minion ) if player . double_deathrattle : for deathrattle in minion . deathrattle : deathrattle . do ( minion )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample29-example4"}
{"intent": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "example": "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample30-example0"}
{"intent": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "example": "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample30-example1"}
{"intent": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample30-example2"}
{"intent": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample30-example3"}
{"intent": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample30-example4"}
{"intent": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample31-example0"}
{"intent": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample31-example1"}
{"intent": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample31-example2"}
{"intent": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample31-example3"}
{"intent": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample31-example4"}
{"intent": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample32-example0"}
{"intent": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample32-example1"}
{"intent": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample32-example2"}
{"intent": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample32-example3"}
{"intent": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample32-example4"}
{"intent": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "example": "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample33-example0"}
{"intent": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "example": "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample33-example1"}
{"intent": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample33-example2"}
{"intent": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample33-example3"}
{"intent": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample33-example4"}
{"intent": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample34-example0"}
{"intent": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample34-example1"}
{"intent": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample34-example2"}
{"intent": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "example": "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample34-example3"}
{"intent": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "example": "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample34-example4"}
{"intent": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample35-example0"}
{"intent": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample35-example1"}
{"intent": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample35-example2"}
{"intent": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample35-example3"}
{"intent": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample35-example4"}
{"intent": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> all enemy minions.", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample36-example0"}
{"intent": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> all enemy minions.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample36-example1"}
{"intent": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> all enemy minions.", "example": "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample36-example2"}
{"intent": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> all enemy minions.", "example": "class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], "source": "sample36-example3"}
{"intent": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> all enemy minions.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample36-example4"}
{"intent": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b> Freeze </b> it.", "example": "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample37-example0"}
{"intent": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b> Freeze </b> it.", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample37-example1"}
{"intent": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b> Freeze </b> it.", "example": "class Lava Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Shock ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 2 , self ) player . upcoming_overload = 0 player . mana + = player . current_overload player . current_overload = 0", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample37-example2"}
{"intent": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b> Freeze </b> it.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample37-example3"}
{"intent": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b> Freeze </b> it.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample37-example4"}
{"intent": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b> Freeze </b> it.", "example": "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample38-example0"}
{"intent": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b> Freeze </b> it.", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample38-example1"}
{"intent": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b> Freeze </b> it.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample38-example2"}
{"intent": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b> Freeze </b> it.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample38-example3"}
{"intent": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b> Freeze </b> it.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample38-example4"}
{"intent": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample39-example0"}
{"intent": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample39-example1"}
{"intent": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample39-example2"}
{"intent": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample39-example3"}
{"intent": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample39-example4"}
{"intent": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample40-example0"}
{"intent": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample40-example1"}
{"intent": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample40-example2"}
{"intent": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample40-example3"}
{"intent": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample40-example4"}
{"intent": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "example": "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample41-example0"}
{"intent": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "example": "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample41-example1"}
{"intent": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "example": "class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample41-example2"}
{"intent": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "example": "class Metaltooth Leaper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Metaltooth Leaper ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Buff ( Change Attack ( 2 ) ) ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample41-example3"}
{"intent": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample41-example4"}
{"intent": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 6 Health to your hero.", "example": "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample42-example0"}
{"intent": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 6 Health to your hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample42-example1"}
{"intent": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 6 Health to your hero.", "example": "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample42-example2"}
{"intent": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 6 Health to your hero.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample42-example3"}
{"intent": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 6 Health to your hero.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample42-example4"}
{"intent": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "example": "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample43-example0"}
{"intent": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample43-example1"}
{"intent": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample43-example2"}
{"intent": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample43-example3"}
{"intent": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample43-example4"}
{"intent": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample44-example0"}
{"intent": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample44-example1"}
{"intent": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample44-example2"}
{"intent": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "example": "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample44-example3"}
{"intent": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample44-example4"}
{"intent": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Divine Shield </b> .", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample45-example0"}
{"intent": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Divine Shield </b> .", "example": "class Hex ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hex ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) frog = hearthbreaker . cards . minions . neutral . Frog ( ) minion = frog . create_minion ( None ) minion . card = frog self . target . replace ( minion )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], "source": "sample45-example1"}
{"intent": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Divine Shield </b> .", "example": "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "source": "sample45-example2"}
{"intent": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Divine Shield </b> .", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample45-example3"}
{"intent": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Divine Shield </b> .", "example": "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample45-example4"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample46-example0"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample46-example1"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample46-example2"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Mana Tide Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Tide Totem ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample46-example3"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample46-example4"}
{"intent": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "example": "class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample47-example0"}
{"intent": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample47-example1"}
{"intent": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "example": "class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], "source": "sample47-example2"}
{"intent": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample47-example3"}
{"intent": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "example": "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample47-example4"}
{"intent": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b> Taunt </b> .", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample48-example0"}
{"intent": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b> Taunt </b> .", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample48-example1"}
{"intent": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b> Taunt </b> .", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample48-example2"}
{"intent": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b> Taunt </b> .", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample48-example3"}
{"intent": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b> Taunt </b> .", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample48-example4"}
{"intent": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "example": "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample49-example0"}
{"intent": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample49-example1"}
{"intent": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample49-example2"}
{"intent": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample49-example3"}
{"intent": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample49-example4"}
{"intent": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample50-example0"}
{"intent": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample50-example1"}
{"intent": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample50-example2"}
{"intent": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "example": "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample50-example3"}
{"intent": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample50-example4"}
{"intent": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample51-example0"}
{"intent": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample51-example1"}
{"intent": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample51-example2"}
{"intent": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample51-example3"}
{"intent": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample51-example4"}
{"intent": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Give a friendly Beast +2/+2 and <b> Taunt </b> .", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample52-example0"}
{"intent": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Give a friendly Beast +2/+2 and <b> Taunt </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample52-example1"}
{"intent": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Give a friendly Beast +2/+2 and <b> Taunt </b> .", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample52-example2"}
{"intent": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Give a friendly Beast +2/+2 and <b> Taunt </b> .", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample52-example3"}
{"intent": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Give a friendly Beast +2/+2 and <b> Taunt </b> .", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample52-example4"}
{"intent": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample53-example0"}
{"intent": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample53-example1"}
{"intent": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], "source": "sample53-example2"}
{"intent": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample53-example3"}
{"intent": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample53-example4"}
{"intent": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "example": "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample54-example0"}
{"intent": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample54-example1"}
{"intent": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], "source": "sample54-example2"}
{"intent": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "example": "class Hunters Mark ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hunter ` s Mark ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . set_health_to ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample54-example3"}
{"intent": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample54-example4"}
{"intent": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample55-example0"}
{"intent": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample55-example1"}
{"intent": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "example": "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample55-example2"}
{"intent": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "example": "class Divine Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Spirit ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( self . target . health )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample55-example3"}
{"intent": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample55-example4"}
{"intent": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample56-example0"}
{"intent": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample56-example1"}
{"intent": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample56-example2"}
{"intent": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample56-example3"}
{"intent": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample56-example4"}
{"intent": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample57-example0"}
{"intent": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample57-example1"}
{"intent": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample57-example2"}
{"intent": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample57-example3"}
{"intent": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample57-example4"}
{"intent": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample58-example0"}
{"intent": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "example": "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample58-example1"}
{"intent": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "example": "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample58-example2"}
{"intent": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample58-example3"}
{"intent": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample58-example4"}
{"intent": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample59-example0"}
{"intent": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample59-example1"}
{"intent": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample59-example2"}
{"intent": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample59-example3"}
{"intent": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample59-example4"}
{"intent": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample60-example0"}
{"intent": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample60-example1"}
{"intent": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample60-example2"}
{"intent": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample60-example3"}
{"intent": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample60-example4"}
{"intent": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "example": "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample61-example0"}
{"intent": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "example": "class Raid Leader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raid Leader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample61-example1"}
{"intent": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "example": "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample61-example2"}
{"intent": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample61-example3"}
{"intent": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "example": "class Ancient Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Watcher ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , buffs = [ Buff ( Cant Attack ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample61-example4"}
{"intent": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Silver Hand Recruit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Recruit ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample62-example0"}
{"intent": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], "source": "sample62-example1"}
{"intent": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample62-example2"}
{"intent": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample62-example3"}
{"intent": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample62-example4"}
{"intent": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample63-example0"}
{"intent": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample63-example1"}
{"intent": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample63-example2"}
{"intent": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample63-example3"}
{"intent": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample63-example4"}
{"intent": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample64-example0"}
{"intent": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample64-example1"}
{"intent": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample64-example2"}
{"intent": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample64-example3"}
{"intent": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample64-example4"}
{"intent": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample65-example0"}
{"intent": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample65-example1"}
{"intent": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample65-example2"}
{"intent": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample65-example3"}
{"intent": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "example": "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample65-example4"}
{"intent": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample66-example0"}
{"intent": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample66-example1"}
{"intent": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "source": "sample66-example2"}
{"intent": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], "source": "sample66-example3"}
{"intent": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "example": "class Divine Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Spirit ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( self . target . health )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample66-example4"}
{"intent": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "example": "class Thoughtsteal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thoughtsteal ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) if new_card : new_card = copy . copy ( new_card ) new_card . drawn = True if len ( player . hand ) < 10 : player . hand . append ( new_card ) new_card . player = player self . trigger ( ` card_drawn ` , new_card ) else : player . trigger ( ` card_destroyed ` , new_card )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample67-example0"}
{"intent": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "example": "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "source": "sample67-example1"}
{"intent": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "example": "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample67-example2"}
{"intent": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample67-example3"}
{"intent": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample67-example4"}
{"intent": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Target Dummy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Target Dummy ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample68-example0"}
{"intent": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample68-example1"}
{"intent": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], "source": "sample68-example2"}
{"intent": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample68-example3"}
{"intent": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample68-example4"}
{"intent": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b> Taunt </b> .", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], "source": "sample69-example0"}
{"intent": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b> Taunt </b> .", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], "source": "sample69-example1"}
{"intent": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b> Taunt </b> .", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], "source": "sample69-example2"}
{"intent": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b> Taunt </b> .", "example": "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0], "source": "sample69-example3"}
{"intent": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b> Taunt </b> .", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample69-example4"}
{"intent": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample70-example0"}
{"intent": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample70-example1"}
{"intent": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample70-example2"}
{"intent": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample70-example3"}
{"intent": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample70-example4"}
{"intent": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample71-example0"}
{"intent": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample71-example1"}
{"intent": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample71-example2"}
{"intent": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample71-example3"}
{"intent": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample71-example4"}
{"intent": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "example": "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample72-example0"}
{"intent": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "example": "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample72-example1"}
{"intent": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample72-example2"}
{"intent": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample72-example3"}
{"intent": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample72-example4"}
{"intent": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample73-example0"}
{"intent": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample73-example1"}
{"intent": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample73-example2"}
{"intent": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample73-example3"}
{"intent": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample73-example4"}
{"intent": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Murloc Scout.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample74-example0"}
{"intent": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Murloc Scout.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample74-example1"}
{"intent": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Murloc Scout.", "example": "class Nerubian Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian Egg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample74-example2"}
{"intent": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Murloc Scout.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample74-example3"}
{"intent": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Murloc Scout.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample74-example4"}
{"intent": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Deal 3 damage to the enemy hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample75-example0"}
{"intent": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Deal 3 damage to the enemy hero.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample75-example1"}
{"intent": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Deal 3 damage to the enemy hero.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample75-example2"}
{"intent": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Deal 3 damage to the enemy hero.", "example": "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample75-example3"}
{"intent": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Deal 3 damage to the enemy hero.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample75-example4"}
{"intent": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample76-example0"}
{"intent": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "example": "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample76-example1"}
{"intent": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample76-example2"}
{"intent": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample76-example3"}
{"intent": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample76-example4"}
{"intent": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Draw a card.", "example": "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample77-example0"}
{"intent": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Draw a card.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample77-example1"}
{"intent": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Draw a card.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample77-example2"}
{"intent": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Draw a card.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample77-example3"}
{"intent": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Battlecry : </b> Draw a card.", "example": "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample77-example4"}
{"intent": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample78-example0"}
{"intent": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample78-example1"}
{"intent": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Emerald Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emerald Drake ` , 4 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 7 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample78-example2"}
{"intent": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample78-example3"}
{"intent": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample78-example4"}
{"intent": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample79-example0"}
{"intent": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample79-example1"}
{"intent": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample79-example2"}
{"intent": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample79-example3"}
{"intent": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Spell Damage +1 </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample79-example4"}
{"intent": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample80-example0"}
{"intent": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample80-example1"}
{"intent": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample80-example2"}
{"intent": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "example": "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample80-example3"}
{"intent": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "example": "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample80-example4"}
{"intent": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Boar.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample81-example0"}
{"intent": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Boar.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample81-example1"}
{"intent": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Boar.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample81-example2"}
{"intent": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Boar.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample81-example3"}
{"intent": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 1/1 Boar.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample81-example4"}
{"intent": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample82-example0"}
{"intent": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample82-example1"}
{"intent": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample82-example2"}
{"intent": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample82-example3"}
{"intent": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], "source": "sample82-example4"}
{"intent": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample83-example0"}
{"intent": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample83-example1"}
{"intent": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample83-example2"}
{"intent": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample83-example3"}
{"intent": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "example": "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample83-example4"}
{"intent": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample84-example0"}
{"intent": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample84-example1"}
{"intent": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample84-example2"}
{"intent": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample84-example3"}
{"intent": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample84-example4"}
{"intent": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample85-example0"}
{"intent": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample85-example1"}
{"intent": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample85-example2"}
{"intent": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample85-example3"}
{"intent": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample85-example4"}
{"intent": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample86-example0"}
{"intent": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample86-example1"}
{"intent": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], "source": "sample86-example2"}
{"intent": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "example": "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample86-example3"}
{"intent": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample86-example4"}
{"intent": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample87-example0"}
{"intent": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "example": "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample87-example1"}
{"intent": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample87-example2"}
{"intent": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample87-example3"}
{"intent": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample87-example4"}
{"intent": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample88-example0"}
{"intent": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample88-example1"}
{"intent": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "example": "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample88-example2"}
{"intent": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "example": "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample88-example3"}
{"intent": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "example": "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample88-example4"}
{"intent": "Shadow Word : Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "example": "class Shadow Word Pain ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Pain ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample89-example0"}
{"intent": "Shadow Word : Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample89-example1"}
{"intent": "Shadow Word : Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "example": "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample89-example2"}
{"intent": "Shadow Word : Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample89-example3"}
{"intent": "Shadow Word : Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample89-example4"}
{"intent": "Shadow Word : Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "example": "class Shadow Word Death ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Death ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) > = 5 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample90-example0"}
{"intent": "Shadow Word : Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "example": "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample90-example1"}
{"intent": "Shadow Word : Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "example": "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample90-example2"}
{"intent": "Shadow Word : Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample90-example3"}
{"intent": "Shadow Word : Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample90-example4"}
{"intent": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +1/+1.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample91-example0"}
{"intent": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +1/+1.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample91-example1"}
{"intent": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +1/+1.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample91-example2"}
{"intent": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +1/+1.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample91-example3"}
{"intent": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +1/+1.", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample91-example4"}
{"intent": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample92-example0"}
{"intent": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample92-example1"}
{"intent": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample92-example2"}
{"intent": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample92-example3"}
{"intent": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample92-example4"}
{"intent": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "example": "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample93-example0"}
{"intent": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample93-example1"}
{"intent": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample93-example2"}
{"intent": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample93-example3"}
{"intent": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample93-example4"}
{"intent": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample94-example0"}
{"intent": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample94-example1"}
{"intent": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample94-example2"}
{"intent": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample94-example3"}
{"intent": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample94-example4"}
{"intent": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample95-example0"}
{"intent": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample95-example1"}
{"intent": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample95-example2"}
{"intent": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample95-example3"}
{"intent": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], "source": "sample95-example4"}
{"intent": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample96-example0"}
{"intent": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample96-example1"}
{"intent": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "example": "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample96-example2"}
{"intent": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample96-example3"}
{"intent": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample96-example4"}
{"intent": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample97-example0"}
{"intent": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample97-example1"}
{"intent": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample97-example2"}
{"intent": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "example": "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample97-example3"}
{"intent": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample97-example4"}
{"intent": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample98-example0"}
{"intent": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample98-example1"}
{"intent": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample98-example2"}
{"intent": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "example": "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample98-example3"}
{"intent": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample98-example4"}
{"intent": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "example": "class Scavenging Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scavenging Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample99-example0"}
{"intent": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample99-example1"}
{"intent": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample99-example2"}
{"intent": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample99-example3"}
{"intent": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "example": "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample99-example4"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample100-example0"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample100-example1"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Spirit Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spirit Wolf ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 2 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample100-example2"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample100-example3"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample100-example4"}
{"intent": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b> Charge </b>", "example": "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample101-example0"}
{"intent": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b> Charge </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample101-example1"}
{"intent": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b> Charge </b>", "example": "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample101-example2"}
{"intent": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b> Charge </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample101-example3"}
{"intent": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b> Charge </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample101-example4"}
{"intent": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 2 damage.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample102-example0"}
{"intent": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 2 damage.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample102-example1"}
{"intent": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 2 damage.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample102-example2"}
{"intent": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 2 damage.", "example": "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample102-example3"}
{"intent": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 2 damage.", "example": "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample102-example4"}
{"intent": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample103-example0"}
{"intent": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "example": "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample103-example1"}
{"intent": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample103-example2"}
{"intent": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], "source": "sample103-example3"}
{"intent": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "example": "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample103-example4"}
{"intent": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "example": "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample104-example0"}
{"intent": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample104-example1"}
{"intent": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "example": "class Kill Command ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kill Command ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) beasts = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x . card . minion_type is MINION_TYPE . BEAST ) if beasts is None : self . target . damage ( player . effective_spell_damage ( 3 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample104-example2"}
{"intent": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample104-example3"}
{"intent": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample104-example4"}
{"intent": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "example": "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample105-example0"}
{"intent": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "example": "class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grimscale Oracle ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample105-example1"}
{"intent": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample105-example2"}
{"intent": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample105-example3"}
{"intent": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "example": "class Junkbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Junkbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample105-example4"}
{"intent": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample106-example0"}
{"intent": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample106-example1"}
{"intent": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "example": "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample106-example2"}
{"intent": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "example": "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample106-example3"}
{"intent": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "example": "class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample106-example4"}
{"intent": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample107-example0"}
{"intent": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "example": "class Divine Favor ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Favor ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) difference = len ( game . other_player . hand ) - len ( player . hand ) for i in range ( 0 , difference ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], "source": "sample107-example1"}
{"intent": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "example": "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample107-example2"}
{"intent": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "example": "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample107-example3"}
{"intent": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "example": "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], "source": "sample107-example4"}
{"intent": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample108-example0"}
{"intent": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample108-example1"}
{"intent": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample108-example2"}
{"intent": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample108-example3"}
{"intent": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "example": "class Flame Leviathan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Leviathan ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Both Player ( ) ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample108-example4"}
{"intent": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b> Charge </b> .", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample109-example0"}
{"intent": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b> Charge </b> .", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample109-example1"}
{"intent": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b> Charge </b> .", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample109-example2"}
{"intent": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b> Charge </b> .", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample109-example3"}
{"intent": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b> Charge </b> .", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample109-example4"}
{"intent": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample110-example0"}
{"intent": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample110-example1"}
{"intent": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample110-example2"}
{"intent": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample110-example3"}
{"intent": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "example": "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], "source": "sample110-example4"}
{"intent": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample111-example0"}
{"intent": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample111-example1"}
{"intent": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Spirit Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spirit Wolf ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 2 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample111-example2"}
{"intent": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample111-example3"}
{"intent": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Taunt </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample111-example4"}
{"intent": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b> Charge </b> .", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample112-example0"}
{"intent": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b> Charge </b> .", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample112-example1"}
{"intent": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b> Charge </b> .", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample112-example2"}
{"intent": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b> Charge </b> .", "example": "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample112-example3"}
{"intent": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b> Charge </b> .", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample112-example4"}
{"intent": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample113-example0"}
{"intent": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample113-example1"}
{"intent": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample113-example2"}
{"intent": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample113-example3"}
{"intent": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample113-example4"}
{"intent": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample114-example0"}
{"intent": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample114-example1"}
{"intent": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "source": "sample114-example2"}
{"intent": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample114-example3"}
{"intent": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "example": "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample114-example4"}
{"intent": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample115-example0"}
{"intent": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample115-example1"}
{"intent": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample115-example2"}
{"intent": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample115-example3"}
{"intent": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], "source": "sample115-example4"}
{"intent": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0], "source": "sample116-example0"}
{"intent": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample116-example1"}
{"intent": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample116-example2"}
{"intent": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "example": "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample116-example3"}
{"intent": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], "source": "sample116-example4"}
{"intent": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Windfury </b> .", "example": "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample117-example0"}
{"intent": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Windfury </b> .", "example": "class Hex ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hex ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) frog = hearthbreaker . cards . minions . neutral . Frog ( ) minion = frog . create_minion ( None ) minion . card = frog self . target . replace ( minion )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample117-example1"}
{"intent": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Windfury </b> .", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample117-example2"}
{"intent": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Windfury </b> .", "example": "class Hand Of Protection ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hand of Protection ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . divine_shield = True", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "source": "sample117-example3"}
{"intent": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Windfury </b> .", "example": "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample117-example4"}
{"intent": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Windfury </b> .", "example": "class Argent Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Protector ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample118-example0"}
{"intent": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Windfury </b> .", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample118-example1"}
{"intent": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Windfury </b> .", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample118-example2"}
{"intent": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Windfury </b> .", "example": "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample118-example3"}
{"intent": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Windfury </b> .", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample118-example4"}
{"intent": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample119-example0"}
{"intent": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample119-example1"}
{"intent": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample119-example2"}
{"intent": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample119-example3"}
{"intent": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Charge </b>", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample119-example4"}
{"intent": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1 Attack and <b> Charge </b> .", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample120-example0"}
{"intent": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1 Attack and <b> Charge </b> .", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample120-example1"}
{"intent": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1 Attack and <b> Charge </b> .", "example": "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample120-example2"}
{"intent": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1 Attack and <b> Charge </b> .", "example": "class Kezan Mystic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kezan Mystic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample120-example3"}
{"intent": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1 Attack and <b> Charge </b> .", "example": "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample120-example4"}
{"intent": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b> Overload : (2) </b>", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample121-example0"}
{"intent": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b> Overload : (2) </b>", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample121-example1"}
{"intent": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b> Overload : (2) </b>", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample121-example2"}
{"intent": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b> Overload : (2) </b>", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample121-example3"}
{"intent": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b> Overload : (2) </b>", "example": "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], "source": "sample121-example4"}
{"intent": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Return this to your hand and summon a 4/4 Nerubian.", "example": "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample122-example0"}
{"intent": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Return this to your hand and summon a 4/4 Nerubian.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample122-example1"}
{"intent": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Return this to your hand and summon a 4/4 Nerubian.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample122-example2"}
{"intent": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Return this to your hand and summon a 4/4 Nerubian.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample122-example3"}
{"intent": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Return this to your hand and summon a 4/4 Nerubian.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample122-example4"}
{"intent": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b> Spell Damage </b> .", "example": "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample123-example0"}
{"intent": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b> Spell Damage </b> .", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample123-example1"}
{"intent": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b> Spell Damage </b> .", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample123-example2"}
{"intent": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b> Spell Damage </b> .", "example": "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample123-example3"}
{"intent": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b> Spell Damage </b> .", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample123-example4"}
{"intent": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample124-example0"}
{"intent": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample124-example1"}
{"intent": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample124-example2"}
{"intent": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample124-example3"}
{"intent": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample124-example4"}
{"intent": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample125-example0"}
{"intent": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample125-example1"}
{"intent": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "example": "class Warsong Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warsong Commander ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample125-example2"}
{"intent": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "example": "class Argent Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Protector ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample125-example3"}
{"intent": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "example": "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample125-example4"}
{"intent": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b> Inspire : </b> Can attack as normal this turn.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample126-example0"}
{"intent": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b> Inspire : </b> Can attack as normal this turn.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample126-example1"}
{"intent": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b> Inspire : </b> Can attack as normal this turn.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample126-example2"}
{"intent": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b> Inspire : </b> Can attack as normal this turn.", "example": "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample126-example3"}
{"intent": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b> Inspire : </b> Can attack as normal this turn.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample126-example4"}
{"intent": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, gain <b> Charge </b> .", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample127-example0"}
{"intent": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, gain <b> Charge </b> .", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample127-example1"}
{"intent": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, gain <b> Charge </b> .", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample127-example2"}
{"intent": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, gain <b> Charge </b> .", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample127-example3"}
{"intent": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Reveal a minion in each deck. If yours costs more, gain <b> Charge </b> .", "example": "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample127-example4"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample128-example0"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample128-example1"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample128-example2"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample128-example3"}
{"intent": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "example": "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample128-example4"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample129-example0"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample129-example1"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample129-example2"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample129-example3"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample129-example4"}
{"intent": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample130-example0"}
{"intent": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample130-example1"}
{"intent": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample130-example2"}
{"intent": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample130-example3"}
{"intent": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample130-example4"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample131-example0"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample131-example1"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample131-example2"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample131-example3"}
{"intent": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample131-example4"}
{"intent": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Inspire : </b> Restore 2 Health to your hero.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample132-example0"}
{"intent": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Inspire : </b> Restore 2 Health to your hero.", "example": "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample132-example1"}
{"intent": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Inspire : </b> Restore 2 Health to your hero.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample132-example2"}
{"intent": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Inspire : </b> Restore 2 Health to your hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample132-example3"}
{"intent": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Inspire : </b> Restore 2 Health to your hero.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample132-example4"}
{"intent": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Spell Damage +1 </b>", "example": "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample133-example0"}
{"intent": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Spell Damage +1 </b>", "example": "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample133-example1"}
{"intent": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Spell Damage +1 </b>", "example": "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample133-example2"}
{"intent": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Spell Damage +1 </b>", "example": "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample133-example3"}
{"intent": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Spell Damage +1 </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample133-example4"}
{"intent": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "source": "sample134-example0"}
{"intent": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample134-example1"}
{"intent": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample134-example2"}
{"intent": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "example": "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], "source": "sample134-example3"}
{"intent": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample134-example4"}
{"intent": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample135-example0"}
{"intent": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample135-example1"}
{"intent": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample135-example2"}
{"intent": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample135-example3"}
{"intent": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "example": "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample135-example4"}
{"intent": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry : </b> Restore 8 Health to your hero.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample136-example0"}
{"intent": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry : </b> Restore 8 Health to your hero.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample136-example1"}
{"intent": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry : </b> Restore 8 Health to your hero.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample136-example2"}
{"intent": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry : </b> Restore 8 Health to your hero.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample136-example3"}
{"intent": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry : </b> Restore 8 Health to your hero.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample136-example4"}
{"intent": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b> NL Can't be targeted by spells or Hero Powers.", "example": "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample137-example0"}
{"intent": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b> NL Can't be targeted by spells or Hero Powers.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample137-example1"}
{"intent": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b> NL Can't be targeted by spells or Hero Powers.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample137-example2"}
{"intent": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b> NL Can't be targeted by spells or Hero Powers.", "example": "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample137-example3"}
{"intent": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b> NL Can't be targeted by spells or Hero Powers.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample137-example4"}
{"intent": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "example": "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample138-example0"}
{"intent": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample138-example1"}
{"intent": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "example": "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample138-example2"}
{"intent": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample138-example3"}
{"intent": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample138-example4"}
{"intent": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Equip a random weapon for each player.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample139-example0"}
{"intent": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Equip a random weapon for each player.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample139-example1"}
{"intent": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Equip a random weapon for each player.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample139-example2"}
{"intent": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Equip a random weapon for each player.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample139-example3"}
{"intent": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Battlecry : </b> Equip a random weapon for each player.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample139-example4"}
{"intent": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample140-example0"}
{"intent": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample140-example1"}
{"intent": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], "source": "sample140-example2"}
{"intent": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample140-example3"}
{"intent": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample140-example4"}
{"intent": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to a random enemy minion.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample141-example0"}
{"intent": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to a random enemy minion.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample141-example1"}
{"intent": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to a random enemy minion.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample141-example2"}
{"intent": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to a random enemy minion.", "example": "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample141-example3"}
{"intent": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to a random enemy minion.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample141-example4"}
{"intent": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b> Deathrattle </b> : Deal 1-4 damage to a random enemy.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample142-example0"}
{"intent": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b> Deathrattle </b> : Deal 1-4 damage to a random enemy.", "example": "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], "source": "sample142-example1"}
{"intent": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b> Deathrattle </b> : Deal 1-4 damage to a random enemy.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample142-example2"}
{"intent": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b> Deathrattle </b> : Deal 1-4 damage to a random enemy.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample142-example3"}
{"intent": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b> Deathrattle </b> : Deal 1-4 damage to a random enemy.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample142-example4"}
{"intent": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "example": "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "source": "sample143-example0"}
{"intent": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "example": "class Implosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp - losion ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) had_shield = self . target . divine_shield self . target . damage ( amount , self ) if not had_shield : for i in range ( 0 , amount ) : imp = Imp ( ) imp . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], "source": "sample143-example1"}
{"intent": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], "source": "sample143-example2"}
{"intent": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample143-example3"}
{"intent": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "source": "sample143-example4"}
{"intent": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample144-example0"}
{"intent": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "example": "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample144-example1"}
{"intent": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample144-example2"}
{"intent": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample144-example3"}
{"intent": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "example": "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample144-example4"}
{"intent": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample145-example0"}
{"intent": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample145-example1"}
{"intent": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample145-example2"}
{"intent": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample145-example3"}
{"intent": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample145-example4"}
{"intent": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "example": "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample146-example0"}
{"intent": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample146-example1"}
{"intent": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "example": "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample146-example2"}
{"intent": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample146-example3"}
{"intent": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample146-example4"}
{"intent": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Add a <b> Spare Part </b> card to your hand.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample147-example0"}
{"intent": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Add a <b> Spare Part </b> card to your hand.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample147-example1"}
{"intent": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Add a <b> Spare Part </b> card to your hand.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample147-example2"}
{"intent": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Add a <b> Spare Part </b> card to your hand.", "example": "class Kezan Mystic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kezan Mystic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample147-example3"}
{"intent": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Add a <b> Spare Part </b> card to your hand.", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample147-example4"}
{"intent": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b> Divine Shield </b> .", "example": "class Oneeyed Cheat ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` One - eyed Cheat ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 4 , 1 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Give ( Stealth ( ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample148-example0"}
{"intent": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b> Divine Shield </b> .", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample148-example1"}
{"intent": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b> Divine Shield </b> .", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample148-example2"}
{"intent": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b> Divine Shield </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample148-example3"}
{"intent": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b> Divine Shield </b> .", "example": "class Kezan Mystic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kezan Mystic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample148-example4"}
{"intent": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "example": "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample149-example0"}
{"intent": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample149-example1"}
{"intent": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "example": "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample149-example2"}
{"intent": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample149-example3"}
{"intent": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample149-example4"}
{"intent": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give a random friendly minion <b> Divine Shield </b> and <b> Taunt </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample150-example0"}
{"intent": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give a random friendly minion <b> Divine Shield </b> and <b> Taunt </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample150-example1"}
{"intent": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give a random friendly minion <b> Divine Shield </b> and <b> Taunt </b> .", "example": "class Enhanceo Mechano ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Enhance - o Mechano ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample150-example2"}
{"intent": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give a random friendly minion <b> Divine Shield </b> and <b> Taunt </b> .", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample150-example3"}
{"intent": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give a random friendly minion <b> Divine Shield </b> and <b> Taunt </b> .", "example": "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample150-example4"}
{"intent": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample151-example0"}
{"intent": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample151-example1"}
{"intent": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "example": "class Goblin Sapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Sapper ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Change Attack ( 4 ) , Greater Than ( Count ( Card Selector ( Enemy Player ( ) ) ) , value = 5 ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample151-example2"}
{"intent": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], "source": "sample151-example3"}
{"intent": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample151-example4"}
{"intent": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "example": "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample152-example0"}
{"intent": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample152-example1"}
{"intent": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "example": "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample152-example2"}
{"intent": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "example": "class Power Overwhelming ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Overwhelming ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample152-example3"}
{"intent": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "example": "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample152-example4"}
{"intent": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Summon 5 Wisps; or Give a minion +5/+5 and <b> Taunt </b> .", "example": "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample153-example0"}
{"intent": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Summon 5 Wisps; or Give a minion +5/+5 and <b> Taunt </b> .", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample153-example1"}
{"intent": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Summon 5 Wisps; or Give a minion +5/+5 and <b> Taunt </b> .", "example": "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample153-example2"}
{"intent": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Summon 5 Wisps; or Give a minion +5/+5 and <b> Taunt </b> .", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample153-example3"}
{"intent": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Summon 5 Wisps; or Give a minion +5/+5 and <b> Taunt </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample153-example4"}
{"intent": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample154-example0"}
{"intent": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample154-example1"}
{"intent": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample154-example2"}
{"intent": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample154-example3"}
{"intent": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample154-example4"}
{"intent": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "example": "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample155-example0"}
{"intent": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "example": "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample155-example1"}
{"intent": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample155-example2"}
{"intent": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample155-example3"}
{"intent": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample155-example4"}
{"intent": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry </b> : Summon two 1/1 Boom Bots. <i>WARNING : Bots may explode.</i>", "example": "class Headcrack ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Headcrack ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) if player . cards_played > 0 : player . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Add Card ( self ) , Player Selector ( ) ) ) )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample156-example0"}
{"intent": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry </b> : Summon two 1/1 Boom Bots. <i>WARNING : Bots may explode.</i>", "example": "class Excess Mana ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Excess Mana ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . draw ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample156-example1"}
{"intent": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry </b> : Summon two 1/1 Boom Bots. <i>WARNING : Bots may explode.</i>", "example": "class Cenarius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cenarius ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample156-example2"}
{"intent": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry </b> : Summon two 1/1 Boom Bots. <i>WARNING : Bots may explode.</i>", "example": "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample156-example3"}
{"intent": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry </b> : Summon two 1/1 Boom Bots. <i>WARNING : Bots may explode.</i>", "example": "class Gallywixs Coin ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Coin ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 10 : player . mana + = 1", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample156-example4"}
{"intent": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample157-example0"}
{"intent": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample157-example1"}
{"intent": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample157-example2"}
{"intent": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample157-example3"}
{"intent": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "example": "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample157-example4"}
{"intent": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Beast, transform this minion into a 7/7.", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample158-example0"}
{"intent": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Beast, transform this minion into a 7/7.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample158-example1"}
{"intent": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Beast, transform this minion into a 7/7.", "example": "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample158-example2"}
{"intent": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Beast, transform this minion into a 7/7.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample158-example3"}
{"intent": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you have a Beast, transform this minion into a 7/7.", "example": "class Echoing Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echoing Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give Effect ( Effect ( Turn Ended ( ) , Action Tag ( Duplicate ( Self Selector ( ) ) , Player Selector ( ) ) ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample158-example4"}
{"intent": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Windfury, Overload : (1) </b> NL 50% chance to attack the wrong enemy.", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample159-example0"}
{"intent": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Windfury, Overload : (1) </b> NL 50% chance to attack the wrong enemy.", "example": "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample159-example1"}
{"intent": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Windfury, Overload : (1) </b> NL 50% chance to attack the wrong enemy.", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample159-example2"}
{"intent": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Windfury, Overload : (1) </b> NL 50% chance to attack the wrong enemy.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample159-example3"}
{"intent": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Windfury, Overload : (1) </b> NL 50% chance to attack the wrong enemy.", "example": "class Lord Jaraxxus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord Jaraxxus ` , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace Hero With Minion ( Jaraxxus ( ) ) , Hero Selector ( ) ) , Battlecry ( Remove ( ) , Self Selector ( ) ) , Battlecry ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 15 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample159-example4"}
{"intent": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Battlecry : </b> Give your other minions <b> Windfury </b> , <b> Taunt </b> , or <b> Divine Shield </b> . NL <i>(at random)</i>", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample160-example0"}
{"intent": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Battlecry : </b> Give your other minions <b> Windfury </b> , <b> Taunt </b> , or <b> Divine Shield </b> . NL <i>(at random)</i>", "example": "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample160-example1"}
{"intent": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Battlecry : </b> Give your other minions <b> Windfury </b> , <b> Taunt </b> , or <b> Divine Shield </b> . NL <i>(at random)</i>", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample160-example2"}
{"intent": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Battlecry : </b> Give your other minions <b> Windfury </b> , <b> Taunt </b> , or <b> Divine Shield </b> . NL <i>(at random)</i>", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample160-example3"}
{"intent": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b> Battlecry : </b> Give your other minions <b> Windfury </b> , <b> Taunt </b> , or <b> Divine Shield </b> . NL <i>(at random)</i>", "example": "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample160-example4"}
{"intent": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to all minions.", "example": "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample161-example0"}
{"intent": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to all minions.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample161-example1"}
{"intent": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to all minions.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample161-example2"}
{"intent": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to all minions.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample161-example3"}
{"intent": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to all minions.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample161-example4"}
{"intent": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b> Deathrattles </b> on your minions.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample162-example0"}
{"intent": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b> Deathrattles </b> on your minions.", "example": "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample162-example1"}
{"intent": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b> Deathrattles </b> on your minions.", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample162-example2"}
{"intent": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b> Deathrattles </b> on your minions.", "example": "class Finicky Cloakfield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finicky Cloakfield ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1], "source": "sample162-example3"}
{"intent": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b> Deathrattles </b> on your minions.", "example": "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], "source": "sample162-example4"}
{"intent": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample163-example0"}
{"intent": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample163-example1"}
{"intent": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "example": "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample163-example2"}
{"intent": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample163-example3"}
{"intent": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample163-example4"}
{"intent": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "example": "class Jeeves ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jeeves ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Draw ( Difference ( Count ( Card Selector ( players = Current Player ( ) ) ) , value = 3 ) ) , Player Selector ( Current Player ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample164-example0"}
{"intent": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "example": "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample164-example1"}
{"intent": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "example": "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample164-example2"}
{"intent": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample164-example3"}
{"intent": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample164-example4"}
{"intent": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b> Stealth </b> until your next turn.", "example": "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample165-example0"}
{"intent": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b> Stealth </b> until your next turn.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample165-example1"}
{"intent": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b> Stealth </b> until your next turn.", "example": "class Feign Death ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feign Death ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in sorted ( player . minions , key = lambda m : m . born ) : for deathrattle in minion . deathrattle : deathrattle . do ( minion ) if player . double_deathrattle : for deathrattle in minion . deathrattle : deathrattle . do ( minion )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample165-example2"}
{"intent": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b> Stealth </b> until your next turn.", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], "source": "sample165-example3"}
{"intent": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b> Stealth </b> until your next turn.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample165-example4"}
{"intent": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], "source": "sample166-example0"}
{"intent": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample166-example1"}
{"intent": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample166-example2"}
{"intent": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample166-example3"}
{"intent": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample166-example4"}
{"intent": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample167-example0"}
{"intent": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "example": "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample167-example1"}
{"intent": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample167-example2"}
{"intent": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "example": "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample167-example3"}
{"intent": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "source": "sample167-example4"}
{"intent": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample168-example0"}
{"intent": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample168-example1"}
{"intent": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample168-example2"}
{"intent": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample168-example3"}
{"intent": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample168-example4"}
{"intent": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample169-example0"}
{"intent": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample169-example1"}
{"intent": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample169-example2"}
{"intent": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample169-example3"}
{"intent": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample169-example4"}
{"intent": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample170-example0"}
{"intent": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample170-example1"}
{"intent": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample170-example2"}
{"intent": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "example": "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample170-example3"}
{"intent": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "example": "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample170-example4"}
{"intent": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample171-example0"}
{"intent": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample171-example1"}
{"intent": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "source": "sample171-example2"}
{"intent": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample171-example3"}
{"intent": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "example": "class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample171-example4"}
{"intent": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample172-example0"}
{"intent": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "example": "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample172-example1"}
{"intent": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "example": "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample172-example2"}
{"intent": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "example": "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample172-example3"}
{"intent": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample172-example4"}
{"intent": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample173-example0"}
{"intent": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample173-example1"}
{"intent": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample173-example2"}
{"intent": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample173-example3"}
{"intent": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample173-example4"}
{"intent": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a random friendly minion +1 Attack.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample174-example0"}
{"intent": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a random friendly minion +1 Attack.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample174-example1"}
{"intent": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a random friendly minion +1 Attack.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample174-example2"}
{"intent": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a random friendly minion +1 Attack.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample174-example3"}
{"intent": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a random friendly minion +1 Attack.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample174-example4"}
{"intent": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Taunt </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample175-example0"}
{"intent": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Taunt </b>", "example": "class Grommash Hellscream ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grommash Hellscream ` , 8 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 9 , charge = True , enrage = [ Aura ( Change Attack ( 6 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample175-example1"}
{"intent": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Taunt </b>", "example": "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample175-example2"}
{"intent": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Taunt </b>", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample175-example3"}
{"intent": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> NL <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample175-example4"}
{"intent": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you have a Mech, deal 4 damage randomly split among all enemies.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample176-example0"}
{"intent": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you have a Mech, deal 4 damage randomly split among all enemies.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample176-example1"}
{"intent": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you have a Mech, deal 4 damage randomly split among all enemies.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample176-example2"}
{"intent": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you have a Mech, deal 4 damage randomly split among all enemies.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample176-example3"}
{"intent": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If you have a Mech, deal 4 damage randomly split among all enemies.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample176-example4"}
{"intent": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "example": "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample177-example0"}
{"intent": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample177-example1"}
{"intent": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample177-example2"}
{"intent": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample177-example3"}
{"intent": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample177-example4"}
{"intent": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Give each player a Mana Crystal; or Each player draws a card.", "example": "class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample178-example0"}
{"intent": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Give each player a Mana Crystal; or Each player draws a card.", "example": "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample178-example1"}
{"intent": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Give each player a Mana Crystal; or Each player draws a card.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample178-example2"}
{"intent": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Give each player a Mana Crystal; or Each player draws a card.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample178-example3"}
{"intent": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Give each player a Mana Crystal; or Each player draws a card.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample178-example4"}
{"intent": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy a Beast.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample179-example0"}
{"intent": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy a Beast.", "example": "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample179-example1"}
{"intent": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy a Beast.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample179-example2"}
{"intent": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy a Beast.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample179-example3"}
{"intent": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy a Beast.", "example": "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample179-example4"}
{"intent": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample180-example0"}
{"intent": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "example": "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample180-example1"}
{"intent": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample180-example2"}
{"intent": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample180-example3"}
{"intent": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "example": "class Gahzrilla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gahz ` rilla ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action Tag ( Give ( Buff ( Double Attack ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample180-example4"}
{"intent": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, restore 4 health to your hero.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample181-example0"}
{"intent": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, restore 4 health to your hero.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample181-example1"}
{"intent": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, restore 4 health to your hero.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample181-example2"}
{"intent": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, restore 4 health to your hero.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample181-example3"}
{"intent": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, restore 4 health to your hero.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample181-example4"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample182-example0"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample182-example1"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample182-example2"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample182-example3"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample182-example4"}
{"intent": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "example": "class Bouncing Blade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bouncing Blade ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 1 def use ( self , player , game ) : super ( ) . use ( player , game ) targets = player . minions [ : ] + player . opponent . minions [ : ] if len ( targets ) : for bounces in range ( 80 ) : target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 1 ) , self ) if target . dead : break", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], "source": "sample183-example0"}
{"intent": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "source": "sample183-example1"}
{"intent": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample183-example2"}
{"intent": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], "source": "sample183-example3"}
{"intent": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "source": "sample183-example4"}
{"intent": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample184-example0"}
{"intent": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "example": "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample184-example1"}
{"intent": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample184-example2"}
{"intent": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample184-example3"}
{"intent": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample184-example4"}
{"intent": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample185-example0"}
{"intent": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample185-example1"}
{"intent": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample185-example2"}
{"intent": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample185-example3"}
{"intent": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "example": "class Scavenging Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scavenging Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample185-example4"}
{"intent": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Take control of a random enemy <b> Secret </b> .", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample186-example0"}
{"intent": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Take control of a random enemy <b> Secret </b> .", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample186-example1"}
{"intent": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Take control of a random enemy <b> Secret </b> .", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample186-example2"}
{"intent": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Take control of a random enemy <b> Secret </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample186-example3"}
{"intent": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Take control of a random enemy <b> Secret </b> .", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample186-example4"}
{"intent": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Gain +1 Attack for each other Beast you have.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample187-example0"}
{"intent": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Gain +1 Attack for each other Beast you have.", "example": "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample187-example1"}
{"intent": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Gain +1 Attack for each other Beast you have.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample187-example2"}
{"intent": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Gain +1 Attack for each other Beast you have.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample187-example3"}
{"intent": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Gain +1 Attack for each other Beast you have.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample187-example4"}
{"intent": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample188-example0"}
{"intent": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "example": "class Call Pet ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Call Pet ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : def reduce_cost ( card ) : if card . is_minion ( ) and card . minion_type = = MINION_TYPE . BEAST : card . add_buff ( Buff ( Mana Change ( - 4 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], "source": "sample188-example1"}
{"intent": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample188-example2"}
{"intent": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "example": "class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample188-example3"}
{"intent": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample188-example4"}
{"intent": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample189-example0"}
{"intent": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample189-example1"}
{"intent": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample189-example2"}
{"intent": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample189-example3"}
{"intent": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample189-example4"}
{"intent": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Battlecry : </b> Gain +1/+1 for each enemy <b> Deathrattle </b> minion.", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample190-example0"}
{"intent": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Battlecry : </b> Gain +1/+1 for each enemy <b> Deathrattle </b> minion.", "example": "class Al Akir The Windlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Al ` Akir the Windlord ` , 8 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 5 , windfury = True , charge = True , divine_shield = True , taunt = True )", "tag": [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample190-example1"}
{"intent": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Battlecry : </b> Gain +1/+1 for each enemy <b> Deathrattle </b> minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample190-example2"}
{"intent": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Battlecry : </b> Gain +1/+1 for each enemy <b> Deathrattle </b> minion.", "example": "class Tirion Fordring ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tirion Fordring ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample190-example3"}
{"intent": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Battlecry : </b> Gain +1/+1 for each enemy <b> Deathrattle </b> minion.", "example": "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample190-example4"}
{"intent": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample191-example0"}
{"intent": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample191-example1"}
{"intent": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample191-example2"}
{"intent": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample191-example3"}
{"intent": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample191-example4"}
{"intent": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Shuffle this minion into your deck.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample192-example0"}
{"intent": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Shuffle this minion into your deck.", "example": "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample192-example1"}
{"intent": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Shuffle this minion into your deck.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample192-example2"}
{"intent": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Shuffle this minion into your deck.", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample192-example3"}
{"intent": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Shuffle this minion into your deck.", "example": "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample192-example4"}
{"intent": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b> Spare Part </b> card to your hand.", "example": "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample193-example0"}
{"intent": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b> Spare Part </b> card to your hand.", "example": "class Alarmo Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alarm - o - Bot ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Swap With Hand ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample193-example1"}
{"intent": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b> Spare Part </b> card to your hand.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample193-example2"}
{"intent": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b> Spare Part </b> card to your hand.", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample193-example3"}
{"intent": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b> Spare Part </b> card to your hand.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample193-example4"}
{"intent": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Give each player a <b> Spare Part. </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample194-example0"}
{"intent": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Give each player a <b> Spare Part. </b>", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample194-example1"}
{"intent": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Give each player a <b> Spare Part. </b>", "example": "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample194-example2"}
{"intent": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Give each player a <b> Spare Part. </b>", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample194-example3"}
{"intent": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Give each player a <b> Spare Part. </b>", "example": "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample194-example4"}
{"intent": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "example": "class Sorcerers Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sorcerer ` s Apprentice ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample195-example0"}
{"intent": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample195-example1"}
{"intent": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample195-example2"}
{"intent": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "example": "class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample195-example3"}
{"intent": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "example": "class Junkbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Junkbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample195-example4"}
{"intent": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample196-example0"}
{"intent": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "example": "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample196-example1"}
{"intent": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "example": "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample196-example2"}
{"intent": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "example": "class Wee Spellstopper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wee Spellstopper ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample196-example3"}
{"intent": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "example": "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample196-example4"}
{"intent": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give your other Mechs +2 Attack.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample197-example0"}
{"intent": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give your other Mechs +2 Attack.", "example": "class Cobalt Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobalt Guardian ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( Divine Shield ( ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample197-example1"}
{"intent": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give your other Mechs +2 Attack.", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], "source": "sample197-example2"}
{"intent": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give your other Mechs +2 Attack.", "example": "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample197-example3"}
{"intent": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give your other Mechs +2 Attack.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample197-example4"}
{"intent": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample198-example0"}
{"intent": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "example": "class Gruul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gruul ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample198-example1"}
{"intent": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample198-example2"}
{"intent": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "example": "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample198-example3"}
{"intent": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample198-example4"}
{"intent": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample199-example0"}
{"intent": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "example": "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample199-example1"}
{"intent": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample199-example2"}
{"intent": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample199-example3"}
{"intent": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "example": "class Ragnaros The Firelord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ragnaros the Firelord ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 8 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant Attack ( ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample199-example4"}
{"intent": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "example": "class Ragnaros The Firelord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ragnaros the Firelord ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 8 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant Attack ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample200-example0"}
{"intent": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample200-example1"}
{"intent": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample200-example2"}
{"intent": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "example": "class Sword Of Justice ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sword of Justice ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 5 , effects = [ Effect ( Minion Summoned ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Target Selector ( ) ) ) , Effect ( Minion Summoned ( ) , Action Tag ( Decrease Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample200-example3"}
{"intent": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample200-example4"}
{"intent": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "example": "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], "source": "sample201-example0"}
{"intent": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample201-example1"}
{"intent": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample201-example2"}
{"intent": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample201-example3"}
{"intent": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], "source": "sample201-example4"}
{"intent": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 4 random Murlocs to your hand. <b> Overload : </b> (3)", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample202-example0"}
{"intent": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 4 random Murlocs to your hand. <b> Overload : </b> (3)", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample202-example1"}
{"intent": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 4 random Murlocs to your hand. <b> Overload : </b> (3)", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample202-example2"}
{"intent": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 4 random Murlocs to your hand. <b> Overload : </b> (3)", "example": "class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample202-example3"}
{"intent": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 4 random Murlocs to your hand. <b> Overload : </b> (3)", "example": "class Fireguard Destroyer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireguard Destroyer ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Random Amount ( 1 , 4 ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample202-example4"}
{"intent": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Ogre Warmaul ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Warmaul ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample203-example0"}
{"intent": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample203-example1"}
{"intent": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample203-example2"}
{"intent": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample203-example3"}
{"intent": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample203-example4"}
{"intent": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b> NL 50% chance to attack the wrong enemy.", "example": "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample204-example0"}
{"intent": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b> NL 50% chance to attack the wrong enemy.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample204-example1"}
{"intent": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b> NL 50% chance to attack the wrong enemy.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample204-example2"}
{"intent": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b> NL 50% chance to attack the wrong enemy.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample204-example3"}
{"intent": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b> NL 50% chance to attack the wrong enemy.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample204-example4"}
{"intent": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample205-example0"}
{"intent": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample205-example1"}
{"intent": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample205-example2"}
{"intent": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample205-example3"}
{"intent": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample205-example4"}
{"intent": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b> Stealth </b> .", "example": "class Cobalt Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobalt Guardian ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( Divine Shield ( ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample206-example0"}
{"intent": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b> Stealth </b> .", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample206-example1"}
{"intent": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b> Stealth </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample206-example2"}
{"intent": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b> Stealth </b> .", "example": "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample206-example3"}
{"intent": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b> Stealth </b> .", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample206-example4"}
{"intent": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a random 2-Cost minion.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample207-example0"}
{"intent": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a random 2-Cost minion.", "example": "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample207-example1"}
{"intent": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a random 2-Cost minion.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample207-example2"}
{"intent": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a random 2-Cost minion.", "example": "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample207-example3"}
{"intent": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a random 2-Cost minion.", "example": "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample207-example4"}
{"intent": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample208-example0"}
{"intent": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample208-example1"}
{"intent": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample208-example2"}
{"intent": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample208-example3"}
{"intent": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample208-example4"}
{"intent": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give your Silver Hand Recruits +2/+2.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample209-example0"}
{"intent": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give your Silver Hand Recruits +2/+2.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample209-example1"}
{"intent": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give your Silver Hand Recruits +2/+2.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample209-example2"}
{"intent": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give your Silver Hand Recruits +2/+2.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample209-example3"}
{"intent": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Give your Silver Hand Recruits +2/+2.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample209-example4"}
{"intent": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Transform a friendly minion into a random minion with the same Cost.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample210-example0"}
{"intent": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Transform a friendly minion into a random minion with the same Cost.", "example": "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample210-example1"}
{"intent": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Transform a friendly minion into a random minion with the same Cost.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample210-example2"}
{"intent": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Transform a friendly minion into a random minion with the same Cost.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample210-example3"}
{"intent": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Transform a friendly minion into a random minion with the same Cost.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample210-example4"}
{"intent": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], "source": "sample211-example0"}
{"intent": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample211-example1"}
{"intent": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample211-example2"}
{"intent": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "example": "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "source": "sample211-example3"}
{"intent": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], "source": "sample211-example4"}
{"intent": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "example": "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample212-example0"}
{"intent": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample212-example1"}
{"intent": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample212-example2"}
{"intent": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], "source": "sample212-example3"}
{"intent": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "example": "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample212-example4"}
{"intent": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b> Taunt </b> .", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample213-example0"}
{"intent": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b> Taunt </b> .", "example": "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample213-example1"}
{"intent": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b> Taunt </b> .", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample213-example2"}
{"intent": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b> Taunt </b> .", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample213-example3"}
{"intent": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b> Taunt </b> .", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample213-example4"}
{"intent": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b> Combo </b> : And your opponent's weapon.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample214-example0"}
{"intent": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b> Combo </b> : And your opponent's weapon.", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], "source": "sample214-example1"}
{"intent": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b> Combo </b> : And your opponent's weapon.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], "source": "sample214-example2"}
{"intent": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b> Combo </b> : And your opponent's weapon.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample214-example3"}
{"intent": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b> Combo </b> : And your opponent's weapon.", "example": "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "source": "sample214-example4"}
{"intent": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "example": "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample215-example0"}
{"intent": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "example": "class Core Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Hound ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample215-example1"}
{"intent": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample215-example2"}
{"intent": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample215-example3"}
{"intent": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample215-example4"}
{"intent": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample216-example0"}
{"intent": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample216-example1"}
{"intent": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], "source": "sample216-example2"}
{"intent": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample216-example3"}
{"intent": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "example": "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample216-example4"}
{"intent": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 3 damage to each hero.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample217-example0"}
{"intent": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 3 damage to each hero.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample217-example1"}
{"intent": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 3 damage to each hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample217-example2"}
{"intent": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 3 damage to each hero.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample217-example3"}
{"intent": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 3 damage to each hero.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample217-example4"}
{"intent": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample218-example0"}
{"intent": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample218-example1"}
{"intent": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample218-example2"}
{"intent": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "example": "class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample218-example3"}
{"intent": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample218-example4"}
{"intent": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample219-example0"}
{"intent": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample219-example1"}
{"intent": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample219-example2"}
{"intent": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample219-example3"}
{"intent": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample219-example4"}
{"intent": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Gain 5 Armor.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample220-example0"}
{"intent": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Gain 5 Armor.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample220-example1"}
{"intent": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Gain 5 Armor.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample220-example2"}
{"intent": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Gain 5 Armor.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample220-example3"}
{"intent": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Gain 5 Armor.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample220-example4"}
{"intent": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample221-example0"}
{"intent": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample221-example1"}
{"intent": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample221-example2"}
{"intent": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample221-example3"}
{"intent": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample221-example4"}
{"intent": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion -2 Attack this turn.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample222-example0"}
{"intent": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion -2 Attack this turn.", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample222-example1"}
{"intent": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion -2 Attack this turn.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample222-example2"}
{"intent": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion -2 Attack this turn.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample222-example3"}
{"intent": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion -2 Attack this turn.", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample222-example4"}
{"intent": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample223-example0"}
{"intent": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample223-example1"}
{"intent": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample223-example2"}
{"intent": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample223-example3"}
{"intent": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "example": "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample223-example4"}
{"intent": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Water Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Water Elemental ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample224-example0"}
{"intent": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample224-example1"}
{"intent": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample224-example2"}
{"intent": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample224-example3"}
{"intent": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Freeze </b> any character damaged by this minion.", "example": "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample224-example4"}
{"intent": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Spell Damage +1 </b>", "example": "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample225-example0"}
{"intent": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Spell Damage +1 </b>", "example": "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample225-example1"}
{"intent": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Spell Damage +1 </b>", "example": "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample225-example2"}
{"intent": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Spell Damage +1 </b>", "example": "class Mirror Image ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Image ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample225-example3"}
{"intent": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Spell Damage +1 </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample225-example4"}
{"intent": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample226-example0"}
{"intent": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample226-example1"}
{"intent": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample226-example2"}
{"intent": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample226-example3"}
{"intent": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample226-example4"}
{"intent": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample227-example0"}
{"intent": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], "source": "sample227-example1"}
{"intent": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample227-example2"}
{"intent": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample227-example3"}
{"intent": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample227-example4"}
{"intent": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample228-example0"}
{"intent": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample228-example1"}
{"intent": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample228-example2"}
{"intent": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample228-example3"}
{"intent": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample228-example4"}
{"intent": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Mirror Image ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Image ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample229-example0"}
{"intent": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample229-example1"}
{"intent": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample229-example2"}
{"intent": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Force Tank MAX ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Force - Tank MAX ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 7 , divine_shield = True )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample229-example3"}
{"intent": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Ravenholdt Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ravenholdt Assassin ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 7 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample229-example4"}
{"intent": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "example": "class Dream ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dream ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample230-example0"}
{"intent": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample230-example1"}
{"intent": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample230-example2"}
{"intent": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], "source": "sample230-example3"}
{"intent": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample230-example4"}
{"intent": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b> Combo : </b> Give a random friendly minion +3 Attack.", "example": "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample231-example0"}
{"intent": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b> Combo : </b> Give a random friendly minion +3 Attack.", "example": "class Perditions Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Perdition ` s Blade ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample231-example1"}
{"intent": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b> Combo : </b> Give a random friendly minion +3 Attack.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "source": "sample231-example2"}
{"intent": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b> Combo : </b> Give a random friendly minion +3 Attack.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample231-example3"}
{"intent": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b> Combo : </b> Give a random friendly minion +3 Attack.", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], "source": "sample231-example4"}
{"intent": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample232-example0"}
{"intent": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample232-example1"}
{"intent": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample232-example2"}
{"intent": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "example": "class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample232-example3"}
{"intent": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "example": "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample232-example4"}
{"intent": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], "source": "sample233-example0"}
{"intent": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample233-example1"}
{"intent": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample233-example2"}
{"intent": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1], "source": "sample233-example3"}
{"intent": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "example": "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], "source": "sample233-example4"}
{"intent": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "example": "class Illidan Stormrage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illidan Stormrage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Summon ( Flame Of Azzinoth ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample234-example0"}
{"intent": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "example": "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample234-example1"}
{"intent": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample234-example2"}
{"intent": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "example": "class Ragnaros The Firelord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ragnaros the Firelord ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 8 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant Attack ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample234-example3"}
{"intent": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "example": "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample234-example4"}
{"intent": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample235-example0"}
{"intent": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample235-example1"}
{"intent": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "example": "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample235-example2"}
{"intent": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "example": "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample235-example3"}
{"intent": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "example": "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample235-example4"}
{"intent": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly Mech +4 Health.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample236-example0"}
{"intent": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly Mech +4 Health.", "example": "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample236-example1"}
{"intent": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly Mech +4 Health.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample236-example2"}
{"intent": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly Mech +4 Health.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample236-example3"}
{"intent": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly Mech +4 Health.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample236-example4"}
{"intent": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Mega-Windfury </b> <i>(Can attack four times a turn.)</i>", "example": "class Force Tank MAX ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Force - Tank MAX ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 7 , divine_shield = True )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample237-example0"}
{"intent": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Mega-Windfury </b> <i>(Can attack four times a turn.)</i>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample237-example1"}
{"intent": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Mega-Windfury </b> <i>(Can attack four times a turn.)</i>", "example": "class Enhanceo Mechano ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Enhance - o Mechano ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample237-example2"}
{"intent": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Mega-Windfury </b> <i>(Can attack four times a turn.)</i>", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample237-example3"}
{"intent": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Mega-Windfury </b> <i>(Can attack four times a turn.)</i>", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample237-example4"}
{"intent": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b> Spell Damage +1 </b> .", "example": "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample238-example0"}
{"intent": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b> Spell Damage +1 </b> .", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample238-example1"}
{"intent": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b> Spell Damage +1 </b> .", "example": "class Unleash The Hounds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unleash the Hounds ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for target in hearthbreaker . targeting . find_enemy_minion_spell_target ( player . game , lambda x : True ) : hound = hearthbreaker . cards . minions . hunter . Hound ( ) hound . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1 and len ( player . minions ) < 7", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample238-example2"}
{"intent": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b> Spell Damage +1 </b> .", "example": "class Arcane Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Blast ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 + player . spell_damage ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample238-example3"}
{"intent": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b> Spell Damage +1 </b> .", "example": "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], "source": "sample238-example4"}
{"intent": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample239-example0"}
{"intent": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "example": "class Mana Tide Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Tide Totem ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample239-example1"}
{"intent": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample239-example2"}
{"intent": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "example": "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample239-example3"}
{"intent": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample239-example4"}
{"intent": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "example": "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample240-example0"}
{"intent": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample240-example1"}
{"intent": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "example": "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample240-example2"}
{"intent": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample240-example3"}
{"intent": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample240-example4"}
{"intent": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "example": "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample241-example0"}
{"intent": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample241-example1"}
{"intent": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "example": "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample241-example2"}
{"intent": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample241-example3"}
{"intent": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "example": "class Reversing Switch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reversing Switch ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) temp_attack = self . target . calculate_attack ( ) temp_health = self . target . health if temp_attack = = 0 : self . target . die ( None ) else : self . target . set_attack_to ( temp_health ) self . target . set_health_to ( temp_attack )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample241-example4"}
{"intent": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample242-example0"}
{"intent": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample242-example1"}
{"intent": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample242-example2"}
{"intent": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample242-example3"}
{"intent": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample242-example4"}
{"intent": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Return a random friendly minion to your hand.", "example": "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "source": "sample243-example0"}
{"intent": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Return a random friendly minion to your hand.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample243-example1"}
{"intent": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Return a random friendly minion to your hand.", "example": "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample243-example2"}
{"intent": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Return a random friendly minion to your hand.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample243-example3"}
{"intent": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Return a random friendly minion to your hand.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample243-example4"}
{"intent": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, give a random friendly minion +3/+2.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample244-example0"}
{"intent": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, give a random friendly minion +3/+2.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample244-example1"}
{"intent": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, give a random friendly minion +3/+2.", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], "source": "sample244-example2"}
{"intent": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, give a random friendly minion +3/+2.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], "source": "sample244-example3"}
{"intent": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When one of your minions dies, give a random friendly minion +3/+2.", "example": "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample244-example4"}
{"intent": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b> Deathrattles </b> twice.", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample245-example0"}
{"intent": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b> Deathrattles </b> twice.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample245-example1"}
{"intent": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b> Deathrattles </b> twice.", "example": "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample245-example2"}
{"intent": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b> Deathrattles </b> twice.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample245-example3"}
{"intent": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b> Deathrattles </b> twice.", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample245-example4"}
{"intent": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Your opponent draws a card.", "example": "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample246-example0"}
{"intent": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Your opponent draws a card.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample246-example1"}
{"intent": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Your opponent draws a card.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample246-example2"}
{"intent": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Your opponent draws a card.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample246-example3"}
{"intent": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Your opponent draws a card.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample246-example4"}
{"intent": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Give a random friendly minion +3 Health.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample247-example0"}
{"intent": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Give a random friendly minion +3 Health.", "example": "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample247-example1"}
{"intent": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Give a random friendly minion +3 Health.", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample247-example2"}
{"intent": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Give a random friendly minion +3 Health.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample247-example3"}
{"intent": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Give a random friendly minion +3 Health.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample247-example4"}
{"intent": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When a friendly minion dies, put 2 copies of it into your hand.", "example": "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample248-example0"}
{"intent": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When a friendly minion dies, put 2 copies of it into your hand.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample248-example1"}
{"intent": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When a friendly minion dies, put 2 copies of it into your hand.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample248-example2"}
{"intent": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When a friendly minion dies, put 2 copies of it into your hand.", "example": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample248-example3"}
{"intent": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When a friendly minion dies, put 2 copies of it into your hand.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample248-example4"}
{"intent": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Summon an exact copy of this minion at the end of the turn.", "example": "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample249-example0"}
{"intent": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Summon an exact copy of this minion at the end of the turn.", "example": "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample249-example1"}
{"intent": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Summon an exact copy of this minion at the end of the turn.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample249-example2"}
{"intent": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Summon an exact copy of this minion at the end of the turn.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample249-example3"}
{"intent": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Summon an exact copy of this minion at the end of the turn.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample249-example4"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample250-example0"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Emerald Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emerald Drake ` , 4 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 7 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample250-example1"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample250-example2"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], "source": "sample250-example3"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample250-example4"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Stalagg also died this game, summon Thaddius.", "example": "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample251-example0"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Stalagg also died this game, summon Thaddius.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample251-example1"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Stalagg also died this game, summon Thaddius.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample251-example2"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Stalagg also died this game, summon Thaddius.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample251-example3"}
{"intent": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Stalagg also died this game, summon Thaddius.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample251-example4"}
{"intent": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Summon two 1/1 Spectral Spiders.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample252-example0"}
{"intent": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Summon two 1/1 Spectral Spiders.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample252-example1"}
{"intent": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Summon two 1/1 Spectral Spiders.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample252-example2"}
{"intent": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Summon two 1/1 Spectral Spiders.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample252-example3"}
{"intent": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Summon two 1/1 Spectral Spiders.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample252-example4"}
{"intent": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample253-example0"}
{"intent": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "example": "class Jeeves ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jeeves ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Draw ( Difference ( Count ( Card Selector ( players = Current Player ( ) ) ) , value = 3 ) ) , Player Selector ( Current Player ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample253-example1"}
{"intent": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample253-example2"}
{"intent": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample253-example3"}
{"intent": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample253-example4"}
{"intent": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (5) more next turn.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample254-example0"}
{"intent": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (5) more next turn.", "example": "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample254-example1"}
{"intent": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (5) more next turn.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample254-example2"}
{"intent": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (5) more next turn.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample254-example3"}
{"intent": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (5) more next turn.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample254-example4"}
{"intent": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Put a <b> Secret </b> from your deck into the battlefield.", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample255-example0"}
{"intent": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Put a <b> Secret </b> from your deck into the battlefield.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample255-example1"}
{"intent": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Put a <b> Secret </b> from your deck into the battlefield.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample255-example2"}
{"intent": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Put a <b> Secret </b> from your deck into the battlefield.", "example": "class Kezan Mystic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kezan Mystic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample255-example3"}
{"intent": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Put a <b> Secret </b> from your deck into the battlefield.", "example": "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample255-example4"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample256-example0"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample256-example1"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample256-example2"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample256-example3"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample256-example4"}
{"intent": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample257-example0"}
{"intent": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample257-example1"}
{"intent": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample257-example2"}
{"intent": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample257-example3"}
{"intent": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample257-example4"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample258-example0"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "example": "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample258-example1"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample258-example2"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample258-example3"}
{"intent": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample258-example4"}
{"intent": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon a 4/4 Nerubian.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample259-example0"}
{"intent": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon a 4/4 Nerubian.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample259-example1"}
{"intent": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon a 4/4 Nerubian.", "example": "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample259-example2"}
{"intent": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon a 4/4 Nerubian.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample259-example3"}
{"intent": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon a 4/4 Nerubian.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample259-example4"}
{"intent": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "source": "sample260-example0"}
{"intent": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample260-example1"}
{"intent": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "example": "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample260-example2"}
{"intent": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample260-example3"}
{"intent": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "example": "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], "source": "sample260-example4"}
{"intent": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample261-example0"}
{"intent": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample261-example1"}
{"intent": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "source": "sample261-example2"}
{"intent": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], "source": "sample261-example3"}
{"intent": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], "source": "sample261-example4"}
{"intent": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth. </b> At the start of your turn, gain +1/+1.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample262-example0"}
{"intent": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth. </b> At the start of your turn, gain +1/+1.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample262-example1"}
{"intent": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth. </b> At the start of your turn, gain +1/+1.", "example": "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample262-example2"}
{"intent": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth. </b> At the start of your turn, gain +1/+1.", "example": "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample262-example3"}
{"intent": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth. </b> At the start of your turn, gain +1/+1.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample262-example4"}
{"intent": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample263-example0"}
{"intent": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample263-example1"}
{"intent": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample263-example2"}
{"intent": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample263-example3"}
{"intent": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample263-example4"}
{"intent": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample264-example0"}
{"intent": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample264-example1"}
{"intent": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample264-example2"}
{"intent": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample264-example3"}
{"intent": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample264-example4"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Salty Dog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Salty Dog ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 7 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample265-example0"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample265-example1"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample265-example2"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample265-example3"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample265-example4"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Feugen also died this game, summon Thaddius.", "example": "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample266-example0"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Feugen also died this game, summon Thaddius.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample266-example1"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Feugen also died this game, summon Thaddius.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample266-example2"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Feugen also died this game, summon Thaddius.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample266-example3"}
{"intent": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> If Feugen also died this game, summon Thaddius.", "example": "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample266-example4"}
{"intent": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample267-example0"}
{"intent": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample267-example1"}
{"intent": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample267-example2"}
{"intent": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "example": "class Echoing Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echoing Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give Effect ( Effect ( Turn Ended ( ) , Action Tag ( Duplicate ( Self Selector ( ) ) , Player Selector ( ) ) ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample267-example3"}
{"intent": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample267-example4"}
{"intent": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample268-example0"}
{"intent": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], "source": "sample268-example1"}
{"intent": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample268-example2"}
{"intent": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Silver Hand Recruit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Recruit ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample268-example3"}
{"intent": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample268-example4"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample269-example0"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample269-example1"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample269-example2"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample269-example3"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample269-example4"}
{"intent": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b> Deathrattle </b> , gain +1 Attack.", "example": "class Warsong Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warsong Commander ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample270-example0"}
{"intent": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b> Deathrattle </b> , gain +1 Attack.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample270-example1"}
{"intent": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b> Deathrattle </b> , gain +1 Attack.", "example": "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample270-example2"}
{"intent": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b> Deathrattle </b> , gain +1 Attack.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample270-example3"}
{"intent": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b> Deathrattle </b> , gain +1 Attack.", "example": "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample270-example4"}
{"intent": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 1 damage to all minions.", "example": "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample271-example0"}
{"intent": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 1 damage to all minions.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample271-example1"}
{"intent": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 1 damage to all minions.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample271-example2"}
{"intent": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 1 damage to all minions.", "example": "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample271-example3"}
{"intent": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 1 damage to all minions.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample271-example4"}
{"intent": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Add a random Beast card to your hand.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample272-example0"}
{"intent": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Add a random Beast card to your hand.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample272-example1"}
{"intent": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Add a random Beast card to your hand.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample272-example2"}
{"intent": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Add a random Beast card to your hand.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample272-example3"}
{"intent": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Deathrattle : </b> Add a random Beast card to your hand.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample272-example4"}
{"intent": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Restore 5 Health to the enemy hero.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample273-example0"}
{"intent": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Restore 5 Health to the enemy hero.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample273-example1"}
{"intent": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Restore 5 Health to the enemy hero.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample273-example2"}
{"intent": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Restore 5 Health to the enemy hero.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample273-example3"}
{"intent": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Restore 5 Health to the enemy hero.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample273-example4"}
{"intent": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 2 damage to ALL characters.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample274-example0"}
{"intent": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 2 damage to ALL characters.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample274-example1"}
{"intent": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 2 damage to ALL characters.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample274-example2"}
{"intent": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 2 damage to ALL characters.", "example": "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample274-example3"}
{"intent": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> . <b> Deathrattle : </b> Deal 2 damage to ALL characters.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample274-example4"}
{"intent": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample275-example0"}
{"intent": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample275-example1"}
{"intent": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample275-example2"}
{"intent": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample275-example3"}
{"intent": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample275-example4"}
{"intent": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample276-example0"}
{"intent": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample276-example1"}
{"intent": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "example": "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample276-example2"}
{"intent": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "example": "class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample276-example3"}
{"intent": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "example": "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample276-example4"}
{"intent": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Windfury, Charge, Divine Shield, Taunt </b>", "example": "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample277-example0"}
{"intent": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Windfury, Charge, Divine Shield, Taunt </b>", "example": "class Lil Exorcist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lil ` Exorcist ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample277-example1"}
{"intent": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Windfury, Charge, Divine Shield, Taunt </b>", "example": "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample277-example2"}
{"intent": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Windfury, Charge, Divine Shield, Taunt </b>", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample277-example3"}
{"intent": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Windfury, Charge, Divine Shield, Taunt </b>", "example": "class Tirion Fordring ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tirion Fordring ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample277-example4"}
{"intent": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "example": "class Mech Bear Cat ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mech - Bear - Cat ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Damaged ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample278-example0"}
{"intent": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample278-example1"}
{"intent": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "example": "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample278-example2"}
{"intent": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "example": "class Blood Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample278-example3"}
{"intent": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "example": "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample278-example4"}
{"intent": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Change an enemy minion's Attack to 1.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample279-example0"}
{"intent": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Change an enemy minion's Attack to 1.", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample279-example1"}
{"intent": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Change an enemy minion's Attack to 1.", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample279-example2"}
{"intent": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Change an enemy minion's Attack to 1.", "example": "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample279-example3"}
{"intent": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Change an enemy minion's Attack to 1.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample279-example4"}
{"intent": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \" <b> Deathrattle : </b> Resummon this minion.\"", "example": "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample280-example0"}
{"intent": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \" <b> Deathrattle : </b> Resummon this minion.\"", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample280-example1"}
{"intent": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \" <b> Deathrattle : </b> Resummon this minion.\"", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample280-example2"}
{"intent": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \" <b> Deathrattle : </b> Resummon this minion.\"", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample280-example3"}
{"intent": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \" <b> Deathrattle : </b> Resummon this minion.\"", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample280-example4"}
{"intent": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample281-example0"}
{"intent": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample281-example1"}
{"intent": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample281-example2"}
{"intent": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample281-example3"}
{"intent": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample281-example4"}
{"intent": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Spell Damage +1 </b> .", "example": "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample282-example0"}
{"intent": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Spell Damage +1 </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample282-example1"}
{"intent": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Spell Damage +1 </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample282-example2"}
{"intent": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Spell Damage +1 </b> .", "example": "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample282-example3"}
{"intent": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Spell Damage +1 </b> .", "example": "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample282-example4"}
{"intent": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample283-example0"}
{"intent": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample283-example1"}
{"intent": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "example": "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample283-example2"}
{"intent": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample283-example3"}
{"intent": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "example": "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample283-example4"}
{"intent": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Draw 2 cards; or Restore 5 Health.", "example": "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample284-example0"}
{"intent": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Draw 2 cards; or Restore 5 Health.", "example": "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample284-example1"}
{"intent": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Draw 2 cards; or Restore 5 Health.", "example": "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample284-example2"}
{"intent": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Draw 2 cards; or Restore 5 Health.", "example": "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample284-example3"}
{"intent": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One - </b> Draw 2 cards; or Restore 5 Health.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample284-example4"}
{"intent": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One </b> - NL +5 Attack; or +5 Health and <b> Taunt </b> .", "example": "class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample285-example0"}
{"intent": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One </b> - NL +5 Attack; or +5 Health and <b> Taunt </b> .", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample285-example1"}
{"intent": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One </b> - NL +5 Attack; or +5 Health and <b> Taunt </b> .", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample285-example2"}
{"intent": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One </b> - NL +5 Attack; or +5 Health and <b> Taunt </b> .", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample285-example3"}
{"intent": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Choose One </b> - NL +5 Attack; or +5 Health and <b> Taunt </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample285-example4"}
{"intent": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Enrage : </b> +5 Attack.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample286-example0"}
{"intent": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Enrage : </b> +5 Attack.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample286-example1"}
{"intent": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Enrage : </b> +5 Attack.", "example": "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample286-example2"}
{"intent": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Enrage : </b> +5 Attack.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample286-example3"}
{"intent": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Enrage : </b> +5 Attack.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample286-example4"}
{"intent": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Equip a 2/2 weapon.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample287-example0"}
{"intent": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Equip a 2/2 weapon.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample287-example1"}
{"intent": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Equip a 2/2 weapon.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample287-example2"}
{"intent": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Equip a 2/2 weapon.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample287-example3"}
{"intent": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Equip a 2/2 weapon.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample287-example4"}
{"intent": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample288-example0"}
{"intent": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample288-example1"}
{"intent": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Grommash Hellscream ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grommash Hellscream ` , 8 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 9 , charge = True , enrage = [ Aura ( Change Attack ( 6 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample288-example2"}
{"intent": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample288-example3"}
{"intent": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Charge </b> NL <b> Divine Shield </b>", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample288-example4"}
{"intent": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Divine Shield </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample289-example0"}
{"intent": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Divine Shield </b> .", "example": "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample289-example1"}
{"intent": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Divine Shield </b> .", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample289-example2"}
{"intent": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Divine Shield </b> .", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample289-example3"}
{"intent": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Divine Shield </b> .", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample289-example4"}
{"intent": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample290-example0"}
{"intent": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample290-example1"}
{"intent": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample290-example2"}
{"intent": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Ravenholdt Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ravenholdt Assassin ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 7 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample290-example3"}
{"intent": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Force Tank MAX ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Force - Tank MAX ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 7 , divine_shield = True )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample290-example4"}
{"intent": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "example": "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], "source": "sample291-example0"}
{"intent": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "example": "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample291-example1"}
{"intent": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample291-example2"}
{"intent": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample291-example3"}
{"intent": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "example": "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample291-example4"}
{"intent": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], "source": "sample292-example0"}
{"intent": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], "source": "sample292-example1"}
{"intent": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample292-example2"}
{"intent": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], "source": "sample292-example3"}
{"intent": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample292-example4"}
{"intent": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], "source": "sample293-example0"}
{"intent": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], "source": "sample293-example1"}
{"intent": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "example": "class Goblin Sapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Sapper ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Change Attack ( 4 ) , Greater Than ( Count ( Card Selector ( Enemy Player ( ) ) ) , value = 5 ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample293-example2"}
{"intent": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], "source": "sample293-example3"}
{"intent": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "example": "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample293-example4"}
{"intent": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "example": "class Arcane Missiles ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Missiles ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample294-example0"}
{"intent": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample294-example1"}
{"intent": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample294-example2"}
{"intent": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample294-example3"}
{"intent": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample294-example4"}
{"intent": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Spell Damage +1 </b> . <b> Battlecry : </b> Draw a card.", "example": "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample295-example0"}
{"intent": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Spell Damage +1 </b> . <b> Battlecry : </b> Draw a card.", "example": "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample295-example1"}
{"intent": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Spell Damage +1 </b> . <b> Battlecry : </b> Draw a card.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample295-example2"}
{"intent": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Spell Damage +1 </b> . <b> Battlecry : </b> Draw a card.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample295-example3"}
{"intent": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Spell Damage +1 </b> . <b> Battlecry : </b> Draw a card.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample295-example4"}
{"intent": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample296-example0"}
{"intent": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample296-example1"}
{"intent": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "example": "class Bouncing Blade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bouncing Blade ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 1 def use ( self , player , game ) : super ( ) . use ( player , game ) targets = player . minions [ : ] + player . opponent . minions [ : ] if len ( targets ) : for bounces in range ( 80 ) : target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 1 ) , self ) if target . dead : break", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], "source": "sample296-example2"}
{"intent": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample296-example3"}
{"intent": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample296-example4"}
{"intent": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample297-example0"}
{"intent": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample297-example1"}
{"intent": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample297-example2"}
{"intent": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample297-example3"}
{"intent": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample297-example4"}
{"intent": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample298-example0"}
{"intent": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample298-example1"}
{"intent": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], "source": "sample298-example2"}
{"intent": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample298-example3"}
{"intent": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample298-example4"}
{"intent": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], "source": "sample299-example0"}
{"intent": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample299-example1"}
{"intent": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample299-example2"}
{"intent": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "example": "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], "source": "sample299-example3"}
{"intent": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample299-example4"}
{"intent": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b> Immune </b> this turn.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample300-example0"}
{"intent": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b> Immune </b> this turn.", "example": "class Finicky Cloakfield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finicky Cloakfield ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample300-example1"}
{"intent": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b> Immune </b> this turn.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample300-example2"}
{"intent": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b> Immune </b> this turn.", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], "source": "sample300-example3"}
{"intent": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b> Immune </b> this turn.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], "source": "sample300-example4"}
{"intent": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample301-example0"}
{"intent": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "example": "class Bouncing Blade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bouncing Blade ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 1 def use ( self , player , game ) : super ( ) . use ( player , game ) targets = player . minions [ : ] + player . opponent . minions [ : ] if len ( targets ) : for bounces in range ( 80 ) : target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 1 ) , self ) if target . dead : break", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], "source": "sample301-example1"}
{"intent": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample301-example2"}
{"intent": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample301-example3"}
{"intent": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], "source": "sample301-example4"}
{"intent": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a minion with an Attack of 7 or more.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample302-example0"}
{"intent": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a minion with an Attack of 7 or more.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample302-example1"}
{"intent": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a minion with an Attack of 7 or more.", "example": "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample302-example2"}
{"intent": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a minion with an Attack of 7 or more.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample302-example3"}
{"intent": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a minion with an Attack of 7 or more.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample302-example4"}
{"intent": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "example": "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample303-example0"}
{"intent": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample303-example1"}
{"intent": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "example": "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample303-example2"}
{"intent": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample303-example3"}
{"intent": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "example": "class Thoughtsteal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thoughtsteal ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) if new_card : new_card = copy . copy ( new_card ) new_card . drawn = True if len ( player . hand ) < 10 : player . hand . append ( new_card ) new_card . player = player self . trigger ( ` card_drawn ` , new_card ) else : player . trigger ( ` card_destroyed ` , new_card )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample303-example4"}
{"intent": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample304-example0"}
{"intent": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "example": "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "tag": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample304-example1"}
{"intent": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample304-example2"}
{"intent": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], "source": "sample304-example3"}
{"intent": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "source": "sample304-example4"}
{"intent": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b> Freeze </b> them.", "example": "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample305-example0"}
{"intent": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b> Freeze </b> them.", "example": "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample305-example1"}
{"intent": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b> Freeze </b> them.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample305-example2"}
{"intent": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b> Freeze </b> them.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample305-example3"}
{"intent": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b> Freeze </b> them.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], "source": "sample305-example4"}
{"intent": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample306-example0"}
{"intent": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample306-example1"}
{"intent": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], "source": "sample306-example2"}
{"intent": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample306-example3"}
{"intent": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample306-example4"}
{"intent": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Stealth </b> . At the end of your turn, give another random friendly minion +1 Health.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample307-example0"}
{"intent": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Stealth </b> . At the end of your turn, give another random friendly minion +1 Health.", "example": "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample307-example1"}
{"intent": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Stealth </b> . At the end of your turn, give another random friendly minion +1 Health.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample307-example2"}
{"intent": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Stealth </b> . At the end of your turn, give another random friendly minion +1 Health.", "example": "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample307-example3"}
{"intent": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Stealth </b> . At the end of your turn, give another random friendly minion +1 Health.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample307-example4"}
{"intent": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> All minions lose <b> Divine Shield </b> . Gain +3/+3 for each Shield lost.", "example": "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample308-example0"}
{"intent": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> All minions lose <b> Divine Shield </b> . Gain +3/+3 for each Shield lost.", "example": "class King Of Beasts ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King of Beasts ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 6 , taunt = True )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample308-example1"}
{"intent": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> All minions lose <b> Divine Shield </b> . Gain +3/+3 for each Shield lost.", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample308-example2"}
{"intent": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> All minions lose <b> Divine Shield </b> . Gain +3/+3 for each Shield lost.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample308-example3"}
{"intent": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> All minions lose <b> Divine Shield </b> . Gain +3/+3 for each Shield lost.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample308-example4"}
{"intent": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Spell Damage +1 </b> . <b> Deathrattle : </b> Draw a card.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample309-example0"}
{"intent": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Spell Damage +1 </b> . <b> Deathrattle : </b> Draw a card.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample309-example1"}
{"intent": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Spell Damage +1 </b> . <b> Deathrattle : </b> Draw a card.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample309-example2"}
{"intent": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Spell Damage +1 </b> . <b> Deathrattle : </b> Draw a card.", "example": "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample309-example3"}
{"intent": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Spell Damage +1 </b> . <b> Deathrattle : </b> Draw a card.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample309-example4"}
{"intent": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b> Battlecry : </b> Remove 1 Durability from your opponent's weapon.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample310-example0"}
{"intent": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b> Battlecry : </b> Remove 1 Durability from your opponent's weapon.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample310-example1"}
{"intent": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b> Battlecry : </b> Remove 1 Durability from your opponent's weapon.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample310-example2"}
{"intent": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b> Battlecry : </b> Remove 1 Durability from your opponent's weapon.", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample310-example3"}
{"intent": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b> Battlecry : </b> Remove 1 Durability from your opponent's weapon.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample310-example4"}
{"intent": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Battlecry : </b> Gain Attack equal to the Attack of your weapon.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample311-example0"}
{"intent": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Battlecry : </b> Gain Attack equal to the Attack of your weapon.", "example": "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample311-example1"}
{"intent": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Battlecry : </b> Gain Attack equal to the Attack of your weapon.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample311-example2"}
{"intent": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Battlecry : </b> Gain Attack equal to the Attack of your weapon.", "example": "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample311-example3"}
{"intent": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Battlecry : </b> Gain Attack equal to the Attack of your weapon.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample311-example4"}
{"intent": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 4/5 Baine Bloodhoof.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample312-example0"}
{"intent": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 4/5 Baine Bloodhoof.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample312-example1"}
{"intent": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 4/5 Baine Bloodhoof.", "example": "class Nerubian Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian Egg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample312-example2"}
{"intent": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 4/5 Baine Bloodhoof.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample312-example3"}
{"intent": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 4/5 Baine Bloodhoof.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample312-example4"}
{"intent": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your weapon +1/+1.", "example": "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample313-example0"}
{"intent": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your weapon +1/+1.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample313-example1"}
{"intent": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your weapon +1/+1.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample313-example2"}
{"intent": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your weapon +1/+1.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample313-example3"}
{"intent": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your weapon +1/+1.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample313-example4"}
{"intent": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Choose One </b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b> Taunt </b> .", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample314-example0"}
{"intent": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Choose One </b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b> Taunt </b> .", "example": "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample314-example1"}
{"intent": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Choose One </b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b> Taunt </b> .", "example": "class Enhanceo Mechano ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Enhance - o Mechano ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample314-example2"}
{"intent": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Choose One </b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b> Taunt </b> .", "example": "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample314-example3"}
{"intent": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Choose One </b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b> Taunt </b> .", "example": "class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample314-example4"}
{"intent": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample315-example0"}
{"intent": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "example": "class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample315-example1"}
{"intent": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "example": "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample315-example2"}
{"intent": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "source": "sample315-example3"}
{"intent": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample315-example4"}
{"intent": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b> Combo : </b> +4 Attack instead.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample316-example0"}
{"intent": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b> Combo : </b> +4 Attack instead.", "example": "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample316-example1"}
{"intent": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b> Combo : </b> +4 Attack instead.", "example": "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], "source": "sample316-example2"}
{"intent": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b> Combo : </b> +4 Attack instead.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], "source": "sample316-example3"}
{"intent": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b> Combo : </b> +4 Attack instead.", "example": "class Tinkers Sharpsword Oil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinker ` s Sharpsword Oil ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 3 player . hero . change_temp_attack ( 3 ) if player . cards_played > 0 : targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) if targets is not None : target = player . game . random_choice ( targets ) target . add_buff ( Buff ( Change Attack ( 3 ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "source": "sample316-example4"}
{"intent": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Each player draws 2 cards.", "example": "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample317-example0"}
{"intent": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Each player draws 2 cards.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample317-example1"}
{"intent": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Each player draws 2 cards.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample317-example2"}
{"intent": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Each player draws 2 cards.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample317-example3"}
{"intent": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Each player draws 2 cards.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample317-example4"}
{"intent": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Give ALL other Murlocs +2 Health.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample318-example0"}
{"intent": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Give ALL other Murlocs +2 Health.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample318-example1"}
{"intent": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Give ALL other Murlocs +2 Health.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample318-example2"}
{"intent": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Give ALL other Murlocs +2 Health.", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample318-example3"}
{"intent": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b> Battlecry : </b> Give ALL other Murlocs +2 Health.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample318-example4"}
{"intent": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], "source": "sample319-example0"}
{"intent": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample319-example1"}
{"intent": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "example": "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample319-example2"}
{"intent": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "source": "sample319-example3"}
{"intent": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "example": "class Bouncing Blade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bouncing Blade ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 1 def use ( self , player , game ) : super ( ) . use ( player , game ) targets = player . minions [ : ] + player . opponent . minions [ : ] if len ( targets ) : for bounces in range ( 80 ) : target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 1 ) , self ) if target . dead : break", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "source": "sample319-example4"}
{"intent": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When your opponent casts a spell, <b> Counter </b> it.", "example": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], "source": "sample320-example0"}
{"intent": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When your opponent casts a spell, <b> Counter </b> it.", "example": "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], "source": "sample320-example1"}
{"intent": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When your opponent casts a spell, <b> Counter </b> it.", "example": "class Ice Barrier ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Barrier ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : if target is self . player . hero and not attacker . removed : attacker . player . game . other_player . hero . armor + = 8 super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample320-example2"}
{"intent": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When your opponent casts a spell, <b> Counter </b> it.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample320-example3"}
{"intent": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When your opponent casts a spell, <b> Counter </b> it.", "example": "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample320-example4"}
{"intent": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Swap the Attack and Health of a minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample321-example0"}
{"intent": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Swap the Attack and Health of a minion.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample321-example1"}
{"intent": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Swap the Attack and Health of a minion.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample321-example2"}
{"intent": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Swap the Attack and Health of a minion.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample321-example3"}
{"intent": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Swap the Attack and Health of a minion.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample321-example4"}
{"intent": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to a minion and give it +2 Attack.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample322-example0"}
{"intent": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to a minion and give it +2 Attack.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample322-example1"}
{"intent": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to a minion and give it +2 Attack.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample322-example2"}
{"intent": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to a minion and give it +2 Attack.", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample322-example3"}
{"intent": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 1 damage to a minion and give it +2 Attack.", "example": "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample322-example4"}
{"intent": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample323-example0"}
{"intent": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample323-example1"}
{"intent": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample323-example2"}
{"intent": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample323-example3"}
{"intent": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample323-example4"}
{"intent": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample324-example0"}
{"intent": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample324-example1"}
{"intent": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample324-example2"}
{"intent": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample324-example3"}
{"intent": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample324-example4"}
{"intent": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample325-example0"}
{"intent": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample325-example1"}
{"intent": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample325-example2"}
{"intent": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample325-example3"}
{"intent": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a minion +2 Attack this turn.", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample325-example4"}
{"intent": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "example": "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], "source": "sample326-example0"}
{"intent": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "example": "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample326-example1"}
{"intent": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "example": "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample326-example2"}
{"intent": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0], "source": "sample326-example3"}
{"intent": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample326-example4"}
{"intent": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy all other minions and discard your hand.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample327-example0"}
{"intent": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy all other minions and discard your hand.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample327-example1"}
{"intent": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy all other minions and discard your hand.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample327-example2"}
{"intent": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy all other minions and discard your hand.", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample327-example3"}
{"intent": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy all other minions and discard your hand.", "example": "class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample327-example4"}
{"intent": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample328-example0"}
{"intent": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample328-example1"}
{"intent": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample328-example2"}
{"intent": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample328-example3"}
{"intent": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample328-example4"}
{"intent": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Combo : </b> Summon a 2/1 Defias Bandit.", "example": "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample329-example0"}
{"intent": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Combo : </b> Summon a 2/1 Defias Bandit.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample329-example1"}
{"intent": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Combo : </b> Summon a 2/1 Defias Bandit.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample329-example2"}
{"intent": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Combo : </b> Summon a 2/1 Defias Bandit.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample329-example3"}
{"intent": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Combo : </b> Summon a 2/1 Defias Bandit.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample329-example4"}
{"intent": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample330-example0"}
{"intent": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample330-example1"}
{"intent": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample330-example2"}
{"intent": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "example": "class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample330-example3"}
{"intent": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample330-example4"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "example": "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample331-example0"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "example": "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample331-example1"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample331-example2"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample331-example3"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample331-example4"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "example": "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample332-example0"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "example": "class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample332-example1"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "example": "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample332-example2"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "example": "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample332-example3"}
{"intent": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample332-example4"}
{"intent": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample333-example0"}
{"intent": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample333-example1"}
{"intent": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample333-example2"}
{"intent": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample333-example3"}
{"intent": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample333-example4"}
{"intent": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "example": "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample334-example0"}
{"intent": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample334-example1"}
{"intent": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample334-example2"}
{"intent": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample334-example3"}
{"intent": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "example": "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample334-example4"}
{"intent": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "example": "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], "source": "sample335-example0"}
{"intent": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample335-example1"}
{"intent": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample335-example2"}
{"intent": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample335-example3"}
{"intent": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "example": "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample335-example4"}
{"intent": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample336-example0"}
{"intent": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample336-example1"}
{"intent": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample336-example2"}
{"intent": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample336-example3"}
{"intent": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample336-example4"}
{"intent": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Taunt. </b> Costs (1) less per Attack of your weapon.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample337-example0"}
{"intent": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Taunt. </b> Costs (1) less per Attack of your weapon.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample337-example1"}
{"intent": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Taunt. </b> Costs (1) less per Attack of your weapon.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample337-example2"}
{"intent": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Taunt. </b> Costs (1) less per Attack of your weapon.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample337-example3"}
{"intent": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b> Taunt. </b> Costs (1) less per Attack of your weapon.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample337-example4"}
{"intent": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "example": "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample338-example0"}
{"intent": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample338-example1"}
{"intent": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample338-example2"}
{"intent": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample338-example3"}
{"intent": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample338-example4"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample339-example0"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample339-example1"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample339-example2"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample339-example3"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], "source": "sample339-example4"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One - </b> <b> Charge </b> ; or +2 Health and <b> Taunt </b> .", "example": "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample340-example0"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One - </b> <b> Charge </b> ; or +2 Health and <b> Taunt </b> .", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample340-example1"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One - </b> <b> Charge </b> ; or +2 Health and <b> Taunt </b> .", "example": "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample340-example2"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One - </b> <b> Charge </b> ; or +2 Health and <b> Taunt </b> .", "example": "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample340-example3"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One - </b> <b> Charge </b> ; or +2 Health and <b> Taunt </b> .", "example": "class King Of Beasts ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King of Beasts ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 6 , taunt = True )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample340-example4"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample341-example0"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample341-example1"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample341-example2"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample341-example3"}
{"intent": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Charge </b>", "example": "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], "source": "sample341-example4"}
{"intent": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> . <b> Overload : </b> (2)", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample342-example0"}
{"intent": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> . <b> Overload : </b> (2)", "example": "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample342-example1"}
{"intent": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> . <b> Overload : </b> (2)", "example": "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample342-example2"}
{"intent": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> . <b> Overload : </b> (2)", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample342-example3"}
{"intent": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b> . <b> Overload : </b> (2)", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample342-example4"}
{"intent": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b> Secret </b> is revealed, gain +1 Durability.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample343-example0"}
{"intent": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b> Secret </b> is revealed, gain +1 Durability.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample343-example1"}
{"intent": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b> Secret </b> is revealed, gain +1 Durability.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample343-example2"}
{"intent": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b> Secret </b> is revealed, gain +1 Durability.", "example": "class Secretkeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Secretkeeper ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample343-example3"}
{"intent": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b> Secret </b> is revealed, gain +1 Durability.", "example": "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample343-example4"}
{"intent": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 3 Health.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample344-example0"}
{"intent": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 3 Health.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample344-example1"}
{"intent": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 3 Health.", "example": "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample344-example2"}
{"intent": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 3 Health.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample344-example3"}
{"intent": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 3 Health.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample344-example4"}
{"intent": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Combo : </b> Gain +2/+2 for each card played earlier this turn.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample345-example0"}
{"intent": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Combo : </b> Gain +2/+2 for each card played earlier this turn.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample345-example1"}
{"intent": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Combo : </b> Gain +2/+2 for each card played earlier this turn.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample345-example2"}
{"intent": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Combo : </b> Gain +2/+2 for each card played earlier this turn.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample345-example3"}
{"intent": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Combo : </b> Gain +2/+2 for each card played earlier this turn.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample345-example4"}
{"intent": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample346-example0"}
{"intent": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample346-example1"}
{"intent": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample346-example2"}
{"intent": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample346-example3"}
{"intent": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample346-example4"}
{"intent": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "example": "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample347-example0"}
{"intent": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "example": "class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample347-example1"}
{"intent": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample347-example2"}
{"intent": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "example": "class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample347-example3"}
{"intent": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "example": "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample347-example4"}
{"intent": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample348-example0"}
{"intent": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "source": "sample348-example1"}
{"intent": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample348-example2"}
{"intent": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample348-example3"}
{"intent": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample348-example4"}
{"intent": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, gain +2/+2.", "example": "class Illuminator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illuminator ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample349-example0"}
{"intent": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, gain +2/+2.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample349-example1"}
{"intent": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, gain +2/+2.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample349-example2"}
{"intent": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, gain +2/+2.", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample349-example3"}
{"intent": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b> Secret </b> at the end of your turn, gain +2/+2.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample349-example4"}
{"intent": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b> Combo : </b> Deal $4 damage instead.", "example": "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample350-example0"}
{"intent": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b> Combo : </b> Deal $4 damage instead.", "example": "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample350-example1"}
{"intent": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b> Combo : </b> Deal $4 damage instead.", "example": "class Perditions Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Perdition ` s Blade ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], "source": "sample350-example2"}
{"intent": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b> Combo : </b> Deal $4 damage instead.", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample350-example3"}
{"intent": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b> Combo : </b> Deal $4 damage instead.", "example": "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample350-example4"}
{"intent": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample351-example0"}
{"intent": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample351-example1"}
{"intent": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "example": "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample351-example2"}
{"intent": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample351-example3"}
{"intent": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample351-example4"}
{"intent": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Choose a minion and become a copy of it.", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample352-example0"}
{"intent": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Choose a minion and become a copy of it.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample352-example1"}
{"intent": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Choose a minion and become a copy of it.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample352-example2"}
{"intent": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Choose a minion and become a copy of it.", "example": "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample352-example3"}
{"intent": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Choose a minion and become a copy of it.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample352-example4"}
{"intent": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample353-example0"}
{"intent": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample353-example1"}
{"intent": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample353-example2"}
{"intent": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample353-example3"}
{"intent": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample353-example4"}
{"intent": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "example": "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample354-example0"}
{"intent": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "example": "class Call Pet ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Call Pet ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : def reduce_cost ( card ) : if card . is_minion ( ) and card . minion_type = = MINION_TYPE . BEAST : card . add_buff ( Buff ( Mana Change ( - 4 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample354-example1"}
{"intent": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample354-example2"}
{"intent": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample354-example3"}
{"intent": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample354-example4"}
{"intent": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Destroy one of your Mana Crystals.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample355-example0"}
{"intent": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Destroy one of your Mana Crystals.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample355-example1"}
{"intent": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Destroy one of your Mana Crystals.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample355-example2"}
{"intent": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Destroy one of your Mana Crystals.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample355-example3"}
{"intent": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Taunt </b> . <b> Battlecry : </b> Destroy one of your Mana Crystals.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample355-example4"}
{"intent": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample356-example0"}
{"intent": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample356-example1"}
{"intent": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample356-example2"}
{"intent": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample356-example3"}
{"intent": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample356-example4"}
{"intent": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b> Taunt </b> . <b> Overload : </b> (2)", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample357-example0"}
{"intent": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b> Taunt </b> . <b> Overload : </b> (2)", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample357-example1"}
{"intent": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b> Taunt </b> . <b> Overload : </b> (2)", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], "source": "sample357-example2"}
{"intent": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b> Taunt </b> . <b> Overload : </b> (2)", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "source": "sample357-example3"}
{"intent": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b> Taunt </b> . <b> Overload : </b> (2)", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample357-example4"}
{"intent": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample358-example0"}
{"intent": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample358-example1"}
{"intent": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample358-example2"}
{"intent": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample358-example3"}
{"intent": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample358-example4"}
{"intent": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage to your hero.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample359-example0"}
{"intent": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage to your hero.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample359-example1"}
{"intent": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage to your hero.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample359-example2"}
{"intent": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage to your hero.", "example": "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample359-example3"}
{"intent": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage to your hero.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample359-example4"}
{"intent": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample360-example0"}
{"intent": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample360-example1"}
{"intent": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample360-example2"}
{"intent": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "example": "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample360-example3"}
{"intent": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "example": "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample360-example4"}
{"intent": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b> Charge </b> that die at the end of the turn.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], "source": "sample361-example0"}
{"intent": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b> Charge </b> that die at the end of the turn.", "example": "class Tree Of Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tree of Life ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) targets . append ( game . other_player . hero ) targets . append ( game . current_player . hero ) for target in targets : target . heal ( player . effective_heal_power ( target . calculate_max_health ( ) ) , self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample361-example1"}
{"intent": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b> Charge </b> that die at the end of the turn.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "source": "sample361-example2"}
{"intent": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b> Charge </b> that die at the end of the turn.", "example": "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0], "source": "sample361-example3"}
{"intent": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b> Charge </b> that die at the end of the turn.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample361-example4"}
{"intent": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b> Overload : </b> (2)", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], "source": "sample362-example0"}
{"intent": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b> Overload : </b> (2)", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample362-example1"}
{"intent": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b> Overload : </b> (2)", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample362-example2"}
{"intent": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b> Overload : </b> (2)", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample362-example3"}
{"intent": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b> Overload : </b> (2)", "example": "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0], "source": "sample362-example4"}
{"intent": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample363-example0"}
{"intent": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "example": "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample363-example1"}
{"intent": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample363-example2"}
{"intent": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1], "source": "sample363-example3"}
{"intent": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample363-example4"}
{"intent": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Freeze </b> a character.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample364-example0"}
{"intent": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Freeze </b> a character.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample364-example1"}
{"intent": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Freeze </b> a character.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample364-example2"}
{"intent": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Freeze </b> a character.", "example": "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample364-example3"}
{"intent": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Freeze </b> a character.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample364-example4"}
{"intent": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample365-example0"}
{"intent": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample365-example1"}
{"intent": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample365-example2"}
{"intent": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample365-example3"}
{"intent": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "example": "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample365-example4"}
{"intent": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample366-example0"}
{"intent": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "example": "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample366-example1"}
{"intent": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample366-example2"}
{"intent": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample366-example3"}
{"intent": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample366-example4"}
{"intent": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b> Immune </b> while attacking.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample367-example0"}
{"intent": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b> Immune </b> while attacking.", "example": "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample367-example1"}
{"intent": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b> Immune </b> while attacking.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample367-example2"}
{"intent": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b> Immune </b> while attacking.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample367-example3"}
{"intent": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b> Immune </b> while attacking.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample367-example4"}
{"intent": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Enrage : </b> +6 Attack", "example": "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample368-example0"}
{"intent": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Enrage : </b> +6 Attack", "example": "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample368-example1"}
{"intent": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Enrage : </b> +6 Attack", "example": "class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample368-example2"}
{"intent": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Enrage : </b> +6 Attack", "example": "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample368-example3"}
{"intent": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> NL <b> Enrage : </b> +6 Attack", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample368-example4"}
{"intent": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample369-example0"}
{"intent": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "example": "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample369-example1"}
{"intent": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "example": "class Micro Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Micro Machine ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Turn Started ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample369-example2"}
{"intent": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample369-example3"}
{"intent": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "example": "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample369-example4"}
{"intent": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon and draw cards equal to its Durability.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample370-example0"}
{"intent": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon and draw cards equal to its Durability.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample370-example1"}
{"intent": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon and draw cards equal to its Durability.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample370-example2"}
{"intent": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon and draw cards equal to its Durability.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample370-example3"}
{"intent": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your opponent's weapon and draw cards equal to its Durability.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample370-example4"}
{"intent": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a 2/1 Damaged Golem.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample371-example0"}
{"intent": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a 2/1 Damaged Golem.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample371-example1"}
{"intent": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a 2/1 Damaged Golem.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample371-example2"}
{"intent": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a 2/1 Damaged Golem.", "example": "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample371-example3"}
{"intent": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Deathrattle : </b> Summon a 2/1 Damaged Golem.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample371-example4"}
{"intent": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b> Combo : </b> Return this to your hand next turn.", "example": "class Excess Mana ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Excess Mana ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample372-example0"}
{"intent": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b> Combo : </b> Return this to your hand next turn.", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample372-example1"}
{"intent": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b> Combo : </b> Return this to your hand next turn.", "example": "class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], "source": "sample372-example2"}
{"intent": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b> Combo : </b> Return this to your hand next turn.", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample372-example3"}
{"intent": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b> Combo : </b> Return this to your hand next turn.", "example": "class Gallywixs Coin ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Coin ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . mana < 10 : player . mana + = 1", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], "source": "sample372-example4"}
{"intent": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample373-example0"}
{"intent": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample373-example1"}
{"intent": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], "source": "sample373-example2"}
{"intent": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample373-example3"}
{"intent": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample373-example4"}
{"intent": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b> Taunt </b> .", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample374-example0"}
{"intent": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b> Taunt </b> .", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample374-example1"}
{"intent": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b> Taunt </b> .", "example": "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "source": "sample374-example2"}
{"intent": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b> Taunt </b> .", "example": "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample374-example3"}
{"intent": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b> Taunt </b> .", "example": "class Oneeyed Cheat ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` One - eyed Cheat ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 4 , 1 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Give ( Stealth ( ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample374-example4"}
{"intent": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample375-example0"}
{"intent": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample375-example1"}
{"intent": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "example": "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample375-example2"}
{"intent": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample375-example3"}
{"intent": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample375-example4"}
{"intent": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a Murloc and gain +2/+2.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample376-example0"}
{"intent": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a Murloc and gain +2/+2.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample376-example1"}
{"intent": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a Murloc and gain +2/+2.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample376-example2"}
{"intent": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a Murloc and gain +2/+2.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample376-example3"}
{"intent": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b> Battlecry : </b> Destroy a Murloc and gain +2/+2.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample376-example4"}
{"intent": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample377-example0"}
{"intent": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample377-example1"}
{"intent": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample377-example2"}
{"intent": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample377-example3"}
{"intent": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample377-example4"}
{"intent": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, gain 8 Armor.", "example": "class Ice Block ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Block ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : if character . health - amount < = 0 : character . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` pre_damage ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` pre_damage ` , self . _reveal )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample378-example0"}
{"intent": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, gain 8 Armor.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample378-example1"}
{"intent": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, gain 8 Armor.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample378-example2"}
{"intent": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, gain 8 Armor.", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample378-example3"}
{"intent": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero is attacked, gain 8 Armor.", "example": "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample378-example4"}
{"intent": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When your hero takes fatal damage, prevent it and become <b> Immune </b> this turn.", "example": "class Ice Lance ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Lance ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . frozen : self . target . damage ( 4 , self ) else : self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample379-example0"}
{"intent": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When your hero takes fatal damage, prevent it and become <b> Immune </b> this turn.", "example": "class Ice Barrier ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Barrier ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : if target is self . player . hero and not attacker . removed : attacker . player . game . other_player . hero . armor + = 8 super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample379-example1"}
{"intent": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When your hero takes fatal damage, prevent it and become <b> Immune </b> this turn.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample379-example2"}
{"intent": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When your hero takes fatal damage, prevent it and become <b> Immune </b> this turn.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample379-example3"}
{"intent": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When your hero takes fatal damage, prevent it and become <b> Immune </b> this turn.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], "source": "sample379-example4"}
{"intent": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a character. If it was already <b> Frozen </b> , deal $4 damage instead.", "example": "class Ice Block ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Block ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : if character . health - amount < = 0 : character . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` pre_damage ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` pre_damage ` , self . _reveal )", "tag": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample380-example0"}
{"intent": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a character. If it was already <b> Frozen </b> , deal $4 damage instead.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample380-example1"}
{"intent": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a character. If it was already <b> Frozen </b> , deal $4 damage instead.", "example": "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample380-example2"}
{"intent": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a character. If it was already <b> Frozen </b> , deal $4 damage instead.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], "source": "sample380-example3"}
{"intent": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a character. If it was already <b> Frozen </b> , deal $4 damage instead.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample380-example4"}
{"intent": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "example": "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample381-example0"}
{"intent": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "example": "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample381-example1"}
{"intent": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "example": "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample381-example2"}
{"intent": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample381-example3"}
{"intent": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample381-example4"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample382-example0"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample382-example1"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample382-example2"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample382-example3"}
{"intent": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample382-example4"}
{"intent": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample383-example0"}
{"intent": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "example": "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], "source": "sample383-example1"}
{"intent": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample383-example2"}
{"intent": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample383-example3"}
{"intent": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "example": "class Nat Pagle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nat Pagle ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample383-example4"}
{"intent": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample384-example0"}
{"intent": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample384-example1"}
{"intent": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "example": "class Lightspawn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightspawn ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 5 , buffs = [ Buff ( Attack Equals Health ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample384-example2"}
{"intent": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample384-example3"}
{"intent": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample384-example4"}
{"intent": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample385-example0"}
{"intent": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "example": "class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample385-example1"}
{"intent": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample385-example2"}
{"intent": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample385-example3"}
{"intent": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample385-example4"}
{"intent": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample386-example0"}
{"intent": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample386-example1"}
{"intent": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample386-example2"}
{"intent": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion.", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample386-example3"}
{"intent": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample386-example4"}
{"intent": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample387-example0"}
{"intent": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample387-example1"}
{"intent": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample387-example2"}
{"intent": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample387-example3"}
{"intent": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample387-example4"}
{"intent": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Deal 2 damage; or <b> Silence </b> a minion.", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample388-example0"}
{"intent": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Deal 2 damage; or <b> Silence </b> a minion.", "example": "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample388-example1"}
{"intent": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Deal 2 damage; or <b> Silence </b> a minion.", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample388-example2"}
{"intent": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Deal 2 damage; or <b> Silence </b> a minion.", "example": "class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample388-example3"}
{"intent": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Deal 2 damage; or <b> Silence </b> a minion.", "example": "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample388-example4"}
{"intent": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Combo : </b> Return a minion to its owner's hand.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample389-example0"}
{"intent": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Combo : </b> Return a minion to its owner's hand.", "example": "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample389-example1"}
{"intent": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Combo : </b> Return a minion to its owner's hand.", "example": "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample389-example2"}
{"intent": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Combo : </b> Return a minion to its owner's hand.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample389-example3"}
{"intent": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Combo : </b> Return a minion to its owner's hand.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample389-example4"}
{"intent": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Charge </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample390-example0"}
{"intent": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Charge </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample390-example1"}
{"intent": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Charge </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample390-example2"}
{"intent": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Charge </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample390-example3"}
{"intent": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Charge </b>", "example": "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample390-example4"}
{"intent": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your opponent 2 Bananas.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample391-example0"}
{"intent": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your opponent 2 Bananas.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample391-example1"}
{"intent": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your opponent 2 Bananas.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample391-example2"}
{"intent": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your opponent 2 Bananas.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample391-example3"}
{"intent": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Battlecry : </b> Give your opponent 2 Bananas.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample391-example4"}
{"intent": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample392-example0"}
{"intent": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample392-example1"}
{"intent": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample392-example2"}
{"intent": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample392-example3"}
{"intent": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample392-example4"}
{"intent": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b> Overload : </b> (2)", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample393-example0"}
{"intent": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b> Overload : </b> (2)", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample393-example1"}
{"intent": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b> Overload : </b> (2)", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample393-example2"}
{"intent": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b> Overload : </b> (2)", "example": "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample393-example3"}
{"intent": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b> Overload : </b> (2)", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], "source": "sample393-example4"}
{"intent": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "example": "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample394-example0"}
{"intent": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "example": "class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample394-example1"}
{"intent": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "example": "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample394-example2"}
{"intent": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample394-example3"}
{"intent": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample394-example4"}
{"intent": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> . <b> Battlecry : </b> Summon two 1/1 Whelps for your opponent.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample395-example0"}
{"intent": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> . <b> Battlecry : </b> Summon two 1/1 Whelps for your opponent.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample395-example1"}
{"intent": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> . <b> Battlecry : </b> Summon two 1/1 Whelps for your opponent.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample395-example2"}
{"intent": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> . <b> Battlecry : </b> Summon two 1/1 Whelps for your opponent.", "example": "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample395-example3"}
{"intent": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Charge </b> . <b> Battlecry : </b> Summon two 1/1 Whelps for your opponent.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample395-example4"}
{"intent": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to the enemy hero.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample396-example0"}
{"intent": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to the enemy hero.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample396-example1"}
{"intent": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to the enemy hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample396-example2"}
{"intent": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to the enemy hero.", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample396-example3"}
{"intent": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Deal 2 damage to the enemy hero.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample396-example4"}
{"intent": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b> Overload : </b> (1)", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample397-example0"}
{"intent": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b> Overload : </b> (1)", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample397-example1"}
{"intent": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b> Overload : </b> (1)", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample397-example2"}
{"intent": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b> Overload : </b> (1)", "example": "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample397-example3"}
{"intent": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b> Overload : </b> (1)", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], "source": "sample397-example4"}
{"intent": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b> Overload : </b> (2)", "example": "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample398-example0"}
{"intent": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b> Overload : </b> (2)", "example": "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample398-example1"}
{"intent": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b> Overload : </b> (2)", "example": "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample398-example2"}
{"intent": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b> Overload : </b> (2)", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample398-example3"}
{"intent": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b> Overload : </b> (2)", "example": "class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "source": "sample398-example4"}
{"intent": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "source": "sample399-example0"}
{"intent": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "example": "class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample399-example1"}
{"intent": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "example": "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample399-example2"}
{"intent": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "example": "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample399-example3"}
{"intent": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample399-example4"}
{"intent": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Draw a card.", "example": "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample400-example0"}
{"intent": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Draw a card.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], "source": "sample400-example1"}
{"intent": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Draw a card.", "example": "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample400-example2"}
{"intent": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Draw a card.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample400-example3"}
{"intent": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Deathrattle : </b> Draw a card.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample400-example4"}
{"intent": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "example": "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample401-example0"}
{"intent": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "example": "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample401-example1"}
{"intent": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "example": "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample401-example2"}
{"intent": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "example": "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample401-example3"}
{"intent": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "example": "class Thaddius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thaddius ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 11 , 11 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample401-example4"}
{"intent": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your hero and replace it with Lord Jaraxxus.", "example": "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample402-example0"}
{"intent": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your hero and replace it with Lord Jaraxxus.", "example": "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample402-example1"}
{"intent": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your hero and replace it with Lord Jaraxxus.", "example": "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample402-example2"}
{"intent": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your hero and replace it with Lord Jaraxxus.", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample402-example3"}
{"intent": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy your hero and replace it with Lord Jaraxxus.", "example": "class Nerubian Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian Egg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample402-example4"}
{"intent": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample403-example0"}
{"intent": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample403-example1"}
{"intent": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample403-example2"}
{"intent": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample403-example3"}
{"intent": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample403-example4"}
{"intent": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage randomly split between all other characters.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample404-example0"}
{"intent": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage randomly split between all other characters.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample404-example1"}
{"intent": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage randomly split between all other characters.", "example": "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample404-example2"}
{"intent": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage randomly split between all other characters.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample404-example3"}
{"intent": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage randomly split between all other characters.", "example": "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample404-example4"}
{"intent": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Spell Damage +5 </b>", "example": "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample405-example0"}
{"intent": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Spell Damage +5 </b>", "example": "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], "source": "sample405-example1"}
{"intent": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Spell Damage +5 </b>", "example": "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample405-example2"}
{"intent": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Spell Damage +5 </b>", "example": "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample405-example3"}
{"intent": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Spell Damage +5 </b>", "example": "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "source": "sample405-example4"}
{"intent": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "example": "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample406-example0"}
{"intent": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample406-example1"}
{"intent": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample406-example2"}
{"intent": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "example": "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample406-example3"}
{"intent": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample406-example4"}
{"intent": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "example": "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample407-example0"}
{"intent": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample407-example1"}
{"intent": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "example": "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample407-example2"}
{"intent": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample407-example3"}
{"intent": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample407-example4"}
{"intent": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give a minion +4 Attack; or +4 Health and <b> Taunt </b> .", "example": "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample408-example0"}
{"intent": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give a minion +4 Attack; or +4 Health and <b> Taunt </b> .", "example": "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample408-example1"}
{"intent": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give a minion +4 Attack; or +4 Health and <b> Taunt </b> .", "example": "class Blessing Of Kings ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Kings ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample408-example2"}
{"intent": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give a minion +4 Attack; or +4 Health and <b> Taunt </b> .", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample408-example3"}
{"intent": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Give a minion +4 Attack; or +4 Health and <b> Taunt </b> .", "example": "class Unleash The Hounds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unleash the Hounds ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for target in hearthbreaker . targeting . find_enemy_minion_spell_target ( player . game , lambda x : True ) : hound = hearthbreaker . cards . minions . hunter . Hound ( ) hound . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1 and len ( player . minions ) < 7", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], "source": "sample408-example4"}
{"intent": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Silence </b> all enemy minions. Draw a card.", "example": "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample409-example0"}
{"intent": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Silence </b> all enemy minions. Draw a card.", "example": "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "source": "sample409-example1"}
{"intent": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Silence </b> all enemy minions. Draw a card.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], "source": "sample409-example2"}
{"intent": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Silence </b> all enemy minions. Draw a card.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample409-example3"}
{"intent": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Silence </b> all enemy minions. Draw a card.", "example": "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample409-example4"}
{"intent": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample410-example0"}
{"intent": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "example": "class Blood Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample410-example1"}
{"intent": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample410-example2"}
{"intent": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample410-example3"}
{"intent": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample410-example4"}
{"intent": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Stealth </b> .", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample411-example0"}
{"intent": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Stealth </b> .", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample411-example1"}
{"intent": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Stealth </b> .", "example": "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample411-example2"}
{"intent": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Stealth </b> .", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample411-example3"}
{"intent": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give a friendly minion <b> Stealth </b> .", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample411-example4"}
{"intent": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (0) next turn.", "example": "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample412-example0"}
{"intent": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (0) next turn.", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], "source": "sample412-example1"}
{"intent": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (0) next turn.", "example": "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample412-example2"}
{"intent": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (0) next turn.", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample412-example3"}
{"intent": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Enemy spells cost (0) next turn.", "example": "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample412-example4"}
{"intent": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If your opponent has 4 or more minions, take control of one at random.", "example": "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample413-example0"}
{"intent": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If your opponent has 4 or more minions, take control of one at random.", "example": "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample413-example1"}
{"intent": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If your opponent has 4 or more minions, take control of one at random.", "example": "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample413-example2"}
{"intent": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If your opponent has 4 or more minions, take control of one at random.", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample413-example3"}
{"intent": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> If your opponent has 4 or more minions, take control of one at random.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample413-example4"}
{"intent": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "example": "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], "source": "sample414-example0"}
{"intent": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], "source": "sample414-example1"}
{"intent": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "example": "class Ancestors Call ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestor ` s Call ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for player in game . players : minions = [ card for card in player . hand if card . is_minion ( ) ] if len ( minions ) and len ( player . minions ) < 7 : minion_card = game . random_choice ( minions ) minion_card . unattach ( ) player . hand . remove ( minion_card ) minion_card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], "source": "sample414-example2"}
{"intent": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "example": "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample414-example3"}
{"intent": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample414-example4"}
{"intent": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, summon a copy of it.", "example": "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample415-example0"}
{"intent": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, summon a copy of it.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample415-example1"}
{"intent": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, summon a copy of it.", "example": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample415-example2"}
{"intent": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, summon a copy of it.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], "source": "sample415-example3"}
{"intent": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, summon a copy of it.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], "source": "sample415-example4"}
{"intent": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample416-example0"}
{"intent": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "example": "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample416-example1"}
{"intent": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample416-example2"}
{"intent": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample416-example3"}
{"intent": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "example": "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample416-example4"}
{"intent": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "example": "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample417-example0"}
{"intent": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "example": "class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample417-example1"}
{"intent": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "example": "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample417-example2"}
{"intent": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample417-example3"}
{"intent": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "example": "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample417-example4"}
{"intent": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample418-example0"}
{"intent": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "example": "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample418-example1"}
{"intent": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample418-example2"}
{"intent": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample418-example3"}
{"intent": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "example": "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample418-example4"}
{"intent": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "example": "class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample419-example0"}
{"intent": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "example": "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample419-example1"}
{"intent": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample419-example2"}
{"intent": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample419-example3"}
{"intent": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample419-example4"}
{"intent": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "example": "class Murloc Tidecaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidecaller ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ ( Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample420-example0"}
{"intent": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "example": "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], "source": "sample420-example1"}
{"intent": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "example": "class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grimscale Oracle ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample420-example2"}
{"intent": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample420-example3"}
{"intent": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "example": "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample420-example4"}
{"intent": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample421-example0"}
{"intent": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "example": "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample421-example1"}
{"intent": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample421-example2"}
{"intent": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample421-example3"}
{"intent": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "example": "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample421-example4"}
{"intent": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], "source": "sample422-example0"}
{"intent": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample422-example1"}
{"intent": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample422-example2"}
{"intent": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "example": "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample422-example3"}
{"intent": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample422-example4"}
{"intent": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "example": "class Corruption ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Corruption ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Started ( player = Enemy Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample423-example0"}
{"intent": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample423-example1"}
{"intent": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample423-example2"}
{"intent": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample423-example3"}
{"intent": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample423-example4"}
{"intent": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample424-example0"}
{"intent": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "example": "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample424-example1"}
{"intent": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "example": "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample424-example2"}
{"intent": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample424-example3"}
{"intent": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "example": "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample424-example4"}
{"intent": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Summon 1/1 Whelps until your side of the battlefield is full.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample425-example0"}
{"intent": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Summon 1/1 Whelps until your side of the battlefield is full.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample425-example1"}
{"intent": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Summon 1/1 Whelps until your side of the battlefield is full.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample425-example2"}
{"intent": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Summon 1/1 Whelps until your side of the battlefield is full.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample425-example3"}
{"intent": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Summon 1/1 Whelps until your side of the battlefield is full.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample425-example4"}
{"intent": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample426-example0"}
{"intent": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample426-example1"}
{"intent": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample426-example2"}
{"intent": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample426-example3"}
{"intent": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample426-example4"}
{"intent": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> . Destroy any minion damaged by this minion.", "example": "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample427-example0"}
{"intent": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> . Destroy any minion damaged by this minion.", "example": "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample427-example1"}
{"intent": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> . Destroy any minion damaged by this minion.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample427-example2"}
{"intent": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> . Destroy any minion damaged by this minion.", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample427-example3"}
{"intent": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Stealth </b> . Destroy any minion damaged by this minion.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample427-example4"}
{"intent": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 1 damage. <b> Combo : </b> Deal 2 instead.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample428-example0"}
{"intent": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 1 damage. <b> Combo : </b> Deal 2 instead.", "example": "class Argent Watchman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Watchman ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Cant Attack ( ) ) ] , effects = [ Effect ( Used Power ( ) , Action Tag ( Give ( Buff Until ( Can Attack ( ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample428-example1"}
{"intent": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 1 damage. <b> Combo : </b> Deal 2 instead.", "example": "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], "source": "sample428-example2"}
{"intent": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 1 damage. <b> Combo : </b> Deal 2 instead.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample428-example3"}
{"intent": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 1 damage. <b> Combo : </b> Deal 2 instead.", "example": "class King Of Beasts ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King of Beasts ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 6 , taunt = True )", "tag": [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], "source": "sample428-example4"}
{"intent": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample429-example0"}
{"intent": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample429-example1"}
{"intent": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample429-example2"}
{"intent": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "example": "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample429-example3"}
{"intent": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "example": "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample429-example4"}
{"intent": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 5 damage to your hero.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample430-example0"}
{"intent": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 5 damage to your hero.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample430-example1"}
{"intent": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 5 damage to your hero.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample430-example2"}
{"intent": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 5 damage to your hero.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample430-example3"}
{"intent": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b> Battlecry : </b> Deal 5 damage to your hero.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample430-example4"}
{"intent": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "example": "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample431-example0"}
{"intent": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample431-example1"}
{"intent": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "example": "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], "source": "sample431-example2"}
{"intent": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "example": "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample431-example3"}
{"intent": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "example": "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample431-example4"}
{"intent": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 4 Health to your hero.", "example": "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample432-example0"}
{"intent": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 4 Health to your hero.", "example": "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample432-example1"}
{"intent": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 4 Health to your hero.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample432-example2"}
{"intent": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 4 Health to your hero.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample432-example3"}
{"intent": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Restore 4 Health to your hero.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample432-example4"}
{"intent": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "example": "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], "source": "sample433-example0"}
{"intent": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample433-example1"}
{"intent": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample433-example2"}
{"intent": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample433-example3"}
{"intent": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample433-example4"}
{"intent": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "example": "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample434-example0"}
{"intent": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "example": "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample434-example1"}
{"intent": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample434-example2"}
{"intent": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample434-example3"}
{"intent": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "example": "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample434-example4"}
{"intent": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample435-example0"}
{"intent": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "example": "class Scavenging Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scavenging Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample435-example1"}
{"intent": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample435-example2"}
{"intent": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample435-example3"}
{"intent": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample435-example4"}
{"intent": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> <b> Windfury </b> and +1 Attack", "example": "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample436-example0"}
{"intent": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> <b> Windfury </b> and +1 Attack", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample436-example1"}
{"intent": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> <b> Windfury </b> and +1 Attack", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample436-example2"}
{"intent": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> <b> Windfury </b> and +1 Attack", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample436-example3"}
{"intent": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> <b> Windfury </b> and +1 Attack", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample436-example4"}
{"intent": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "example": "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample437-example0"}
{"intent": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample437-example1"}
{"intent": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample437-example2"}
{"intent": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "example": "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample437-example3"}
{"intent": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample437-example4"}
{"intent": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample438-example0"}
{"intent": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample438-example1"}
{"intent": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "example": "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample438-example2"}
{"intent": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample438-example3"}
{"intent": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], "source": "sample438-example4"}
{"intent": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample439-example0"}
{"intent": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample439-example1"}
{"intent": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample439-example2"}
{"intent": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b>", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample439-example3"}
{"intent": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Stealth </b>", "example": "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample439-example4"}
{"intent": "SI : 7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Combo : </b> Deal 2 damage.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample440-example0"}
{"intent": "SI : 7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Combo : </b> Deal 2 damage.", "example": "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample440-example1"}
{"intent": "SI : 7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Combo : </b> Deal 2 damage.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "source": "sample440-example2"}
{"intent": "SI : 7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Combo : </b> Deal 2 damage.", "example": "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample440-example3"}
{"intent": "SI : 7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Combo : </b> Deal 2 damage.", "example": "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "source": "sample440-example4"}
{"intent": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample441-example0"}
{"intent": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample441-example1"}
{"intent": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample441-example2"}
{"intent": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "example": "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], "source": "sample441-example3"}
{"intent": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample441-example4"}
{"intent": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon two 2/2 Hyenas.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample442-example0"}
{"intent": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon two 2/2 Hyenas.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample442-example1"}
{"intent": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon two 2/2 Hyenas.", "example": "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample442-example2"}
{"intent": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon two 2/2 Hyenas.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample442-example3"}
{"intent": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Deathrattle : </b> Summon two 2/2 Hyenas.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample442-example4"}
{"intent": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample443-example0"}
{"intent": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample443-example1"}
{"intent": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample443-example2"}
{"intent": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample443-example3"}
{"intent": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample443-example4"}
{"intent": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "example": "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample444-example0"}
{"intent": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "example": "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample444-example1"}
{"intent": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample444-example2"}
{"intent": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "example": "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample444-example3"}
{"intent": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample444-example4"}
{"intent": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample445-example0"}
{"intent": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "example": "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample445-example1"}
{"intent": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "example": "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample445-example2"}
{"intent": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "example": "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample445-example3"}
{"intent": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample445-example4"}
{"intent": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b> Secret </b> is played, gain +1/+1.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample446-example0"}
{"intent": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b> Secret </b> is played, gain +1/+1.", "example": "class Core Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Rager ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample446-example1"}
{"intent": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b> Secret </b> is played, gain +1/+1.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample446-example2"}
{"intent": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b> Secret </b> is played, gain +1/+1.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample446-example3"}
{"intent": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b> Secret </b> is played, gain +1/+1.", "example": "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample446-example4"}
{"intent": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample447-example0"}
{"intent": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "example": "class Divine Favor ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Favor ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) difference = len ( game . other_player . hand ) - len ( player . hand ) for i in range ( 0 , difference ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], "source": "sample447-example1"}
{"intent": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "example": "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], "source": "sample447-example2"}
{"intent": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample447-example3"}
{"intent": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "example": "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], "source": "sample447-example4"}
{"intent": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "example": "class Betrayal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Betrayal ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) left_minion = None right_minion = None index = self . target . index if index > 0 : left_minion = game . other_player . minions [ index - 1 ] if index < min ( len ( game . other_player . minions ) - 1 , 6 ) : right_minion = game . other_player . minions [ index + 1 ] original_immune = self . target . immune self . target . immune = True if left_minion is not None : left_minion . damage ( self . target . calculate_attack ( ) , self . target ) if right_minion is not None : right_minion . damage ( self . target . calculate_attack ( ) , self . target ) self . target . immune = original_immune", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "source": "sample448-example0"}
{"intent": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], "source": "sample448-example1"}
{"intent": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "example": "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample448-example2"}
{"intent": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "example": "class Bouncing Blade ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bouncing Blade ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) > = 1 def use ( self , player , game ) : super ( ) . use ( player , game ) targets = player . minions [ : ] + player . opponent . minions [ : ] if len ( targets ) : for bounces in range ( 80 ) : target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 1 ) , self ) if target . dead : break", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], "source": "sample448-example3"}
{"intent": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample448-example4"}
{"intent": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform : 3 damage.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample449-example0"}
{"intent": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform : 3 damage.", "example": "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "source": "sample449-example1"}
{"intent": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform : 3 damage.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample449-example2"}
{"intent": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform : 3 damage.", "example": "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample449-example3"}
{"intent": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform : 3 damage.", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], "source": "sample449-example4"}
{"intent": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "example": "class Unstable Portal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Portal ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) query = Card Query ( conditions = [ Is Minion ( ) ] ) new_minon = query . get_card ( player , player , self ) new_minon . add_buff ( Buff ( Mana Change ( - 3 ) ) ) player . hand . append ( new_minon )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample450-example0"}
{"intent": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "example": "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample450-example1"}
{"intent": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "example": "class Headcrack ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Headcrack ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) if player . cards_played > 0 : player . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Add Card ( self ) , Player Selector ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], "source": "sample450-example2"}
{"intent": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "example": "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample450-example3"}
{"intent": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "example": "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], "source": "sample450-example4"}
{"intent": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "example": "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample451-example0"}
{"intent": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample451-example1"}
{"intent": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], "source": "sample451-example2"}
{"intent": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "example": "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample451-example3"}
{"intent": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], "source": "sample451-example4"}
{"intent": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample452-example0"}
{"intent": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample452-example1"}
{"intent": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample452-example2"}
{"intent": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample452-example3"}
{"intent": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample452-example4"}
{"intent": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion.", "example": "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "source": "sample453-example0"}
{"intent": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], "source": "sample453-example1"}
{"intent": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], "source": "sample453-example2"}
{"intent": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion.", "example": "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample453-example3"}
{"intent": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion.", "example": "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample453-example4"}
{"intent": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/2 Squire.", "example": "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample454-example0"}
{"intent": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/2 Squire.", "example": "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample454-example1"}
{"intent": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/2 Squire.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample454-example2"}
{"intent": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/2 Squire.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample454-example3"}
{"intent": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Summon a 2/2 Squire.", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample454-example4"}
{"intent": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample455-example0"}
{"intent": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample455-example1"}
{"intent": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample455-example2"}
{"intent": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Force Tank MAX ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Force - Tank MAX ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 7 , 7 , divine_shield = True )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample455-example3"}
{"intent": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Divine Shield </b>", "example": "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample455-example4"}
{"intent": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample456-example0"}
{"intent": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample456-example1"}
{"intent": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample456-example2"}
{"intent": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample456-example3"}
{"intent": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample456-example4"}
{"intent": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When one of your minions is attacked, summon three 1/1 Snakes.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample457-example0"}
{"intent": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When one of your minions is attacked, summon three 1/1 Snakes.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample457-example1"}
{"intent": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When one of your minions is attacked, summon three 1/1 Snakes.", "example": "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], "source": "sample457-example2"}
{"intent": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When one of your minions is attacked, summon three 1/1 Snakes.", "example": "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "source": "sample457-example3"}
{"intent": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When one of your minions is attacked, summon three 1/1 Snakes.", "example": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], "source": "sample457-example4"}
{"intent": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, deal $4 damage to it.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample458-example0"}
{"intent": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, deal $4 damage to it.", "example": "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "source": "sample458-example1"}
{"intent": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, deal $4 damage to it.", "example": "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample458-example2"}
{"intent": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, deal $4 damage to it.", "example": "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "source": "sample458-example3"}
{"intent": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, deal $4 damage to it.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample458-example4"}
{"intent": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample459-example0"}
{"intent": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "example": "class Mechwarper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechwarper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample459-example1"}
{"intent": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample459-example2"}
{"intent": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "example": "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample459-example3"}
{"intent": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "example": "class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample459-example4"}
{"intent": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \" <b> Deathrattle : </b> Summon a 2/2 Treant.\"", "example": "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample460-example0"}
{"intent": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \" <b> Deathrattle : </b> Summon a 2/2 Treant.\"", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample460-example1"}
{"intent": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \" <b> Deathrattle : </b> Summon a 2/2 Treant.\"", "example": "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], "source": "sample460-example2"}
{"intent": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \" <b> Deathrattle : </b> Summon a 2/2 Treant.\"", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample460-example3"}
{"intent": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \" <b> Deathrattle : </b> Summon a 2/2 Treant.\"", "example": "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample460-example4"}
{"intent": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "example": "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample461-example0"}
{"intent": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "example": "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample461-example1"}
{"intent": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample461-example2"}
{"intent": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample461-example3"}
{"intent": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample461-example4"}
{"intent": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b> Charge </b> while you have a weapon equipped.", "example": "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], "source": "sample462-example0"}
{"intent": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b> Charge </b> while you have a weapon equipped.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample462-example1"}
{"intent": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b> Charge </b> while you have a weapon equipped.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample462-example2"}
{"intent": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b> Charge </b> while you have a weapon equipped.", "example": "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample462-example3"}
{"intent": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b> Charge </b> while you have a weapon equipped.", "example": "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample462-example4"}
{"intent": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample463-example0"}
{"intent": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "example": "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample463-example1"}
{"intent": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "example": "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample463-example2"}
{"intent": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample463-example3"}
{"intent": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Secret : </b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "example": "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], "source": "sample463-example4"}
{"intent": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample464-example0"}
{"intent": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample464-example1"}
{"intent": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample464-example2"}
{"intent": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample464-example3"}
{"intent": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b>", "example": "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample464-example4"}
{"intent": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> Your weapon has +2 Attack.", "example": "class Nightblade ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightblade ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample465-example0"}
{"intent": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> Your weapon has +2 Attack.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample465-example1"}
{"intent": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> Your weapon has +2 Attack.", "example": "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample465-example2"}
{"intent": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> Your weapon has +2 Attack.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample465-example3"}
{"intent": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> Your weapon has +2 Attack.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample465-example4"}
{"intent": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample466-example0"}
{"intent": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample466-example1"}
{"intent": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample466-example2"}
{"intent": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample466-example3"}
{"intent": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample466-example4"}
{"intent": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample467-example0"}
{"intent": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample467-example1"}
{"intent": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample467-example2"}
{"intent": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample467-example3"}
{"intent": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample467-example4"}
{"intent": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy a random enemy minion with 2 or less Attack.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample468-example0"}
{"intent": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy a random enemy minion with 2 or less Attack.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample468-example1"}
{"intent": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy a random enemy minion with 2 or less Attack.", "example": "class Echoing Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echoing Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give Effect ( Effect ( Turn Ended ( ) , Action Tag ( Duplicate ( Self Selector ( ) ) , Player Selector ( ) ) ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample468-example2"}
{"intent": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy a random enemy minion with 2 or less Attack.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample468-example3"}
{"intent": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy a random enemy minion with 2 or less Attack.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample468-example4"}
{"intent": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "example": "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample469-example0"}
{"intent": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "example": "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample469-example1"}
{"intent": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample469-example2"}
{"intent": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "example": "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample469-example3"}
{"intent": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One - </b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "example": "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample469-example4"}
{"intent": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Overload : </b> (1)", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], "source": "sample470-example0"}
{"intent": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Overload : </b> (1)", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample470-example1"}
{"intent": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Overload : </b> (1)", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample470-example2"}
{"intent": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Overload : </b> (1)", "example": "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample470-example3"}
{"intent": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Overload : </b> (1)", "example": "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample470-example4"}
{"intent": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample471-example0"}
{"intent": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample471-example1"}
{"intent": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample471-example2"}
{"intent": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample471-example3"}
{"intent": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Stealth </b>", "example": "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample471-example4"}
{"intent": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Divine Shield </b>", "example": "class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample472-example0"}
{"intent": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Divine Shield </b>", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample472-example1"}
{"intent": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Divine Shield </b>", "example": "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample472-example2"}
{"intent": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Divine Shield </b>", "example": "class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample472-example3"}
{"intent": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL <b> Divine Shield </b>", "example": "class Voidwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidwalker ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample472-example4"}
{"intent": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample473-example0"}
{"intent": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "example": "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample473-example1"}
{"intent": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "example": "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample473-example2"}
{"intent": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample473-example3"}
{"intent": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "example": "class Warsong Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warsong Commander ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample473-example4"}
{"intent": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Take control of a random enemy minion.", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample474-example0"}
{"intent": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Take control of a random enemy minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], "source": "sample474-example1"}
{"intent": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Take control of a random enemy minion.", "example": "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample474-example2"}
{"intent": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Take control of a random enemy minion.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample474-example3"}
{"intent": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Take control of a random enemy minion.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample474-example4"}
{"intent": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Enrage : </b> +3 Attack", "example": "class Raging Worgen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raging Worgen ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) , Aura ( Windfury ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample475-example0"}
{"intent": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Enrage : </b> +3 Attack", "example": "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], "source": "sample475-example1"}
{"intent": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Enrage : </b> +3 Attack", "example": "class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample475-example2"}
{"intent": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Enrage : </b> +3 Attack", "example": "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample475-example3"}
{"intent": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> . <b> Enrage : </b> +3 Attack", "example": "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample475-example4"}
{"intent": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +3 Health.", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample476-example0"}
{"intent": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +3 Health.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample476-example1"}
{"intent": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +3 Health.", "example": "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample476-example2"}
{"intent": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +3 Health.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample476-example3"}
{"intent": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Give a friendly minion +3 Health.", "example": "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample476-example4"}
{"intent": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 3/3 Finkle Einhorn for your opponent.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample477-example0"}
{"intent": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 3/3 Finkle Einhorn for your opponent.", "example": "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample477-example1"}
{"intent": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 3/3 Finkle Einhorn for your opponent.", "example": "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample477-example2"}
{"intent": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 3/3 Finkle Einhorn for your opponent.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample477-example3"}
{"intent": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a 3/3 Finkle Einhorn for your opponent.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample477-example4"}
{"intent": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy an enemy minion with <b> Taunt </b> .", "example": "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample478-example0"}
{"intent": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy an enemy minion with <b> Taunt </b> .", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample478-example1"}
{"intent": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy an enemy minion with <b> Taunt </b> .", "example": "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample478-example2"}
{"intent": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy an enemy minion with <b> Taunt </b> .", "example": "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample478-example3"}
{"intent": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Destroy an enemy minion with <b> Taunt </b> .", "example": "class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample478-example4"}
{"intent": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "example": "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample479-example0"}
{"intent": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "example": "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample479-example1"}
{"intent": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "example": "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample479-example2"}
{"intent": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "example": "class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample479-example3"}
{"intent": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], "source": "sample479-example4"}
{"intent": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Divine Shield </b> . <b> Taunt </b> . <b> Deathrattle : </b> Equip a 5/3 Ashbringer.", "example": "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample480-example0"}
{"intent": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Divine Shield </b> . <b> Taunt </b> . <b> Deathrattle : </b> Equip a 5/3 Ashbringer.", "example": "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample480-example1"}
{"intent": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Divine Shield </b> . <b> Taunt </b> . <b> Deathrattle : </b> Equip a 5/3 Ashbringer.", "example": "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], "source": "sample480-example2"}
{"intent": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Divine Shield </b> . <b> Taunt </b> . <b> Deathrattle : </b> Equip a 5/3 Ashbringer.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample480-example3"}
{"intent": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Divine Shield </b> . <b> Taunt </b> . <b> Deathrattle : </b> Equip a 5/3 Ashbringer.", "example": "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample480-example4"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> . At the end of the turn, destroy this minion.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample481-example0"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> . At the end of the turn, destroy this minion.", "example": "class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample481-example1"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> . At the end of the turn, destroy this minion.", "example": "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample481-example2"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> . At the end of the turn, destroy this minion.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample481-example3"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Charge </b> . At the end of the turn, destroy this minion.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample481-example4"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample482-example0"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample482-example1"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample482-example2"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample482-example3"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample482-example4"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample483-example0"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample483-example1"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample483-example2"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample483-example3"}
{"intent": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Taunt </b>", "example": "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample483-example4"}
{"intent": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> Gain +1 Health for each card in your hand.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample484-example0"}
{"intent": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> Gain +1 Health for each card in your hand.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample484-example1"}
{"intent": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> Gain +1 Health for each card in your hand.", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample484-example2"}
{"intent": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> Gain +1 Health for each card in your hand.", "example": "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample484-example3"}
{"intent": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> Gain +1 Health for each card in your hand.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample484-example4"}
{"intent": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "example": "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], "source": "sample485-example0"}
{"intent": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "example": "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], "source": "sample485-example1"}
{"intent": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "example": "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample485-example2"}
{"intent": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "example": "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample485-example3"}
{"intent": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], "source": "sample485-example4"}
{"intent": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b> Overload </b> , gain +1/+1.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample486-example0"}
{"intent": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b> Overload </b> , gain +1/+1.", "example": "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample486-example1"}
{"intent": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b> Overload </b> , gain +1/+1.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample486-example2"}
{"intent": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b> Overload </b> , gain +1/+1.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample486-example3"}
{"intent": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b> Overload </b> , gain +1/+1.", "example": "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample486-example4"}
{"intent": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b> Charge </b> .", "example": "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "source": "sample487-example0"}
{"intent": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b> Charge </b> .", "example": "class Blessing Of Kings ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Kings ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample487-example1"}
{"intent": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b> Charge </b> .", "example": "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], "source": "sample487-example2"}
{"intent": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b> Charge </b> .", "example": "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], "source": "sample487-example3"}
{"intent": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b> Charge </b> .", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], "source": "sample487-example4"}
{"intent": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample488-example0"}
{"intent": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "example": "class Illidan Stormrage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illidan Stormrage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Summon ( Flame Of Azzinoth ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample488-example1"}
{"intent": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "example": "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample488-example2"}
{"intent": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample488-example3"}
{"intent": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "example": "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample488-example4"}
{"intent": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample489-example0"}
{"intent": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Silver Hand Recruit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Recruit ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample489-example1"}
{"intent": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], "source": "sample489-example2"}
{"intent": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Spectral Spider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Spider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample489-example3"}
{"intent": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample489-example4"}
{"intent": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "example": "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample490-example0"}
{"intent": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample490-example1"}
{"intent": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample490-example2"}
{"intent": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "example": "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample490-example3"}
{"intent": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "example": "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample490-example4"}
{"intent": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy the minions on either side of this minion and gain their Attack and Health.", "example": "class Echoing Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echoing Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give Effect ( Effect ( Turn Ended ( ) , Action Tag ( Duplicate ( Self Selector ( ) ) , Player Selector ( ) ) ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample491-example0"}
{"intent": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy the minions on either side of this minion and gain their Attack and Health.", "example": "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample491-example1"}
{"intent": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy the minions on either side of this minion and gain their Attack and Health.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample491-example2"}
{"intent": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy the minions on either side of this minion and gain their Attack and Health.", "example": "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample491-example3"}
{"intent": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b> Battlecry : </b> Destroy the minions on either side of this minion and gain their Attack and Health.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample491-example4"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample492-example0"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample492-example1"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample492-example2"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample492-example3"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample492-example4"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample493-example0"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample493-example1"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample493-example2"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample493-example3"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample493-example4"}
{"intent": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample494-example0"}
{"intent": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "example": "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample494-example1"}
{"intent": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "example": "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample494-example2"}
{"intent": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "example": "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample494-example3"}
{"intent": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample494-example4"}
{"intent": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample495-example0"}
{"intent": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample495-example1"}
{"intent": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Frostwolf Grunt ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Grunt ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample495-example2"}
{"intent": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample495-example3"}
{"intent": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample495-example4"}
{"intent": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample496-example0"}
{"intent": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "example": "class Core Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Rager ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample496-example1"}
{"intent": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample496-example2"}
{"intent": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample496-example3"}
{"intent": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample496-example4"}
{"intent": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "example": "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample497-example0"}
{"intent": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "example": "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample497-example1"}
{"intent": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample497-example2"}
{"intent": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "example": "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample497-example3"}
{"intent": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "example": "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample497-example4"}
{"intent": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample498-example0"}
{"intent": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample498-example1"}
{"intent": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample498-example2"}
{"intent": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "source": "sample498-example3"}
{"intent": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b> Windfury </b>", "example": "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "source": "sample498-example4"}
{"intent": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "example": "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample499-example0"}
{"intent": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "example": "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample499-example1"}
{"intent": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "example": "class Blood Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample499-example2"}
{"intent": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample499-example3"}
{"intent": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "example": "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample499-example4"}
{"intent": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample500-example0"}
{"intent": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample500-example1"}
{"intent": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample500-example2"}
{"intent": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample500-example3"}
{"intent": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Return a friendly minion from the battlefield to your hand.", "example": "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample500-example4"}
{"intent": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample501-example0"}
{"intent": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample501-example1"}
{"intent": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample501-example2"}
{"intent": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "example": "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample501-example3"}
{"intent": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "example": "class Jeeves ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jeeves ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Draw ( Difference ( Count ( Card Selector ( players = Current Player ( ) ) ) , value = 3 ) ) , Player Selector ( Current Player ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample501-example4"}
{"intent": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "example": "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample502-example0"}
{"intent": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "example": "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample502-example1"}
{"intent": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample502-example2"}
{"intent": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "example": "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "source": "sample502-example3"}
{"intent": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample502-example4"}
{"intent": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample503-example0"}
{"intent": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "example": "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample503-example1"}
{"intent": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "example": "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample503-example2"}
{"intent": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "example": "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample503-example3"}
{"intent": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "example": "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample503-example4"}
{"intent": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1/+1.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample504-example0"}
{"intent": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1/+1.", "example": "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample504-example1"}
{"intent": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1/+1.", "example": "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample504-example2"}
{"intent": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1/+1.", "example": "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample504-example3"}
{"intent": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +1/+1.", "example": "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample504-example4"}
{"intent": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "example": "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample505-example0"}
{"intent": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample505-example1"}
{"intent": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "example": "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample505-example2"}
{"intent": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample505-example3"}
{"intent": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "example": "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample505-example4"}
{"intent": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> If your hand is empty, gain +3/+3.", "example": "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample506-example0"}
{"intent": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> If your hand is empty, gain +3/+3.", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample506-example1"}
{"intent": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> If your hand is empty, gain +3/+3.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample506-example2"}
{"intent": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> If your hand is empty, gain +3/+3.", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample506-example3"}
{"intent": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b> Battlecry : </b> If your hand is empty, gain +3/+3.", "example": "class Illuminator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illuminator ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "source": "sample506-example4"}
{"intent": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 2 damage to all undamaged enemy minions.", "example": "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample507-example0"}
{"intent": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 2 damage to all undamaged enemy minions.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample507-example1"}
{"intent": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 2 damage to all undamaged enemy minions.", "example": "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample507-example2"}
{"intent": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 2 damage to all undamaged enemy minions.", "example": "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample507-example3"}
{"intent": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 2 damage to all undamaged enemy minions.", "example": "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], "source": "sample507-example4"}
{"intent": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "example": "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample508-example0"}
{"intent": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "example": "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "source": "sample508-example1"}
{"intent": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "example": "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample508-example2"}
{"intent": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample508-example3"}
{"intent": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "example": "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample508-example4"}
{"intent": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> The next Dragon you play costs (2) less.", "example": "class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample509-example0"}
{"intent": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> The next Dragon you play costs (2) less.", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample509-example1"}
{"intent": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> The next Dragon you play costs (2) less.", "example": "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample509-example2"}
{"intent": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> The next Dragon you play costs (2) less.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample509-example3"}
{"intent": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b> Battlecry : </b> The next Dragon you play costs (2) less.", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample509-example4"}
{"intent": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "example": "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample510-example0"}
{"intent": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample510-example1"}
{"intent": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "example": "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample510-example2"}
{"intent": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "example": "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample510-example3"}
{"intent": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "example": "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], "source": "sample510-example4"}
{"intent": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "example": "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample511-example0"}
{"intent": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "example": "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample511-example1"}
{"intent": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "example": "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample511-example2"}
{"intent": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "example": "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample511-example3"}
{"intent": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "example": "class Ancestors Call ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestor ` s Call ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for player in game . players : minions = [ card for card in player . hand if card . is_minion ( ) ] if len ( minions ) and len ( player . minions ) < 7 : minion_card = game . random_choice ( minions ) minion_card . unattach ( ) player . hand . remove ( minion_card ) minion_card . summon ( player , game , len ( player . minions ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], "source": "sample511-example4"}
{"intent": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample512-example0"}
{"intent": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample512-example1"}
{"intent": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample512-example2"}
{"intent": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample512-example3"}
{"intent": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample512-example4"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Transform into a 5/2 minion; or a 2/5 minion.", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample513-example0"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Transform into a 5/2 minion; or a 2/5 minion.", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample513-example1"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Transform into a 5/2 minion; or a 2/5 minion.", "example": "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample513-example2"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Transform into a 5/2 minion; or a 2/5 minion.", "example": "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "source": "sample513-example3"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Choose One </b> - Transform into a 5/2 minion; or a 2/5 minion.", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample513-example4"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample514-example0"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample514-example1"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample514-example2"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample514-example3"}
{"intent": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "example": "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], "source": "sample514-example4"}
{"intent": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "example": "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], "source": "sample515-example0"}
{"intent": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "example": "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample515-example1"}
{"intent": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample515-example2"}
{"intent": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "example": "class Prophet Velen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Prophet Velen ` , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample515-example3"}
{"intent": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "example": "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample515-example4"}
{"intent": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain 1-4 Attack. <b> Overload : </b> (1)", "example": "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], "source": "sample516-example0"}
{"intent": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain 1-4 Attack. <b> Overload : </b> (1)", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample516-example1"}
{"intent": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain 1-4 Attack. <b> Overload : </b> (1)", "example": "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample516-example2"}
{"intent": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain 1-4 Attack. <b> Overload : </b> (1)", "example": "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], "source": "sample516-example3"}
{"intent": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Gain 1-4 Attack. <b> Overload : </b> (1)", "example": "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample516-example4"}
{"intent": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "example": "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample517-example0"}
{"intent": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "example": "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample517-example1"}
{"intent": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "example": "class Flame Leviathan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Leviathan ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Both Player ( ) ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample517-example2"}
{"intent": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "example": "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], "source": "sample517-example3"}
{"intent": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "example": "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample517-example4"}
{"intent": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "example": "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample518-example0"}
{"intent": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "example": "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], "source": "sample518-example1"}
{"intent": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "example": "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], "source": "sample518-example2"}
{"intent": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "example": "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], "source": "sample518-example3"}
{"intent": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "source": "sample518-example4"}
{"intent": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "example": "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample519-example0"}
{"intent": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample519-example1"}
{"intent": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "example": "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample519-example2"}
{"intent": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "example": "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample519-example3"}
{"intent": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "example": "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample519-example4"}
{"intent": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "example": "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample520-example0"}
{"intent": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "example": "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], "source": "sample520-example1"}
{"intent": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "example": "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "source": "sample520-example2"}
{"intent": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "example": "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample520-example3"}
{"intent": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "example": "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample520-example4"}
{"intent": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b> Overloaded </b> Mana Crystals.", "example": "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], "source": "sample521-example0"}
{"intent": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b> Overloaded </b> Mana Crystals.", "example": "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], "source": "sample521-example1"}
{"intent": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b> Overloaded </b> Mana Crystals.", "example": "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "source": "sample521-example2"}
{"intent": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b> Overloaded </b> Mana Crystals.", "example": "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], "source": "sample521-example3"}
{"intent": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b> Overloaded </b> Mana Crystals.", "example": "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "tag": [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "source": "sample521-example4"}
{"intent": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Replace your hero with Ragnaros, the Firelord.", "example": "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "source": "sample522-example0"}
{"intent": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Replace your hero with Ragnaros, the Firelord.", "example": "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], "source": "sample522-example1"}
{"intent": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Replace your hero with Ragnaros, the Firelord.", "example": "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample522-example2"}
{"intent": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Replace your hero with Ragnaros, the Firelord.", "example": "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample522-example3"}
{"intent": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Deathrattle : </b> Replace your hero with Ragnaros, the Firelord.", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], "source": "sample522-example4"}
{"intent": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "example": "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], "source": "sample523-example0"}
{"intent": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "example": "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample523-example1"}
{"intent": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "example": "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample523-example2"}
{"intent": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "example": "class Worthless Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worthless Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , MINION_TYPE . DEMON ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample523-example3"}
{"intent": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b> Battlecry : </b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "example": "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample523-example4"}
{"intent": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "example": "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], "source": "sample524-example0"}
{"intent": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "example": "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample524-example1"}
{"intent": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "example": "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample524-example2"}
{"intent": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "example": "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], "source": "sample524-example3"}
{"intent": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "example": "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], "source": "sample524-example4"}
{"intent": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> If you're holding a Dragon, destroy a <b> Legendary </b> minion.", "example": "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "source": "sample525-example0"}
{"intent": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> If you're holding a Dragon, destroy a <b> Legendary </b> minion.", "example": "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], "source": "sample525-example1"}
{"intent": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> If you're holding a Dragon, destroy a <b> Legendary </b> minion.", "example": "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "tag": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample525-example2"}
{"intent": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> If you're holding a Dragon, destroy a <b> Legendary </b> minion.", "example": "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], "source": "sample525-example3"}
{"intent": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> If you're holding a Dragon, destroy a <b> Legendary </b> minion.", "example": "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], "source": "sample525-example4"}
{"intent": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "example": "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "source": "sample526-example0"}
{"intent": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "example": "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "source": "sample526-example1"}
{"intent": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "example": "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], "source": "sample526-example2"}
{"intent": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "example": "class Reincarnate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reincarnate ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . check_delayed ( ) self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "source": "sample526-example3"}
{"intent": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "example": "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], "source": "sample526-example4"}
{"intent": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "example": "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample527-example0"}
{"intent": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "example": "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "source": "sample527-example1"}
{"intent": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "example": "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "source": "sample527-example2"}
{"intent": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "example": "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "tag": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], "source": "sample527-example3"}
{"intent": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "example": "class Ice Lance ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Lance ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . frozen : self . target . damage ( 4 , self ) else : self . target . add_buff ( Buff ( Frozen ( ) ) )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], "source": "sample527-example4"}
{"intent": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "example": "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample528-example0"}
{"intent": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "example": "class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], "source": "sample528-example1"}
{"intent": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "example": "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample528-example2"}
{"intent": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "example": "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample528-example3"}
{"intent": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "example": "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "source": "sample528-example4"}
{"intent": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL Costs (1) less for each minion that died this turn.", "example": "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "tag": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample529-example0"}
{"intent": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL Costs (1) less for each minion that died this turn.", "example": "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample529-example1"}
{"intent": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL Costs (1) less for each minion that died this turn.", "example": "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample529-example2"}
{"intent": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL Costs (1) less for each minion that died this turn.", "example": "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample529-example3"}
{"intent": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt </b> NL Costs (1) less for each minion that died this turn.", "example": "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "tag": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample529-example4"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample530-example0"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample530-example1"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample530-example2"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample530-example3"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample530-example4"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample531-example0"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample531-example1"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample531-example2"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample531-example3"}
{"intent": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample531-example4"}
{"intent": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "source": "sample532-example0"}
{"intent": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample532-example1"}
{"intent": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample532-example2"}
{"intent": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample532-example3"}
{"intent": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "example": "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "tag": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "source": "sample532-example4"}
