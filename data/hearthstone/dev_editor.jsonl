{"input": "Assassin's Blade NAME_END 3 ATK_END -1 DEF_END 5 COST_END 4 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "output": "class Assassins Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassin ` s Blade ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 3 , 4 )"}
{"input": "Boulderfist Ogre NAME_END 6 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Boulderfist Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boulderfist Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 6 , 7 )"}
{"input": "Deadly Poison NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your weapon +2 Attack. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . change_temp_attack ( <pad> )", "output": "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None"}
{"input": "Fire Elemental NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Deal 3 damage. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )"}
{"input": "Gnomish Inventor NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> Draw a card. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"}
{"input": "Heroic Strike NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +4 Attack this turn. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> player . hero . change_temp_attack <pad> . <pad> ( <pad> ) <pad>", "output": "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )"}
{"input": "Ironbark Protector NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "output": "class Ironbark Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbark Protector ` , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 8 , 8 , taunt = True )"}
{"input": "Mark of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b> Taunt </b> and +2/+2.<i> (+2 Attack/+2 Health)</i> [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : <pad> . <pad> ( <pad> super ( ) . <pad> ) def <pad> ( self , player ) : player <pad> game . <pad> . <pad> ( <pad> self . _reveal ) def <pad> ( self , player ) : player <pad> . <pad> ( <pad> , self . <pad> )", "output": "class Mark Of The Wild ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) self . target . taunt = True"}
{"input": "Multi-Shot NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to two random enemy minions. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) ) )", "output": "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2"}
{"input": "Power Word : Shield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +2 Health. NL Draw a card. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( <pad> ( ) ) )", "output": "class Power Word Shield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Word : Shield ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 2 ) player . draw ( )"}
{"input": "Sen'jin Shieldmasta NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "output": "class Senjin Shieldmasta ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sen ` jin Shieldmasta ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )"}
{"input": "Sinister Strike NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to the enemy hero. [SEP] class <pad> Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Strike ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . <pad> ( <pad> )", "output": "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"}
{"input": "Succubus NAME_END 4 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b> Battlecry : </b> Discard a random card. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector <pad> Player <pad> picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"}
{"input": "War Golem NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , False , <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class War Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` War Golem ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 7 )"}
{"input": "Acidmaw NAME_END 4 ATK_END 2 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever another minion takes damage, destroy it. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "output": "class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )"}
{"input": "Boar NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b> Charge </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )", "output": "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"}
{"input": "Anodized Robo Cub NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Taunt </b> . <b> Choose One - </b> NL +1 Attack; or +1 Health. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , <pad> = <pad> Buff ( Change <pad> ( <pad> ) , <pad> ( ) , <pad> ( <pad> ( <pad> ) , <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "output": "class Anodized Robo Cub ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anodized Robo Cub ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , choices = [ Choice ( Attack Mode ( ) , Give ( [ Buff ( Change Attack ( 1 ) ) ] ) , Self Selector ( ) ) , Choice ( Tank Mode ( ) , Give ( [ Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )"}
{"input": "Burrowing Mine NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END When you draw this, it explodes. You take 10 damage and draw a card. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( player . <pad> ( <pad> ) , <pad> )", "output": "class Burrowing Mine ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burrowing Mine ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 10 ) , Hero Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Discard ( query = Card Query ( source = CARD_SOURCE . LAST_DRAWN ) ) , Player Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game )"}
{"input": "Crackle NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3-$6 damage. <b> Overload : </b> (1) [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> . <pad> ( <pad> ) <pad> ( )", "output": "class Crackle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crackle ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( game . random_amount ( 3 , 6 ) ) , self )"}
{"input": "Emergency Coolant NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b> Freeze </b> a minion. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ) self . target . <pad> . <pad> ( <pad> ) <pad> )", "output": "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )"}
{"input": "Flying Machine NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Windfury </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "output": "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )"}
{"input": "Goblin Auto-Barber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Battlecry </b> : Give your weapon +1 Attack. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ( Change Attack ( <pad> ) ) <pad> ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) ) ) )", "output": "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"}
{"input": "Iron Sensei NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, give another friendly Mech +2/+2. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag ( <pad> ( <pad> ) , <pad> Selector ( <pad> = <pad> ( ) , picker = <pad> Picker ( ) ) ) ) ] )", "output": "class Iron Sensei ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Sensei ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) ) ] )"}
{"input": "Mal'Ganis NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Your other Demons have +2/+2. NL Your hero is <b> Immune </b> . [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> = <pad> )", "output": "class Mal Ganis ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mal ` Ganis ` , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 9 , 7 , auras = [ Aura ( Change Health ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . DEMON ) ) ) , Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . DEMON ) ) ) , Aura ( Immune ( ) , Hero Selector ( ) ) ] )"}
{"input": "Mistress of Pain NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END Whenever this minion deals damage, restore that much Health to your hero. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> Damaged <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "output": "class Mistress Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mistress of Pain ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Heal ( Event Value ( ) ) , Hero Selector ( ) ) ) ] )"}
{"input": "Powermace NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Deathrattle </b> : Give a random friendly Mech +2/+2. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> = <pad> ( <pad> Attack ( <pad> ) , <pad> ( ) ) ) <pad> ) <pad> )", "output": "class Powermace ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Powermace ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )"}
{"input": "Screwjank Clunker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b> Battlecry </b> : Give a friendly Mech +2/+2. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( <pad> ( ) ) ) , Minion Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "output": "class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )"}
{"input": "Sneed's Old Shredder NAME_END 5 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b> Deathrattle : </b> Summon a random legendary minion. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> , <pad> ( ) ) ) <pad> , <pad> ) <pad> ( <pad> )", "output": "class Sneeds Old Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sneed ` s Old Shredder ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 7 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Rarity ( CARD_RARITY . LEGENDARY ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )"}
{"input": "Toshley NAME_END 5 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry and Deathrattle : </b> Add a <b> Spare Part </b> card to your hand. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "output": "class Toshley ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Toshley ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 5 , 7 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )"}
{"input": "Warbot NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Common RARITY_END <b> Enrage : </b> +1 Attack. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> ( <pad> ( <pad> ) , <pad> ( ) , <pad> ( <pad> ) ) <pad> , <pad> ) <pad> )", "output": "class Warbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warbot ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) ] )"}
{"input": "Deathlord NAME_END 2 ATK_END 8 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Taunt. Deathrattle : </b> Your opponent puts a minion from their deck into the battlefield. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ) ) <pad> )", "output": "class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )"}
{"input": "Nerub'ar Weblord NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Minions with <b> Battlecry </b> cost (2) more. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = <pad> Battlecry ( Give ( <pad> ( <pad> Change <pad> ( <pad> ) <pad> ) <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Nerubar Weblord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerub ` ar Weblord ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , auras = [ Aura ( Mana Change ( 2 ) , Card Selector ( Both Player ( ) , Has Battlecry ( ) ) ) ] )"}
{"input": "Spectral Knight NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "output": "class Spectral Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , spell_targetable = False )"}
{"input": "Wailing Soul NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : Silence </b> your other minions. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Silence ( ) , Minion Selector <pad> Player <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )"}
{"input": "Amani Berserker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Enrage : </b> +3 Attack [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "output": "class Amani Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Amani Berserker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"}
{"input": "Archmage Antonidas NAME_END 5 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a spell, add a 'Fireball' spell to your hand. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) ] )", "output": "class Archmage Antonidas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage Antonidas ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 7 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Add Card ( hearthbreaker . cards . Fireball ( ) ) , Player Selector ( ) ) ) ] )"}
{"input": "Bananas NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1/+1. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ) <pad> )", "output": "class Bananas ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bananas ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 ) self . target . increase_health ( 1 )"}
{"input": "Blessed Champion NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Double a minion's Attack. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack <pad> )", "output": "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )"}
{"input": "Cabal Shadow Priest NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Battlecry : </b> Take control of an enemy minion that has 2 or less Attack. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "output": "class Cabal Shadow Priest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cabal Shadow Priest ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"}
{"input": "Cone of Cold NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Freeze </b> a minion and the minions next to it, and deal $1 damage to them. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> player <pad> ( ) <pad> : <pad> . <pad> ( self ) <pad> . <pad> ) <pad> ( <pad> . <pad> ( ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player <pad> . <pad> ( <pad> , <pad> . <pad> )", "output": "class Cone Of Cold ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cone of Cold ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) )"}
{"input": "Defender of Argus NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions +1/+1 and <b> Taunt </b> . [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "output": "class Defender Of Argus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender of Argus ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Taunt ( ) ) , Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"}
{"input": "Doomhammer NAME_END 2 ATK_END -1 DEF_END 5 COST_END 8 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b> Windfury, Overload : </b> (2) [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 2 , <pad> )", "output": "class Doomhammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomhammer ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 2 ) def create_weapon ( self , player ) : return Weapon ( 2 , 8 , buffs = [ Buff ( Windfury ( ) ) ] )"}
{"input": "Earth Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Silence </b> a minion, then deal $1 damage to it. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( ) ) )", "output": "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"}
{"input": "Eye for an Eye NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your hero takes damage, deal that much damage to the enemy hero. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ( <pad> ( ) <pad> ) , <pad> , <pad> ) , <pad> ( <pad> = <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ( <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) . <pad> ( <pad> , <pad> )", "output": "class Eye For An Eye ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eye for an Eye ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : character . player . opponent . hero . damage ( amount , self ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` character_damaged ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` character_damaged ` , self . _reveal )"}
{"input": "Flare NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END All minions lose <b> Stealth </b> . Destroy all enemy <b> Secrets </b> . Draw a card. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> , <pad> ( <pad> ( ) <pad> Selector ( <pad> Player ( <pad> ( ) ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "output": "class Flare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flare ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : m . stealth ) : minion . stealth = False for secret in game . other_player . secrets : secret . deactivate ( game . other_player ) game . other_player . secrets = [ ] player . draw ( )"}
{"input": "Gorehowl NAME_END 7 ATK_END -1 DEF_END 7 COST_END 1 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Attacking a minion costs 1 Attack instead of 1 Durability. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> Attack ( ) ) )", "output": "class Gorehowl ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gorehowl ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 7 , 1 , effects = [ Effect ( Character Attack ( And ( Is Hero ( ) , Target Is Minion ( ) ) ) , [ Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) , Action Tag ( Increase Weapon Attack ( - 1 ) , Weapon Selector ( ) ) , Action Tag ( Give ( Buff Until ( Change Attack ( 1 ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ] ) ] )"}
{"input": "Hound NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b> Charge </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "output": "class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )"}
{"input": "Injured Blademaster NAME_END 4 ATK_END 7 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Deal 4 damage to HIMSELF. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Inventor ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )"}
{"input": "Knife Juggler NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you summon a minion, deal 1 damage to a random enemy. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> ( <pad> , <pad> Enemy Player ( ) , <pad> = <pad> Picker ( ) ) ) ) <pad> ) <pad> )", "output": "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )"}
{"input": "Lightwell NAME_END 0 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the start of your turn, restore 3 Health to a damaged friendly character. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) <pad> ) , <pad> Selector <pad> ( <pad> picker = <pad> Picker ( ) ) ) ) ] )", "output": "class Lightwell ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwell ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 5 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 3 ) , Character Selector ( condition = Is Damaged ( ) , picker = Random Picker ( ) ) ) ) ] )"}
{"input": "Mana Wyrm NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you cast a spell, gain +1 Attack. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "output": "class Mana Wyrm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wyrm ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"}
{"input": "Mogu'shan Warden NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Taunt </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "output": "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )"}
{"input": "Nourish NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Choose One </b> - Gain 2 Mana Crystals; or Draw 3 cards. [SEP] class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> , <pad> = <pad> ( <pad> ) <pad> ( <pad> ) , <pad> ( ) , <pad> ( <pad> ) , <pad> ) <pad> ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> )", "output": "class Nourish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nourish ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Gain2 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gain 2 mana crystals ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : if player . max_mana < 8 : player . max_mana + = 2 player . mana + = 2 else : player . max_mana = 10 player . mana + = 2 class Draw3 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Draw three cards ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : player . draw ( ) player . draw ( ) player . draw ( ) option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) option . use ( player , game )"}
{"input": "Preparation NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END The next spell you cast this turn costs (3) less. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( player . <pad> ( 3 ) , <pad> )", "output": "class Preparation ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Preparation ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Spell ( ) ) , Spell Cast ( ) ) )"}
{"input": "Repentance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Secret : </b> When your opponent plays a minion, reduce its Health to 1. [SEP] class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> self <pad> player <pad> . <pad> ) <pad> : <pad> . <pad> ( self <pad> . <pad> . <pad> def activate ( self , player ) : player . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . unbind ( ` <pad> ` , self . _reveal )", "output": "class Repentance ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Repentance ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion ) : minion . set_health_to ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal )"}
{"input": "Shadow of Nothing NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Mindgames whiffed! Your opponent had no minions! [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = [ <pad> ( <pad> ( ) , <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ) ) ) ) ] )", "output": "class Shadow Of Nothing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow of Nothing ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , False ) def create_minion ( self , p ) : return Minion ( 0 , 1 )"}
{"input": "Slam NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it survives, draw a card. [SEP] class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( ) <pad> )", "output": "class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"}
{"input": "Spellbreaker NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry : </b> <b> Silence </b> a minion. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"}
{"input": "Sunfury Protector NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Battlecry : </b> Give adjacent minions <b> Taunt </b> . [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> = Both Player <pad> , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "output": "class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"}
{"input": "Tinkmaster Overspark NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b> Battlecry : </b> Transform another random minion into a 5/5 Devilsaur or a 1/1 Squirrel. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( <pad> ) , <pad> ( ) , <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Tinkmaster Overspark ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinkmaster Overspark ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Transform ( Card Query ( source = CARD_SOURCE . LIST , source_list = [ Devilsaur ( ) , Squirrel ( ) ] ) ) , Minion Selector ( players = Both Player ( ) , picker = Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"}
{"input": "Vaporize NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b> Secret : </b> When a minion attacks your hero, destroy it. [SEP] class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : <pad> . <pad> . <pad> ) def activate ( self , player ) : player . game . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal )", "output": "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )"}
{"input": "Worgen Infiltrator NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Stealth </b> [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "output": "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )"}
{"input": "Blackwing Corruptor NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b> Battlecry </b> : If you're holding a Dragon, deal 3 damage. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , battlecry = ( Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"}
{"input": "Drakonid Crusher NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b> Battlecry : </b> If your opponent has 15 or less Health, gain +3/+3. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( <pad> ) ) ) , Self Selector ( ) , Greater Than ( Count ( <pad> Selector ( <pad> = Is <pad> ( <pad> ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Drakonid Crusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drakonid Crusher ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ` health ` , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"}
{"input": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 <pad> )", "output": "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"}
{"input": "Twilight Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b> Battlecry : </b> If you're holding a Dragon, gain +2 Health. [SEP] class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "output": "class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"}
