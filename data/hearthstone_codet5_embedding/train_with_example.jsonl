{"input": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Destroy your opponent's weapon.", "output": "class AcidicSwampOoze(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acidic Swamp Ooze\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(), WeaponSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Acidic", "Swamp", "Ooze", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "your", "opponent's", "weapon."], "output_tokens": ["class", "Acidic", "Swamp", "Ooze", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Acidic", "Swamp", "Ooze", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Destroy", "(", ")", ",", "Weapon", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )"]}
{"input": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b>Taunt</b>.", "output": "class AncestralHealing(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Healing\", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(self.target.calculate_max_health()), self)\u00a7        self.target.taunt = True\u00a7", "input_tokens": ["Ancestral", "Healing", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Restore", "a", "minion", "to", "full", "Health", "and", "give", "it", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Ancestral", "Healing", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancestral", "Healing", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "self", ".", "target", ".", "calculate_max_health", "(", ")", ")", ",", "self", ")", "self", ".", "target", ".", "taunt", "=", "True"], "examples": ["class Reincarnate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reincarnate ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . check_delayed ( ) self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Hunters Mark ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hunter ` s Mark ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . set_health_to ( 1 )", "class Light Of The Naaru ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light of the Naaru ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 3 ) , self ) lightwarden = Lightwarden ( ) if self . target is None : lightwarden . summon ( player , game , len ( player . minions ) ) elif self . target . health ! = self . target . calculate_max_health ( ) : lightwarden . summon ( player , game , len ( player . minions ) )", "class Circle Of Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Circle of Healing ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . heal ( player . effective_heal_power ( 4 ) , self )"]}
{"input": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "output": "class AnimalCompanion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Animal Companion\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        beast_list = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.cards.minions.hunter.Leokk()]\u00a7        card = game.random_choice(beast_list)\u00a7        card.summon(player, player.game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Animal", "Companion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Summon", "a", "random", "Beast", "Companion."], "output_tokens": ["class", "Animal", "Companion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Animal", "Companion", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "beast_list", "=", "[", "hearthbreaker", ".", "cards", ".", "minions", ".", "hunter", ".", "Huffer", "(", ")", ",", "hearthbreaker", ".", "cards", ".", "minions", ".", "hunter", ".", "Misha", "(", ")", ",", "hearthbreaker", ".", "cards", ".", "minions", ".", "hunter", ".", "Leokk", "(", ")", "]", "card", "=", "game", ".", "random_choice", "(", "beast_list", ")", "card", ".", "summon", "(", "player", ",", "player", ".", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )"]}
{"input": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "output": "class ArcaneExplosion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Explosion\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Arcane", "Explosion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$1", "damage", "to", "all", "enemy", "minions."], "output_tokens": ["class", "Arcane", "Explosion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Explosion", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "output": "class ArcaneIntellect(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Intellect\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for c in range(0, 2):\u00a7            player.draw()\u00a7", "input_tokens": ["Arcane", "Intellect", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Draw", "2", "cards."], "output_tokens": ["class", "Arcane", "Intellect", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Intellect", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "c", "in", "range", "(", "0", ",", "2", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Sprint ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sprint ` , 7 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 4 ) : player . draw ( )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "output": "class ArcaneMissiles(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Missiles\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, player.effective_spell_damage(3)):\u00a7            targets = copy.copy(game.other_player.minions)\u00a7            targets.append(game.other_player.hero)\u00a7            target = game.random_choice(targets)\u00a7            target.damage(1, self)\u00a7", "input_tokens": ["Arcane", "Missiles", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "randomly", "split", "among", "all", "enemies."], "output_tokens": ["class", "Arcane", "Missiles", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Missiles", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "player", ".", "effective_spell_damage", "(", "3", ")", ")", ":", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "damage", "(", "1", ",", "self", ")"], "examples": ["class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Avenging Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenging Wrath ` , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )"]}
{"input": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "output": "class ArcaneShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Shot\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Arcane", "Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$2", "damage."], "output_tokens": ["class", "Arcane", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Shot", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class ArcaniteReaper(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcanite Reaper\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(5, 2)\u00a7", "input_tokens": ["Arcanite", "Reaper", "NAME_END", "5", "ATK_END", "-1", "DEF_END", "5", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Arcanite", "Reaper", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcanite", "Reaper", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "5", ",", "2", ")"], "examples": ["class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )"]}
{"input": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "output": "class Assassinate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Assassinate\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7", "input_tokens": ["Assassinate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Destroy", "an", "enemy", "minion."], "output_tokens": ["class", "Assassinate", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Assassinate", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")"], "examples": ["class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Shadow Word Pain ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Pain ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "output": "class Backstab(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Backstab\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health == target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Backstab", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$2", "damage", "to", "an", "undamaged", "minion."], "output_tokens": ["class", "Backstab", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Backstab", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "health", "=", "=", "target", ".", "calculate_max_health", "(", ")", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )"]}
{"input": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "output": "class BlessingOfKings(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Kings\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(4)\u00a7        self.target.increase_health(4)\u00a7", "input_tokens": ["Blessing", "of", "Kings", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "a", "minion", "+4/+4.", "<i>(+4", "Attack/+4", "Health)</i>"], "output_tokens": ["class", "Blessing", "Of", "Kings", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blessing", "of", "Kings", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "4", ")", "self", ".", "target", ".", "increase_health", "(", "4", ")"], "examples": ["class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "class Hand Of Protection ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hand of Protection ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . divine_shield = True", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )"]}
{"input": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "output": "class BlessingOfMight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Might\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(3)\u00a7", "input_tokens": ["Blessing", "of", "Might", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "+3", "Attack."], "output_tokens": ["class", "Blessing", "Of", "Might", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blessing", "of", "Might", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "3", ")"], "examples": ["class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Hand Of Protection ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hand of Protection ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . divine_shield = True", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )"]}
{"input": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "output": "class BloodfenRaptor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodfen Raptor\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Bloodfen", "Raptor", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Bloodfen", "Raptor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bloodfen", "Raptor", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Oasis Snapjaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Oasis Snapjaw ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 7 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "output": "class Bloodlust(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodlust\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in player.minions:\u00a7            minion.change_temp_attack(3)\u00a7", "input_tokens": ["Bloodlust", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "minions", "+3", "Attack", "this", "turn."], "output_tokens": ["class", "Bloodlust", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bloodlust", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "player", ".", "minions", ":", "minion", ".", "change_temp_attack", "(", "3", ")"], "examples": ["class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )"]}
{"input": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b>Charge</b>", "output": "class BluegillWarrior(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bluegill Warrior\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, charge=True)\u00a7", "input_tokens": ["Bluegill", "Warrior", "NAME_END", "2", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Bluegill", "Warrior", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bluegill", "Warrior", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "charge", "=", "True", ")"], "examples": ["class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )"]}
{"input": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Boar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Boar", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Boar", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boar", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b>Charge</b>.", "output": "class Charge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Charge\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(2)\u00a7        self.target.add_buff(Buff(_Charge()))\u00a7", "input_tokens": ["Charge", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "friendly", "minion", "+2", "Attack", "and", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Charge", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Charge", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "_Charge", "(", ")", ")", ")"], "examples": ["class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )"]}
{"input": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class ChillwindYeti(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chillwind Yeti\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Chillwind", "Yeti", "NAME_END", "4", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Chillwind", "Yeti", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Chillwind", "Yeti", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )"]}
{"input": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "output": "class Claw(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Claw\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(2)\u00a7        player.hero.increase_armor(2)\u00a7", "input_tokens": ["Claw", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "your", "hero", "+2", "Attack", "this", "turn", "and", "2", "Armor."], "output_tokens": ["class", "Claw", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Claw", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "2", ")", "player", ".", "hero", ".", "increase_armor", "(", "2", ")"], "examples": ["class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )"]}
{"input": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "output": "class Cleave(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cleave\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(game.other_player.minions)\u00a7\u00a7        for i in range(0, 2):\u00a7            minion = game.random_choice(minions)\u00a7            minions.remove(minion)\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7", "input_tokens": ["Cleave", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "two", "random", "enemy", "minions."], "output_tokens": ["class", "Cleave", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cleave", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minions", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "minion", "=", "game", ".", "random_choice", "(", "minions", ")", "minions", ".", "remove", "(", "minion", ")", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "2"], "examples": ["class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "output": "class Consecration(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Consecration\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Consecration", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "all", "enemies."], "output_tokens": ["class", "Consecration", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Consecration", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "class Avenging Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenging Wrath ` , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class CoreHound(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Core Hound\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 5)\u00a7", "input_tokens": ["Core", "Hound", "NAME_END", "9", "ATK_END", "5", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Core", "Hound", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Core", "Hound", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "5", ")"], "examples": ["class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Salty Dog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Salty Dog ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 7 , 4 )", "class Oasis Snapjaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Oasis Snapjaw ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 7 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "output": "class Corruption(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Corruption\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()), ActionTag(Kill(), SelfSelector())))\u00a7", "input_tokens": ["Corruption", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Choose", "an", "enemy", "minion.", "At", "the", "start", "of", "your", "turn,", "destroy", "it."], "output_tokens": ["class", "Corruption", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Corruption", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_effect", "(", "Effect", "(", "Turn", "Started", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Self", "Selector", "(", ")", ")", ")", ")"], "examples": ["class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Finicky Cloakfield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finicky Cloakfield ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )"]}
{"input": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "output": "class DalaranMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dalaran Mage\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, spell_damage=1)\u00a7", "input_tokens": ["Dalaran", "Mage", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Dalaran", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dalaran", "Mage", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "spell_damage", "=", "1", ")"], "examples": ["class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )"]}
{"input": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "output": "class DivineSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Divine Spirit\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.increase_health(self.target.health)\u00a7", "input_tokens": ["Divine", "Spirit", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Double", "a", "minion's", "Health."], "output_tokens": ["class", "Divine", "Spirit", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Divine", "Spirit", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "increase_health", "(", "self", ".", "target", ".", "health", ")"], "examples": ["class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )"]}
{"input": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 2/1 Mechanical Dragonling.", "output": "class DragonlingMechanic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragonling Mechanic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Dragonling", "Mechanic", "NAME_END", "2", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "2/1", "Mechanical", "Dragonling."], "output_tokens": ["class", "Dragonling", "Mechanic", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragonling", "Mechanic", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Mechanical", "Dragonling", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "output": "class DrainLife(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Drain Life\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7        player.hero.heal(player.effective_heal_power(2), self)\u00a7", "input_tokens": ["Drain", "Life", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$2", "damage.", "Restore", "#2", "Health", "to", "your", "hero."], "output_tokens": ["class", "Drain", "Life", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Drain", "Life", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "2", ")", ",", "self", ")"], "examples": ["class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Lava Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Shock ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 2 , self ) player . upcoming_overload = 0 player . mana + = player . current_overload player . current_overload = 0", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage to ALL other characters.", "output": "class DreadInfernal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dread Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Dread", "Infernal", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "1", "damage", "to", "ALL", "other", "characters."], "output_tokens": ["class", "Dread", "Infernal", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dread", "Infernal", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"], "examples": ["class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )", "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage.", "output": "class ElvenArcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Elven Archer\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Elven", "Archer", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "1", "damage."], "output_tokens": ["class", "Elven", "Archer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Elven", "Archer", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )"]}
{"input": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "output": "class ExcessMana(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Excess Mana\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.draw()\u00a7", "input_tokens": ["Excess", "Mana", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Draw", "a", "card.", "<i>(You", "can", "only", "have", "10", "Mana", "in", "your", "tray.)</i>"], "output_tokens": ["class", "Excess", "Mana", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Excess", "Mana", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "draw", "(", ")"], "examples": ["class Divine Favor ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Favor ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) difference = len ( game . other_player . hand ) - len ( player . hand ) for i in range ( 0 , difference ) : player . draw ( )", "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "output": "class Execute(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Execute\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7", "input_tokens": ["Execute", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Destroy", "a", "damaged", "enemy", "minion."], "output_tokens": ["class", "Execute", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Execute", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "health", "!", "=", "target", ".", "calculate_max_health", "(", ")", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")"], "examples": ["class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "output": "class FanOfKnives(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fan of Knives\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        player.draw()\u00a7", "input_tokens": ["Fan", "of", "Knives", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage", "to", "all", "enemy", "minions.", "Draw", "a", "card."], "output_tokens": ["class", "Fan", "Of", "Knives", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fan", "of", "Knives", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "player", ".", "draw", "(", ")"], "examples": ["class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )"]}
{"input": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "output": "class Fireball(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fireball\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(6), self)\u00a7", "input_tokens": ["Fireball", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$6", "damage."], "output_tokens": ["class", "Fireball", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fireball", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "6", ")", ",", "self", ")"], "examples": ["class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Pyroblast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pyroblast ` , 10 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 10 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "output": "class Flamestrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamestrike\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(4), self)\u00a7", "input_tokens": ["Flamestrike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$4", "damage", "to", "all", "enemy", "minions."], "output_tokens": ["class", "Flamestrike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flamestrike", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")"], "examples": ["class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )"]}
{"input": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "output": "class FlametongueTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flametongue Totem\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(Adjacent()))])\u00a7", "input_tokens": ["Flametongue", "Totem", "NAME_END", "0", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Common", "RARITY_END", "Adjacent", "minions", "have", "+2", "Attack."], "output_tokens": ["class", "Flametongue", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flametongue", "Totem", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "3", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", "]", ")"], "examples": ["class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )"]}
{"input": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class Frog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frog\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(0, 1, taunt=True)\u00a7", "input_tokens": ["Frog", "NAME_END", "0", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Frog", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frog", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "0", ",", "1", ",", "taunt", "=", "True", ")"], "examples": ["class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Target Dummy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Target Dummy ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )"]}
{"input": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> all enemy minions.", "output": "class FrostNova(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Nova\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in game.other_player.minions:\u00a7            minion.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Frost", "Nova", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "all", "enemy", "minions."], "output_tokens": ["class", "Frost", "Nova", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frost", "Nova", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "game", ".", "other_player", ".", "minions", ":", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )"]}
{"input": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b>Freeze</b> it.", "output": "class FrostShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Shock\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Frost", "Shock", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$1", "damage", "to", "an", "enemy", "character", "and", "<b>", "Freeze", "</b>", "it."], "output_tokens": ["class", "Frost", "Shock", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frost", "Shock", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Ice Lance ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Lance ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . frozen : self . target . damage ( 4 , self ) else : self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Ysera Awakens ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera Awakens ` , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . other_player . minions ) targets . extend ( player . game . current_player . minions ) targets . append ( player . game . other_player . hero ) targets . append ( player . game . current_player . hero ) targets = filter ( lambda m : not m . is_minion ( ) or m . card . name ! = ` Ysera ` , targets ) for minion in targets : minion . damage ( player . effective_spell_damage ( 5 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b>Freeze</b> it.", "output": "class Frostbolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostbolt\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Frostbolt", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage", "to", "a", "character", "and", "<b>", "Freeze", "</b>", "it."], "output_tokens": ["class", "Frostbolt", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frostbolt", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Ice Lance ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Lance ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . frozen : self . target . damage ( 4 , self ) else : self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )"]}
{"input": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class FrostwolfGrunt(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostwolf Grunt\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7", "input_tokens": ["Frostwolf", "Grunt", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Frostwolf", "Grunt", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frostwolf", "Grunt", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )"]}
{"input": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class GoldshireFootman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goldshire Footman\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, taunt=True)\u00a7", "input_tokens": ["Goldshire", "Footman", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Goldshire", "Footman", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Goldshire", "Footman", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )"]}
{"input": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "output": "class GrimscaleOracle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grimscale Oracle\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\u00a7", "input_tokens": ["Grimscale", "Oracle", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Common", "RARITY_END", "ALL", "other", "Murlocs", "have", "+1", "Attack."], "output_tokens": ["class", "Grimscale", "Oracle", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Grimscale", "Oracle", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "Both", "Player", "(", ")", ")", ")", "]", ")"], "examples": ["class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Murloc Tidecaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidecaller ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ ( Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )"]}
{"input": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 6 Health to your hero.", "output": "class GuardianOfKings(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Guardian of Kings\", 7, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7", "input_tokens": ["Guardian", "of", "Kings", "NAME_END", "5", "ATK_END", "6", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "6", "Health", "to", "your", "hero."], "output_tokens": ["class", "Guardian", "Of", "Kings", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Guardian", "of", "Kings", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "6", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "6", ")"], "examples": ["class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Cobalt Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobalt Guardian ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( Divine Shield ( ) ) , Self Selector ( ) ) ) ] )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "output": "class GurubashiBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gurubashi Berserker\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 7, effects=[\u00a7            Effect(CharacterDamaged(condition=MinionIsTarget()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\u00a7", "input_tokens": ["Gurubashi", "Berserker", "NAME_END", "2", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "gain", "+3", "Attack."], "output_tokens": ["class", "Gurubashi", "Berserker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gurubashi", "Berserker", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "condition", "=", "Minion", "Is", "Target", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "3", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Gahzrilla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gahz ` rilla ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action Tag ( Give ( Buff ( Double Attack ( ) ) ) , Self Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "output": "class HammerOfWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hammer of Wrath\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        player.draw()\u00a7", "input_tokens": ["Hammer", "of", "Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage.", "NL", "Draw", "a", "card."], "output_tokens": ["class", "Hammer", "Of", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hammer", "of", "Wrath", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "player", ".", "draw", "(", ")"], "examples": ["class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Divine Shield</b>.", "output": "class HandOfProtection(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hand of Protection\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.divine_shield = True\u00a7", "input_tokens": ["Hand", "of", "Protection", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "<b>", "Divine", "Shield", "</b>", "."], "output_tokens": ["class", "Hand", "Of", "Protection", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hand", "of", "Protection", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "divine_shield", "=", "True"], "examples": ["class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Velens Chosen ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Velen ` s Chosen ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . increase_health ( 4 ) self . target . add_buff ( Buff ( Spell Damage ( 1 ) ) )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )"]}
{"input": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "output": "class HealingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])\u00a7", "input_tokens": ["Healing", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "restore", "1", "Health", "to", "all", "friendly", "minions."], "output_tokens": ["class", "Healing", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Healing", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "1", ")", ",", "Minion", "Selector", "(", "condition", "=", "None", ")", ")", ")", "]", ")"], "examples": ["class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )"]}
{"input": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "output": "class HealingTouch(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Touch\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.heal(player.effective_heal_power(8), self)\u00a7", "input_tokens": ["Healing", "Touch", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Restore", "#8", "Health."], "output_tokens": ["class", "Healing", "Touch", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Healing", "Touch", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "8", ")", ",", "self", ")"], "examples": ["class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "class Circle Of Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Circle of Healing ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . heal ( player . effective_heal_power ( 4 ) , self )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Light Of The Naaru ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light of the Naaru ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 3 ) , self ) lightwarden = Lightwarden ( ) if self . target is None : lightwarden . summon ( player , game , len ( player . minions ) ) elif self . target . health ! = self . target . calculate_max_health ( ) : lightwarden . summon ( player , game , len ( player . minions ) )"]}
{"input": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b>Taunt</b>.", "output": "class Hex(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hex\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        frog = hearthbreaker.cards.minions.neutral.Frog()\u00a7        minion = frog.create_minion(None)\u00a7        minion.card = frog\u00a7        self.target.replace(minion)\u00a7", "input_tokens": ["Hex", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Transform", "a", "minion", "into", "a", "0/1", "Frog", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Hex", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hex", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "frog", "=", "hearthbreaker", ".", "cards", ".", "minions", ".", "neutral", ".", "Frog", "(", ")", "minion", "=", "frog", ".", "create_minion", "(", "None", ")", "minion", ".", "card", "=", "frog", "self", ".", "target", ".", "replace", "(", "minion", ")"], "examples": ["class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "output": "class HolyLight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Light\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(6), self)\u00a7", "input_tokens": ["Holy", "Light", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Restore", "#6", "Health."], "output_tokens": ["class", "Holy", "Light", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Light", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "6", ")", ",", "self", ")"], "examples": ["class Lay On Hands ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lay on Hands ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self ) player . draw ( ) player . draw ( ) player . draw ( )", "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "class Light Of The Naaru ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light of the Naaru ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 3 ) , self ) lightwarden = Lightwarden ( ) if self . target is None : lightwarden . summon ( player , game , len ( player . minions ) ) elif self . target . health ! = self . target . calculate_max_health ( ) : lightwarden . summon ( player , game , len ( player . minions ) )", "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )"]}
{"input": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "output": "class HolyNova(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Nova\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7        for minion in player.minions:\u00a7            minion.heal(player.effective_heal_power(2), self)\u00a7", "input_tokens": ["Holy", "Nova", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "all", "enemies.", "Restore", "#2", "Health", "to", "all", "friendly", "characters."], "output_tokens": ["class", "Holy", "Nova", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Nova", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "for", "minion", "in", "player", ".", "minions", ":", "minion", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "2", ")", ",", "self", ")"], "examples": ["class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Ysera Awakens ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera Awakens ` , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . other_player . minions ) targets . extend ( player . game . current_player . minions ) targets . append ( player . game . other_player . hero ) targets . append ( player . game . current_player . hero ) targets = filter ( lambda m : not m . is_minion ( ) or m . card . name ! = ` Ysera ` , targets ) for minion in targets : minion . damage ( player . effective_spell_damage ( 5 ) , self )", "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "output": "class HolySmite(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Smite\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Holy", "Smite", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$2", "damage."], "output_tokens": ["class", "Holy", "Smite", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Smite", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Give a friendly Beast +2/+2 and <b>Taunt</b>.", "output": "class Houndmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Houndmaster\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Houndmaster", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "Beast", "+2/+2", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Houndmaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Houndmaster", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "NONE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Taunt", "(", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Core Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Rager ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class King Of Beasts ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King of Beasts ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 6 , taunt = True )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Charge</b>", "output": "class Huffer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Huffer\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, charge=True)\u00a7", "input_tokens": ["Huffer", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Huffer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Huffer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "charge", "=", "True", ")"], "examples": ["class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )"]}
{"input": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "output": "class Humility(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Humility\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(1 - self.target.calculate_attack())\u00a7", "input_tokens": ["Humility", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Change", "a", "minion's", "Attack", "to", "1."], "output_tokens": ["class", "Humility", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Humility", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "1", "-", "self", ".", "target", ".", "calculate_attack", "(", ")", ")"], "examples": ["class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "class Hunters Mark ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hunter ` s Mark ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . set_health_to ( 1 )", "class Equality ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Equality ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . set_health_to ( 1 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) > 0 or len ( game . other_player . minions ) > 0 )", "class Lightspawn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightspawn ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 5 , buffs = [ Buff ( Attack Equals Health ( ) ) ] )"]}
{"input": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "output": "class HuntersMark(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hunter's Mark\", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.set_health_to(1)\u00a7", "input_tokens": ["Hunter's", "Mark", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Change", "a", "minion's", "Health", "to", "1."], "output_tokens": ["class", "Hunters", "Mark", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hunter", "`", "s", "Mark", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "set_health_to", "(", "1", ")"], "examples": ["class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "class Reversing Switch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reversing Switch ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) temp_attack = self . target . calculate_attack ( ) temp_health = self . target . health if temp_attack = = 0 : self . target . die ( None ) else : self . target . set_attack_to ( temp_health ) self . target . set_health_to ( temp_attack )"]}
{"input": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage.", "output": "class IronforgeRifleman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironforge Rifleman\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Ironforge", "Rifleman", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "1", "damage."], "output_tokens": ["class", "Ironforge", "Rifleman", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ironforge", "Rifleman", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "NONE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )"]}
{"input": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class IronfurGrizzly(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironfur Grizzly\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, taunt=True)\u00a7", "input_tokens": ["Ironfur", "Grizzly", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Ironfur", "Grizzly", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ironfur", "Grizzly", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "taunt", "=", "True", ")"], "examples": ["class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )"]}
{"input": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "output": "class KillCommand(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kill Command\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        beasts = hearthbreaker.targeting.find_friendly_minion_battlecry_target(\u00a7            player.game, lambda x: x.card.minion_type is MINION_TYPE.BEAST)\u00a7        if beasts is None:\u00a7            self.target.damage(player.effective_spell_damage(3), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(5), self)\u00a7", "input_tokens": ["Kill", "Command", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage.", "If", "you", "have", "a", "Beast,", "deal", "$5", "damage", "instead."], "output_tokens": ["class", "Kill", "Command", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kill", "Command", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "beasts", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_battlecry_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "x", ".", "card", ".", "minion_type", "is", "MINION_TYPE", ".", "BEAST", ")", "if", "beasts", "is", "None", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")"], "examples": ["class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )"]}
{"input": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "output": "class KoboldGeomancer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kobold Geomancer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, spell_damage=1)\u00a7", "input_tokens": ["Kobold", "Geomancer", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Kobold", "Geomancer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kobold", "Geomancer", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "spell_damage", "=", "1", ")"], "examples": ["class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )"]}
{"input": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "output": "class KorkronElite(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3, charge=True)\u00a7", "input_tokens": ["Kor'kron", "Elite", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Korkron", "Elite", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kor", "`", "kron", "Elite", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ",", "charge", "=", "True", ")"], "examples": ["class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )"]}
{"input": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "output": "class Leokk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leokk\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\u00a7", "input_tokens": ["Leokk", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "Your", "other", "minions", "have", "+1", "Attack."], "output_tokens": ["class", "Leokk", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Leokk", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Raid Leader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raid Leader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class LightsJustice(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Light's Justice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 4)\u00a7", "input_tokens": ["Light's", "Justice", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "4", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Lights", "Justice", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Light", "`", "s", "Justice", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "4", ")"], "examples": ["class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Silver Hand Recruit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Recruit ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )"]}
{"input": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class LordOfTheArena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord of the Arena\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5, taunt=True)\u00a7", "input_tokens": ["Lord", "of", "the", "Arena", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Lord", "Of", "The", "Arena", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lord", "of", "the", "Arena", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ",", "taunt", "=", "True", ")"], "examples": ["class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )"]}
{"input": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "output": "class MechanicalDragonling(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechanical Dragonling\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Mechanical", "Dragonling", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Mechanical", "Dragonling", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mechanical", "Dragonling", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "output": "class MindBlast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Blast\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        game.other_player.hero.damage(player.effective_spell_damage(5), self)\u00a7", "input_tokens": ["Mind", "Blast", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$5", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Mind", "Blast", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mind", "Blast", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")"], "examples": ["class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "output": "class MindControl(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Control\", 10, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        new_minion = self.target.copy(player)\u00a7        self.target.remove_from_board()\u00a7        new_minion.add_to_board(len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Mind", "Control", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "10", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Take", "control", "of", "an", "enemy", "minion."], "output_tokens": ["class", "Mind", "Control", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mind", "Control", "`", ",", "10", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "new_minion", "=", "self", ".", "target", ".", "copy", "(", "player", ")", "self", ".", "target", ".", "remove_from_board", "(", ")", "new_minion", ".", "add_to_board", "(", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "output": "class MindVision(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Vision\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if (len(game.other_player.hand) > 0):\u00a7            card = copy.deepcopy(game.random_choice(game.other_player.hand))\u00a7            player.hand.append(card)\u00a7            card.player = player\u00a7", "input_tokens": ["Mind", "Vision", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Put", "a", "copy", "of", "a", "random", "card", "in", "your", "opponent's", "hand", "into", "your", "hand."], "output_tokens": ["class", "Mind", "Vision", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mind", "Vision", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "(", "len", "(", "game", ".", "other_player", ".", "hand", ")", ">", "0", ")", ":", "card", "=", "copy", ".", "deepcopy", "(", "game", ".", "random_choice", "(", "game", ".", "other_player", ".", "hand", ")", ")", "player", ".", "hand", ".", "append", "(", "card", ")", "card", ".", "player", "=", "player"], "examples": ["class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Thoughtsteal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thoughtsteal ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) if new_card : new_card = copy . copy ( new_card ) new_card . drawn = True if len ( player . hand ) < 10 : player . hand . append ( new_card ) new_card . player = player self . trigger ( ` card_drawn ` , new_card ) else : player . trigger ( ` card_destroyed ` , new_card )", "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )"]}
{"input": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class MirrorImage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Image\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            MirrorImageMinion().summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Mirror", "Image", "NAME_END", "0", "ATK_END", "2", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Mirror", "Image", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mirror", "Image", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "Mirror", "Image", "Minion", "(", ")", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Target Dummy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Target Dummy ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )"]}
{"input": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b>Taunt</b>.", "output": "class MirrorImage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Image\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            MirrorImageMinion().summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Mirror", "Image", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Summon", "two", "0/2", "minions", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Mirror", "Image", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mirror", "Image", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "Mirror", "Image", "Minion", "(", ")", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )"]}
{"input": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class Misha(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misha\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, taunt=True)\u00a7", "input_tokens": ["Misha", "NAME_END", "4", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Misha", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Misha", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )"]}
{"input": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "output": "class Moonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Moonfire\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Moonfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage."], "output_tokens": ["class", "Moonfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Moonfire", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "output": "class MurlocRaider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Raider\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Murloc", "Raider", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Murloc", "Raider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Murloc", "Raider", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
{"input": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "output": "class MurlocScout(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Scout\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Murloc", "Scout", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Murloc", "Scout", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Murloc", "Scout", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 1/1 Murloc Scout.", "output": "class MurlocTidehunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Tidehunter\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Summon(MurlocScout()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Murloc", "Tidehunter", "NAME_END", "2", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "1/1", "Murloc", "Scout."], "output_tokens": ["class", "Murloc", "Tidehunter", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Murloc", "Tidehunter", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Murloc", "Scout", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )"]}
{"input": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry: </b>Deal 3 damage to the enemy hero.", "output": "class Nightblade(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nightblade\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Damage(3), HeroSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Nightblade", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Nightblade", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nightblade", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )"]}
{"input": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "output": "class NorthshireCleric(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Northshire Cleric\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(CharacterHealed(condition=IsMinion(), player=BothPlayer()), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Northshire", "Cleric", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Whenever", "a", "minion", "is", "healed,", "draw", "a", "card."], "output_tokens": ["class", "Northshire", "Cleric", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Northshire", "Cleric", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Character", "Healed", "(", "condition", "=", "Is", "Minion", "(", ")", ",", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )"]}
{"input": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Draw a card.", "output": "class NoviceEngineer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Novice Engineer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Novice", "Engineer", "NAME_END", "1", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Novice", "Engineer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Novice", "Engineer", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "battlecry", "=", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "output": "class OasisSnapjaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Oasis Snapjaw\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 7)\u00a7", "input_tokens": ["Oasis", "Snapjaw", "NAME_END", "2", "ATK_END", "7", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Oasis", "Snapjaw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Oasis", "Snapjaw", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "7", ")"], "examples": ["class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Salty Dog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Salty Dog ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 7 , 4 )"]}
{"input": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "output": "class OgreMagi(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Magi\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, spell_damage=1)\u00a7", "input_tokens": ["Ogre", "Magi", "NAME_END", "4", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Ogre", "Magi", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ogre", "Magi", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "spell_damage", "=", "1", ")"], "examples": ["class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )"]}
{"input": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "output": "class RaidLeader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Raid Leader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector())])\u00a7", "input_tokens": ["Raid", "Leader", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Your", "other", "minions", "have", "+1", "Attack."], "output_tokens": ["class", "Raid", "Leader", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Raid", "Leader", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "class Dire Wolf Alpha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dire Wolf Alpha ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )"]}
{"input": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 1/1 Boar.", "output": "class RazorfenHunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Razorfen Hunter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Boar()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Razorfen", "Hunter", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "1/1", "Boar."], "output_tokens": ["class", "Razorfen", "Hunter", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Razorfen", "Hunter", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Boar", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )"]}
{"input": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Charge</b>", "output": "class RecklessRocketeer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Reckless Rocketeer\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 2, charge=True)\u00a7", "input_tokens": ["Reckless", "Rocketeer", "NAME_END", "5", "ATK_END", "2", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Reckless", "Rocketeer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Reckless", "Rocketeer", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "2", ",", "charge", "=", "True", ")"], "examples": ["class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )"]}
{"input": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "output": "class RiverCrocolisk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"River Crocolisk\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["River", "Crocolisk", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "River", "Crocolisk", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "River", "Crocolisk", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Oasis Snapjaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Oasis Snapjaw ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 7 )", "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "output": "class RockbiterWeapon(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rockbiter Weapon\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_temp_attack(3)\u00a7", "input_tokens": ["Rockbiter", "Weapon", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "friendly", "character", "+3", "Attack", "this", "turn."], "output_tokens": ["class", "Rockbiter", "Weapon", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Rockbiter", "Weapon", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_temp_attack", "(", "3", ")"], "examples": ["class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )"]}
{"input": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "output": "class SacrificialPact(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sacrificial Pact\", 0, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, filter_func=lambda character: character.card.minion_type == MINION_TYPE.DEMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(5), self)\u00a7", "input_tokens": ["Sacrificial", "Pact", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "a", "Demon.", "Restore", "#5", "Health", "to", "your", "hero."], "output_tokens": ["class", "Sacrificial", "Pact", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sacrificial", "Pact", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "filter_func", "=", "lambda", "character", ":", "character", ".", "card", ".", "minion_type", "=", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "5", ")", ",", "self", ")"], "examples": ["class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Totemic Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Totemic Might ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : if minion . card . minion_type = = MINION_TYPE . TOTEM : minion . increase_health ( 2 )", "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )"]}
{"input": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "output": "class Sap(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sap\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.bounce()\u00a7", "input_tokens": ["Sap", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Return", "an", "enemy", "minion", "to", "your", "opponent's", "hand."], "output_tokens": ["class", "Sap", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sap", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "bounce", "(", ")"], "examples": ["class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )"]}
{"input": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "output": "class SavageRoar(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savage Roar\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            minion.change_temp_attack(2)\u00a7        player.hero.change_temp_attack(2)\u00a7", "input_tokens": ["Savage", "Roar", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "characters", "+2", "Attack", "this", "turn."], "output_tokens": ["class", "Savage", "Roar", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Savage", "Roar", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "player", ".", "minions", ":", "minion", ".", "change_temp_attack", "(", "2", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "2", ")"], "examples": ["class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "output": "class ShadowBolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Bolt\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7", "input_tokens": ["Shadow", "Bolt", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$4", "damage", "to", "a", "minion."], "output_tokens": ["class", "Shadow", "Bolt", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "Bolt", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")"], "examples": ["class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Shadow Word: Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "output": "class ShadowWordDeath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Word: Death\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() >= 5 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7", "input_tokens": ["Shadow", "Word", ":", "Death", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "a", "minion", "with", "an", "Attack", "of", "5", "or", "more."], "output_tokens": ["class", "Shadow", "Word", "Death", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "Word", ":", "Death", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "calculate_attack", "(", ")", ">", "=", "5", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")"], "examples": ["class Shadow Word Pain ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Pain ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) < = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )"]}
{"input": "Shadow Word: Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "output": "class ShadowWordPain(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Word: Pain\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7", "input_tokens": ["Shadow", "Word", ":", "Pain", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Destroy", "a", "minion", "with", "3", "or", "less", "Attack."], "output_tokens": ["class", "Shadow", "Word", "Pain", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "Word", ":", "Pain", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "calculate_attack", "(", ")", "<", "=", "3", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")"], "examples": ["class Shadow Word Death ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Word : Death ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) > = 5 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion +1/+1.", "output": "class ShatteredSunCleric(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shattered Sun Cleric\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Shattered", "Sun", "Cleric", "NAME_END", "3", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "minion", "+1/+1."], "output_tokens": ["class", "Shattered", "Sun", "Cleric", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shattered", "Sun", "Cleric", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Dark Iron Dwarf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Dwarf ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Sheep(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sheep\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Sheep", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Sheep", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sheep", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "output": "class ShieldBlock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shield Block\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.increase_armor(5)\u00a7        player.draw()\u00a7", "input_tokens": ["Shield", "Block", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Gain", "5", "Armor.", "NL", "Draw", "a", "card."], "output_tokens": ["class", "Shield", "Block", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shield", "Block", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "increase_armor", "(", "5", ")", "player", ".", "draw", "(", ")"], "examples": ["class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "class Sprint ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sprint ` , 7 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 4 ) : player . draw ( )", "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )"]}
{"input": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "output": "class Shiv(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shiv\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7        player.draw()\u00a7", "input_tokens": ["Shiv", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage.", "Draw", "a", "card."], "output_tokens": ["class", "Shiv", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shiv", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "player", ".", "draw", "(", ")"], "examples": ["class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class SilverHandRecruit(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silver Hand Recruit\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Silver", "Hand", "Recruit", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Silver", "Hand", "Recruit", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silver", "Hand", "Recruit", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Lights Justice ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light ` s Justice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 1 , 4 )", "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon"]}
{"input": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "output": "class Soulfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soulfire\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7        player.discard()\u00a7", "input_tokens": ["Soulfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$4", "damage.", "Discard", "a", "random", "card."], "output_tokens": ["class", "Soulfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Soulfire", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")", "player", ".", "discard", "(", ")"], "examples": ["class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )"]}
{"input": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "output": "class Sprint(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sprint\", 7, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 4):\u00a7            player.draw()\u00a7", "input_tokens": ["Sprint", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Draw", "4", "cards."], "output_tokens": ["class", "Sprint", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sprint", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Ancestral Knowledge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Knowledge ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "output": "class Starfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starfire\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7        player.draw()\u00a7", "input_tokens": ["Starfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$5", "damage.", "NL", "Draw", "a", "card."], "output_tokens": ["class", "Starfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Starfire", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")", "player", ".", "draw", "(", ")"], "examples": ["class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "output": "class StarvingBuzzard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starving Buzzard\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(MinionPlaced(IsType(MINION_TYPE.BEAST)), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Starving", "Buzzard", "NAME_END", "3", "ATK_END", "2", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "summon", "a", "Beast,", "draw", "a", "card."], "output_tokens": ["class", "Starving", "Buzzard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Starving", "Buzzard", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Minion", "Placed", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Illidan Stormrage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illidan Stormrage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Summon ( Flame Of Azzinoth ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Taunt</b>", "output": "class StoneclawTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneclaw Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7", "input_tokens": ["Stoneclaw", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Free", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Stoneclaw", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stoneclaw", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b>Charge</b>", "output": "class StonetuskBoar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stonetusk Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, charge=True)\u00a7", "input_tokens": ["Stonetusk", "Boar", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Free", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Stonetusk", "Boar", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stonetusk", "Boar", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "charge", "=", "True", ")"], "examples": ["class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"]}
{"input": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 2 damage.", "output": "class StormpikeCommando(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormpike Commando\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2)\u00a7", "input_tokens": ["Stormpike", "Commando", "NAME_END", "4", "ATK_END", "2", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "2", "damage."], "output_tokens": ["class", "Stormpike", "Commando", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stormpike", "Commando", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ")"], "examples": ["class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "output": "class StormwindChampion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormwind Champion\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, auras=[Aura(ChangeAttack(1), MinionSelector()), Aura(ChangeHealth(1), MinionSelector())])\u00a7", "input_tokens": ["Stormwind", "Champion", "NAME_END", "6", "ATK_END", "6", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Your", "other", "minions", "have", "+1/+1."], "output_tokens": ["class", "Stormwind", "Champion", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stormwind", "Champion", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", ")", ")", ",", "Aura", "(", "Change", "Health", "(", "1", ")", ",", "Minion", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Venture Co Mercenary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Venture Co . Mercenary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 6 , auras = [ Aura ( Mana Change ( 3 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "class Raid Leader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raid Leader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )"]}
{"input": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "output": "class Swipe(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Swipe\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(4, self)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            if minion is not self.target:\u00a7                minion.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        if self.target is not game.other_player.hero:\u00a7            game.other_player.hero.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Swipe", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$4", "damage", "to", "an", "enemy", "and", "$1", "damage", "to", "all", "other", "enemies."], "output_tokens": ["class", "Swipe", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Swipe", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "4", ",", "self", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "if", "minion", "is", "not", "self", ".", "target", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "if", "self", ".", "target", "is", "not", "game", ".", "other_player", ".", "hero", ":", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "output": "class TimberWolf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Timber Wolf\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.BEAST)))])\u00a7", "input_tokens": ["Timber", "Wolf", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Free", "RARITY_END", "Your", "other", "Beasts", "have", "+1", "Attack."], "output_tokens": ["class", "Timber", "Wolf", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Timber", "Wolf", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ")", "]", ")"], "examples": ["class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )"]}
{"input": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "output": "class TotemicMight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Totemic Might\", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in player.minions:\u00a7            if minion.card.minion_type == MINION_TYPE.TOTEM:\u00a7                minion.increase_health(2)\u00a7", "input_tokens": ["Totemic", "Might", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "Totems", "+2", "Health."], "output_tokens": ["class", "Totemic", "Might", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Totemic", "Might", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "player", ".", "minions", ":", "if", "minion", ".", "card", ".", "minion_type", "=", "=", "MINION_TYPE", ".", "TOTEM", ":", "minion", ".", "increase_health", "(", "2", ")"], "examples": ["class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )"]}
{"input": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "output": "class Tracking(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tracking\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        cards = []\u00a7        for card_index in range(0, 3):\u00a7            if player.can_draw():\u00a7                cards.append(player.deck.draw(game))\u00a7        if len(cards) > 0:\u00a7            chosen_card = player.agent.choose_option(cards, player)\u00a7            player.hand.append(chosen_card)\u00a7            player.hand[-1].player = player\u00a7            player.trigger(\"card_drawn\", chosen_card)\u00a7", "input_tokens": ["Tracking", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Look", "at", "the", "top", "three", "cards", "of", "your", "deck.", "Draw", "one", "and", "discard", "the", "others."], "output_tokens": ["class", "Tracking", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tracking", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "cards", "=", "[", "]", "for", "card_index", "in", "range", "(", "0", ",", "3", ")", ":", "if", "player", ".", "can_draw", "(", ")", ":", "cards", ".", "append", "(", "player", ".", "deck", ".", "draw", "(", "game", ")", ")", "if", "len", "(", "cards", ")", ">", "0", ":", "chosen_card", "=", "player", ".", "agent", ".", "choose_option", "(", "cards", ",", "player", ")", "player", ".", "hand", ".", "append", "(", "chosen_card", ")", "player", ".", "hand", "[", "-", "1", "]", ".", "player", "=", "player", "player", ".", "trigger", "(", "`", "card_drawn", "`", ",", "chosen_card", ")"], "examples": ["class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )"]}
{"input": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "output": "class TruesilverChampion(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Truesilver Champion\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Heal(2), HeroSelector()))])\u00a7", "input_tokens": ["Truesilver", "Champion", "NAME_END", "4", "ATK_END", "-1", "DEF_END", "4", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "hero", "attacks,", "restore", "2", "Health", "to", "it."], "output_tokens": ["class", "Truesilver", "Champion", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Truesilver", "Champion", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "4", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "Is", "Hero", "(", ")", ")", ",", "Action", "Tag", "(", "Heal", "(", "2", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )", "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "class Ogre Warmaul ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Warmaul ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"]}
{"input": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b>Charge</b>.", "output": "class TundraRhino(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tundra Rhino\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, charge=True, auras=[Aura(Charge(), MinionSelector(IsType(MINION_TYPE.BEAST)))])\u00a7", "input_tokens": ["Tundra", "Rhino", "NAME_END", "2", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "Your", "Beasts", "have", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Tundra", "Rhino", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tundra", "Rhino", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "charge", "=", "True", ",", "auras", "=", "[", "Aura", "(", "Charge", "(", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ")", "]", ")"], "examples": ["class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )"]}
{"input": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "output": "class Vanish(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vanish\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in sorted(targets, key=lambda m: m.born):\u00a7            minion.bounce()\u00a7", "input_tokens": ["Vanish", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Return", "all", "minions", "to", "their", "owner's", "hand."], "output_tokens": ["class", "Vanish", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vanish", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "player", ".", "minions", ")", "for", "minion", "in", "sorted", "(", "targets", ",", "key", "=", "lambda", "m", ":", "m", ".", "born", ")", ":", "minion", ".", "bounce", "(", ")"], "examples": ["class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )"]}
{"input": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b>Taunt</b>", "output": "class Voidwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voidwalker\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, taunt=True)\u00a7", "input_tokens": ["Voidwalker", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Free", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Voidwalker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Voidwalker", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "taunt", "=", "True", ")"], "examples": ["class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )"]}
{"input": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b>Charge</b>.", "output": "class WarsongCommander(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Warsong Commander\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionPlaced(AttackLessThanOrEqualTo(3)), ActionTag(Give(Charge()), TargetSelector()))])\u00a7", "input_tokens": ["Warsong", "Commander", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Whenever", "you", "summon", "a", "minion", "with", "3", "or", "less", "Attack,", "give", "it", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Warsong", "Commander", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Warsong", "Commander", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Minion", "Placed", "(", "Attack", "Less", "Than", "Or", "Equal", "To", "(", "3", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Charge", "(", ")", ")", ",", "Target", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Siege Engine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siege Engine ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )"]}
{"input": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> any character damaged by this minion.", "output": "class WaterElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Water Elemental\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])\u00a7", "input_tokens": ["Water", "Elemental", "NAME_END", "3", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "any", "character", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Water", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Water", "Elemental", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "6", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Frozen", "(", ")", ")", ",", "Target", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "output": "class Whirlwind(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirlwind\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Whirlwind", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage", "to", "ALL", "minions."], "output_tokens": ["class", "Whirlwind", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whirlwind", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class WickedKnife(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wicked Knife\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 2)\u00a7", "input_tokens": ["Wicked", "Knife", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Wicked", "Knife", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wicked", "Knife", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ",", "False", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "2", ")"], "examples": ["class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
{"input": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "output": "class WildGrowth(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wild Growth\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.max_mana < 10:\u00a7            player.max_mana += 1\u00a7        else:\u00a7            player.hand.append(ExcessMana())\u00a7            player.hand[-1].player = player\u00a7", "input_tokens": ["Wild", "Growth", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Gain", "an", "empty", "Mana", "Crystal."], "output_tokens": ["class", "Wild", "Growth", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wild", "Growth", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "max_mana", "<", "10", ":", "player", ".", "max_mana", "+", "=", "1", "else", ":", "player", ".", "hand", ".", "append", "(", "Excess", "Mana", "(", ")", ")", "player", ".", "hand", "[", "-", "1", "]", ".", "player", "=", "player"], "examples": ["class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )"]}
{"input": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Windfury</b>.", "output": "class Windfury(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windfury\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_buff(Buff(_Windfury()))\u00a7", "input_tokens": ["Windfury", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "<b>", "Windfury", "</b>", "."], "output_tokens": ["class", "Windfury", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Windfury", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "_Windfury", "(", ")", ")", ")"], "examples": ["class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Windfury</b>.", "output": "class Windspeaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windspeaker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Windfury()), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Windspeaker", "NAME_END", "3", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "minion", "<b>", "Windfury", "</b>", "."], "output_tokens": ["class", "Windspeaker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Windspeaker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Windfury", "(", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Argent Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Protector ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Master Of Disguise ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master of Disguise ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Charge</b>", "output": "class Wolfrider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wolfrider\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, charge=True)\u00a7", "input_tokens": ["Wolfrider", "NAME_END", "3", "ATK_END", "1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Wolfrider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wolfrider", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "1", ",", "charge", "=", "True", ")"], "examples": ["class Reckless Rocketeer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reckless Rocketeer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 2 , charge = True )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )"]}
{"input": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +1 Attack and <b>Charge</b>.", "output": "class AlexstraszasChampion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alexstrasza's Champion\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(Charge())]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Alexstrasza's", "Champion", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you're", "holding", "a", "Dragon,", "gain", "+1", "Attack", "and", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Alexstraszas", "Champion", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Alexstrasza", "`", "s", "Champion", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Charge", "(", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b>Overload: (2)</b>", "output": "class AncestralKnowledge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Knowledge\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for c in range(0, 2):\u00a7            player.draw()\u00a7", "input_tokens": ["Ancestral", "Knowledge", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Draw", "2", "cards.", "<b>", "Overload", ":", "(2)", "</b>"], "output_tokens": ["class", "Ancestral", "Knowledge", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancestral", "Knowledge", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "overload", "=", "2", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "c", "in", "range", "(", "0", ",", "2", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )"]}
{"input": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Return this to your hand and summon a 4/4 Nerubian.", "output": "class Anubarak(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anub'arak\", 9, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 4, deathrattle=[Deathrattle(Bounce(), SelfSelector()), Deathrattle(Summon(Nerubian()), PlayerSelector())])\u00a7", "input_tokens": ["Anub'arak", "NAME_END", "8", "ATK_END", "4", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Return", "this", "to", "your", "hand", "and", "summon", "a", "4/4", "Nerubian."], "output_tokens": ["class", "Anubarak", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Anub", "`", "arak", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "4", ",", "deathrattle", "=", "[", "Deathrattle", "(", "Bounce", "(", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Deathrattle", "(", "Summon", "(", "Nerubian", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Nerubian Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian Egg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )"]}
{"input": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b>Spell Damage</b>.", "output": "class ArcaneBlast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Blast\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2 + player.spell_damage), self)\u00a7", "input_tokens": ["Arcane", "Blast", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$2", "damage", "to", "a", "minion.", "This", "spell", "gets", "double", "bonus", "from", "<b>", "Spell", "Damage", "</b>", "."], "output_tokens": ["class", "Arcane", "Blast", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Blast", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", "+", "player", ".", "spell_damage", ")", ",", "self", ")"], "examples": ["class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Implosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp - losion ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) had_shield = self . target . divine_shield self . target . damage ( amount , self ) if not had_shield : for i in range ( 0 , amount ) : imp = Imp ( ) imp . summon ( player , game , len ( player . minions ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b> NL <b>Divine Shield</b>", "output": "class ArgentHorserider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Horserider\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, charge=True, divine_shield=True)\u00a7", "input_tokens": ["Argent", "Horserider", "NAME_END", "2", "ATK_END", "1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>", "NL", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Argent", "Horserider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Horserider", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "charge", "=", "True", ",", "divine_shield", "=", "True", ")"], "examples": ["class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )"]}
{"input": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "output": "class ArgentLance(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Lance\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Joust(IncreaseDurability()), SelfSelector()))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7", "input_tokens": ["Argent", "Lance", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "2", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Reveal", "a", "minion", "in", "each", "deck.", "If", "yours", "costs", "more,", "+1", "Durability."], "output_tokens": ["class", "Argent", "Lance", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Lance", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Joust", "(", "Increase", "Durability", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "2", ")"], "examples": ["class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Perditions Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Perdition ` s Blade ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )"]}
{"input": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b>Inspire:</b> Can attack as normal this turn.", "output": "class ArgentWatchman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Watchman\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, buffs=[Buff(CantAttack())], effects=[Effect(UsedPower(), ActionTag(Give(BuffUntil(CanAttack(), TurnEnded())), SelfSelector()))])\u00a7", "input_tokens": ["Argent", "Watchman", "NAME_END", "2", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Can't", "attack.", "NL", "<b>", "Inspire", ":", "</b>", "Can", "attack", "as", "normal", "this", "turn."], "output_tokens": ["class", "Argent", "Watchman", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Watchman", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "buffs", "=", "[", "Buff", "(", "Cant", "Attack", "(", ")", ")", "]", ",", "effects", "=", "[", "Effect", "(", "Used", "Power", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "Until", "(", "Can", "Attack", "(", ")", ",", "Turn", "Ended", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Ancient Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Watcher ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , buffs = [ Buff ( Cant Attack ( ) ) ] )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"]}
{"input": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> Reveal a minion in each deck. If yours costs more, gain <b>Charge</b>.", "output": "class ArmoredWarhorse(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armored Warhorse\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Joust(Give(Buff(Charge()))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 3)\u00a7", "input_tokens": ["Armored", "Warhorse", "NAME_END", "5", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Reveal", "a", "minion", "in", "each", "deck.", "If", "yours", "costs", "more,", "gain", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Armored", "Warhorse", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Armored", "Warhorse", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "Battlecry", "(", "Joust", "(", "Give", "(", "Buff", "(", "Charge", "(", ")", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "3", ")"], "examples": ["class Argent Lance ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Lance ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Joust ( Increase Durability ( ) ) , Self Selector ( ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "output": "class HealingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])\u00a7", "input_tokens": ["Healing", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "restore", "1", "Health", "to", "all", "friendly", "minions."], "output_tokens": ["class", "Healing", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Healing", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "1", ")", ",", "Minion", "Selector", "(", "condition", "=", "None", ")", ")", ")", "]", ")"], "examples": ["class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Circle Of Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Circle of Healing ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . heal ( player . effective_heal_power ( 4 ) , self )"]}
{"input": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Nerubian", "NAME_END", "4", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Nerubian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerubian", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Defias Bandit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defias Bandit ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"]}
{"input": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class SearingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Searing", "Totem", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Searing", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Searing", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "output": "class StoneclawTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneclaw Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7", "input_tokens": ["Stoneclaw", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Stoneclaw", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stoneclaw", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )"]}
{"input": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Inspire:</b> Restore 2 Health to your hero.", "output": "class TournamentMedic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tournament Medic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 8, effects=[Effect(UsedPower(), ActionTag(Heal(2), HeroSelector()))])\u00a7", "input_tokens": ["Tournament", "Medic", "NAME_END", "1", "ATK_END", "8", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Inspire", ":", "</b>", "Restore", "2", "Health", "to", "your", "hero."], "output_tokens": ["class", "Tournament", "Medic", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tournament", "Medic", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Used", "Power", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "2", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Spell Damage +1</b>", "output": "class WrathOfAirTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, spell_damage=1)\u00a7", "input_tokens": ["Wrath", "of", "Air", "Totem", "NAME_END", "0", "ATK_END", "2", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Wrath", "Of", "Air", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "of", "Air", "Totem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "FREE", ",", "False", ",", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "spell_damage", "=", "1", ")"], "examples": ["class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )"]}
{"input": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "output": "class AncestorsCall(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestor's Call\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and (len(player.minions) < 7 or len(player.opponent.minions) < 7)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for player in game.players:\u00a7            minions = [card for card in player.hand if card.is_minion()]\u00a7            if len(minions) and len(player.minions) < 7:\u00a7                minion_card = game.random_choice(minions)\u00a7                minion_card.unattach()\u00a7                player.hand.remove(minion_card)\u00a7                minion_card.summon(player, game, len(player.minions))\u00a7", "input_tokens": ["Ancestor's", "Call", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Put", "a", "random", "minion", "from", "each", "player's", "hand", "into", "the", "battlefield."], "output_tokens": ["class", "Ancestors", "Call", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancestor", "`", "s", "Call", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "(", "len", "(", "player", ".", "minions", ")", "<", "7", "or", "len", "(", "player", ".", "opponent", ".", "minions", ")", "<", "7", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "player", "in", "game", ".", "players", ":", "minions", "=", "[", "card", "for", "card", "in", "player", ".", "hand", "if", "card", ".", "is_minion", "(", ")", "]", "if", "len", "(", "minions", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7", ":", "minion_card", "=", "game", ".", "random_choice", "(", "minions", ")", "minion_card", ".", "unattach", "(", ")", "player", ".", "hand", ".", "remove", "(", "minion_card", ")", "minion_card", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")"], "examples": ["class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )"]}
{"input": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "output": "class AnimaGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anima Golem\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 9, effects=[Effect(TurnEnded(MinionCountIs(1), BothPlayer()), ActionTag(Kill(), SelfSelector()))])\u00a7", "input_tokens": ["Anima", "Golem", "NAME_END", "9", "ATK_END", "9", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "At", "the", "end", "of", "each", "turn,", "destroy", "this", "minion", "if", "it's", "your", "only", "one."], "output_tokens": ["class", "Anima", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Anima", "Golem", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "9", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "Minion", "Count", "Is", "(", "1", ")", ",", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )"]}
{"input": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Battlecry:</b> Restore 8 Health to your hero.", "output": "class AntiqueHealbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Antique Healbot\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Heal(8), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Antique", "Healbot", "NAME_END", "3", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "8", "Health", "to", "your", "hero."], "output_tokens": ["class", "Antique", "Healbot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Antique", "Healbot", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "8", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Metaltooth Leaper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Metaltooth Leaper ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Buff ( Change Attack ( 2 ) ) ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Taunt</b> NL Can't be targeted by spells or Hero Powers.", "output": "class ArcaneNullifierX21(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Nullifier X-21\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, taunt=True, spell_targetable=False)\u00a7", "input_tokens": ["Arcane", "Nullifier", "X-21", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "Can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Arcane", "Nullifier", "X21", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arcane", "Nullifier", "X", "-", "21", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "taunt", "=", "True", ",", "spell_targetable", "=", "False", ")"], "examples": ["class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )", "class Wee Spellstopper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wee Spellstopper ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )"]}
{"input": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "output": "class ArmorPlating(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armor Plating\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.increase_health(1)\u00a7", "input_tokens": ["Armor", "Plating", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "+1", "Health."], "output_tokens": ["class", "Armor", "Plating", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Armor", "Plating", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "increase_health", "(", "1", ")"], "examples": ["class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Divine Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Divine Spirit ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( self . target . health )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )"]}
{"input": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Equip a random weapon for each player.", "output": "class Blingtron3000(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blingtron 3000\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Equip(CardQuery(conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7", "input_tokens": ["Blingtron", "3000", "NAME_END", "3", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Equip", "a", "random", "weapon", "for", "each", "player."], "output_tokens": ["class", "Blingtron3000", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blingtron", "3000", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Equip", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Weapon", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "4", ")"], "examples": ["class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "output": "class BolvarFordragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bolvar Fordragon\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7)\u00a7", "input_tokens": ["Bolvar", "Fordragon", "NAME_END", "1", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "a", "friendly", "minion", "dies", "while", "this", "is", "in", "your", "hand,", "gain", "+1", "Attack."], "output_tokens": ["class", "Bolvar", "Fordragon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bolvar", "Fordragon", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "7", ")"], "examples": ["class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )"]}
{"input": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage to a random enemy minion.", "output": "class BombLobber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bomb Lobber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector(None, EnemyPlayer(), RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Bomb", "Lobber", "NAME_END", "3", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "4", "damage", "to", "a", "random", "enemy", "minion."], "output_tokens": ["class", "Bomb", "Lobber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bomb", "Lobber", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "4", ")", ",", "Minion", "Selector", "(", "None", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )"]}
{"input": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b>Deathrattle</b>: Deal 1-4 damage to a random enemy.", "output": "class BoomBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boom Bot\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(Damage(RandomAmount(1, 4)), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))\u00a7", "input_tokens": ["Boom", "Bot", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "NIL", "RARITY_END", "<b>", "Deathrattle", "</b>", ":", "Deal", "1-4", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Boom", "Bot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boom", "Bot", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "Random", "Amount", "(", "1", ",", "4", ")", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"], "examples": ["class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )"]}
{"input": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "output": "class BouncingBlade(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bouncing Blade\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 1\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = player.minions[:] + player.opponent.minions[:]\u00a7        if len(targets):\u00a7            for bounces in range(80):\u00a7                target = game.random_choice(targets)\u00a7                target.damage(player.effective_spell_damage(1), self)\u00a7                if target.dead:\u00a7                    break\u00a7", "input_tokens": ["Bouncing", "Blade", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$1", "damage", "to", "a", "random", "minion.", "Repeat", "until", "a", "minion", "dies."], "output_tokens": ["class", "Bouncing", "Blade", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bouncing", "Blade", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "+", "len", "(", "player", ".", "opponent", ".", "minions", ")", ">", "=", "1", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "player", ".", "minions", "[", ":", "]", "+", "player", ".", "opponent", ".", "minions", "[", ":", "]", "if", "len", "(", "targets", ")", ":", "for", "bounces", "in", "range", "(", "80", ")", ":", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "if", "target", ".", "dead", ":", "break"], "examples": ["class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Implosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp - losion ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) had_shield = self . target . divine_shield self . target . damage ( amount , self ) if not had_shield : for i in range ( 0 , amount ) : imp = Imp ( ) imp . summon ( player , game , len ( player . minions ) )"]}
{"input": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "output": "class CallPet(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Call Pet\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        def reduce_cost(card):\u00a7            if card.is_minion() and card.minion_type == MINION_TYPE.BEAST:\u00a7                card.add_buff(Buff(ManaChange(-4)))\u00a7\u00a7        super().use(player, game)\u00a7        player.bind_once(\"card_drawn\", reduce_cost)\u00a7        player.draw()\u00a7", "input_tokens": ["Call", "Pet", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Draw", "a", "card.", "NL", "If", "it's", "a", "Beast,", "it", "costs", "(4)", "less."], "output_tokens": ["class", "Call", "Pet", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Call", "Pet", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "def", "reduce_cost", "(", "card", ")", ":", "if", "card", ".", "is_minion", "(", ")", "and", "card", ".", "minion_type", "=", "=", "MINION_TYPE", ".", "BEAST", ":", "card", ".", "add_buff", "(", "Buff", "(", "Mana", "Change", "(", "-", "4", ")", ")", ")", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "bind_once", "(", "`", "card_drawn", "`", ",", "reduce_cost", ")", "player", ".", "draw", "(", ")"], "examples": ["class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "output": "class Chicken(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chicken\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Chicken", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Chicken", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Chicken", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "output": "class ClockworkGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Clockwork Giant\", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, buffs=[Buff(ManaChange(Count(CardSelector(EnemyPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Clockwork", "Giant", "NAME_END", "8", "ATK_END", "8", "DEF_END", "12", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "Costs", "(1)", "less", "for", "each", "card", "in", "your", "opponent's", "hand."], "output_tokens": ["class", "Clockwork", "Giant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Clockwork", "Giant", "`", ",", "12", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Card", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )"]}
{"input": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Add a <b>Spare Part</b> card to your hand.", "output": "class ClockworkGnome(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Clockwork Gnome\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(2, 1, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\u00a7", "input_tokens": ["Clockwork", "Gnome", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Add", "a", "<b>", "Spare", "Part", "</b>", "card", "to", "your", "hand."], "output_tokens": ["class", "Clockwork", "Gnome", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Clockwork", "Gnome", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "return", "Minion", "(", "2", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Mechanical Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 4 , 5 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( Both Player ( ) ) ) )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Mad Scientist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Scientist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )"]}
{"input": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b>Divine Shield</b>.", "output": "class CobaltGuardian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cobalt Guardian\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.MECH)), ActionTag(Give(DivineShield()), SelfSelector()))])\u00a7", "input_tokens": ["Cobalt", "Guardian", "NAME_END", "6", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "summon", "a", "Mech,", "gain", "<b>", "Divine", "Shield", "</b>", "."], "output_tokens": ["class", "Cobalt", "Guardian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cobalt", "Guardian", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Minion", "Summoned", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Divine", "Shield", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Shielded Minibot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shielded Minibot ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , divine_shield = True )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )"]}
{"input": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "output": "class CobraShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cobra Shot\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Cobra", "Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage", "to", "a", "minion", "and", "the", "enemy", "hero."], "output_tokens": ["class", "Cobra", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cobra", "Shot", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )"]}
{"input": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Give a random friendly minion <b>Divine Shield</b> and <b>Taunt</b>.", "output": "class Coghammer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coghammer\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(DivineShield()), Buff(Taunt())]), MinionSelector(picker=RandomPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 3)\u00a7", "input_tokens": ["Coghammer", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "3", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "random", "friendly", "minion", "<b>", "Divine", "Shield", "</b>", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Coghammer", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Coghammer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Divine", "Shield", "(", ")", ")", ",", "Buff", "(", "Taunt", "(", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "3", ")"], "examples": ["class Argent Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Protector ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Perditions Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Perdition ` s Blade ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Enhanceo Mechano ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Enhance - o Mechano ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "output": "class Cogmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cogmaster\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, auras=[Aura(ChangeAttack(2), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])\u00a7", "input_tokens": ["Cogmaster", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Has", "+2", "Attack", "while", "you", "have", "a", "Mech."], "output_tokens": ["class", "Cogmaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cogmaster", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")"], "examples": ["class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "class Goblin Sapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Sapper ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Change Attack ( 4 ) , Greater Than ( Count ( Card Selector ( Enemy Player ( ) ) ) , value = 5 ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grimscale Oracle ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )"]}
{"input": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "output": "class Crush(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crush\", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target, buffs=[Buff(ManaChange(-4), GreaterThan(Count(MinionSelector(IsDamaged())), value=0))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7", "input_tokens": ["Crush", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Destroy", "a", "minion.", "If", "you", "have", "a", "damaged", "minion,", "this", "costs", "(4)", "less."], "output_tokens": ["class", "Crush", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Crush", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "-", "4", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Damaged", "(", ")", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")"], "examples": ["class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Rend Blackhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rend Blackhand ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( And ( Minion Is Not Target ( ) , Is Rarity ( CARD_RARITY . LEGENDARY ) ) , Both Player ( ) , User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 4 )"]}
{"input": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One -</b> Summon 5 Wisps; or Give a minion +5/+5 and <b>Taunt</b>.", "output": "class DarkWispers(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Wispers\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return (super().can_use(player, game) and (len(player.minions) < 7 or hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None))\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        class Buff5(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Give a minion +5/+5 and Taunt\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def can_use(self, player, game):\u00a7                return hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None\u00a7\u00a7            def use(self, player, game):\u00a7                targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())\u00a7                target = player.agent.choose_target(targets)\u00a7                target.change_attack(5)\u00a7                target.increase_health(5)\u00a7                target.taunt = True\u00a7\u00a7        class Wisps5(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Summon 5 Wisps\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def can_use(self, player, game):\u00a7                return len(player.minions) < 7\u00a7\u00a7            def use(self, player, game):\u00a7                from hearthbreaker.cards.minions.neutral import Wisp\u00a7                for i in range(0, 5):\u00a7                    wisp = Wisp()\u00a7                    wisp.summon(player, game, len(player.minions))\u00a7\u00a7        if len(hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())) == 0:\u00a7            option = Wisps5()\u00a7        else:\u00a7            option = player.agent.choose_option([Wisps5(), Buff5()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Dark", "Wispers", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Choose", "One", "-", "</b>", "Summon", "5", "Wisps;", "or", "Give", "a", "minion", "+5/+5", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Dark", "Wispers", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dark", "Wispers", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "(", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "(", "len", "(", "player", ".", "minions", ")", "<", "7", "or", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "t", ":", "t", ".", "spell_targetable", "(", ")", ")", "is", "not", "None", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "class", "Buff5", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Give", "a", "minion", "+", "5", "/", "+", "5", "and", "Taunt", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "t", ":", "t", ".", "spell_targetable", "(", ")", ")", "is", "not", "None", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "t", ":", "t", ".", "spell_targetable", "(", ")", ")", "target", "=", "player", ".", "agent", ".", "choose_target", "(", "targets", ")", "target", ".", "change_attack", "(", "5", ")", "target", ".", "increase_health", "(", "5", ")", "target", ".", "taunt", "=", "True", "class", "Wisps5", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Summon", "5", "Wisps", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "len", "(", "player", ".", "minions", ")", "<", "7", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "neutral", "import", "Wisp", "for", "i", "in", "range", "(", "0", ",", "5", ")", ":", "wisp", "=", "Wisp", "(", ")", "wisp", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "if", "len", "(", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "t", ":", "t", ".", "spell_targetable", "(", ")", ")", ")", "=", "=", "0", ":", "option", "=", "Wisps5", "(", ")", "else", ":", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Wisps5", "(", ")", ",", "Buff5", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Cenarius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cenarius ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 8 )", "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "output": "class Darkbomb(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Darkbomb\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Darkbomb", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage."], "output_tokens": ["class", "Darkbomb", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Darkbomb", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "output": "class Demonheart(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonheart\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(5)\u00a7            self.target.increase_health(5)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(5), self)\u00a7", "input_tokens": ["Demonheart", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$5", "damage", "to", "a", "minion.", "If", "it's", "a", "friendly", "Demon,", "give", "it", "+5/+5", "instead."], "output_tokens": ["class", "Demonheart", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Demonheart", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "player", ".", "game", ".", "current_player", ".", "minions", ")", "if", "self", ".", "target", ".", "card", ".", "minion_type", "is", "MINION_TYPE", ".", "DEMON", "and", "self", ".", "target", "in", "targets", ":", "self", ".", "target", ".", "change_attack", "(", "5", ")", "self", ".", "target", ".", "increase_health", "(", "5", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")"], "examples": ["class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )"]}
{"input": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry</b>: Summon two 1/1 Boom Bots. <i>WARNING: Bots may explode.</i>", "output": "class DoctorBoom(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dr. Boom\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(BoomBot(), 2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7", "input_tokens": ["Dr.", "Boom", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Summon", "two", "1/1", "Boom", "Bots.", "<i>WARNING", ":", "Bots", "may", "explode.</i>"], "output_tokens": ["class", "Doctor", "Boom", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dr", ".", "Boom", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Boom", "Bot", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "output": "class DruidOfTheFang(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Fang\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Druid", "of", "the", "Fang", "NAME_END", "7", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Druid", "Of", "The", "Fang", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Fang", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Transform", "(", "Cobra", "Form", "(", ")", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Beast, transform this minion into a 7/7.", "output": "class DruidOfTheFang(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Fang\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Druid", "of", "the", "Fang", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you", "have", "a", "Beast,", "transform", "this", "minion", "into", "a", "7/7."], "output_tokens": ["class", "Druid", "Of", "The", "Fang", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Fang", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Transform", "(", "Cobra", "Form", "(", ")", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )"]}
{"input": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Windfury, Overload: (1)</b> NL 50% chance to attack the wrong enemy.", "output": "class DunemaulShaman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dunemaul Shaman\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4, windfury=True, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7", "input_tokens": ["Dunemaul", "Shaman", "NAME_END", "5", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Windfury,", "Overload", ":", "(1)", "</b>", "NL", "50%", "chance", "to", "attack", "the", "wrong", "enemy."], "output_tokens": ["class", "Dunemaul", "Shaman", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dunemaul", "Shaman", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "overload", "=", "1", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ",", "windfury", "=", "True", ",", "effects", "=", "[", "Effect", "(", "Attack", "(", ")", ",", "Action", "Tag", "(", "Change", "Target", "(", "Character", "Selector", "(", "Not", "Current", "Target", "(", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ",", "And", "(", "One", "In", "(", "2", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "0", ")", ")", ")", ")", "]", ")"], "examples": ["class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Battlecry:</b> Give your other minions <b>Windfury</b>, <b>Taunt</b>, or <b>Divine Shield</b>. NL <i>(at random)</i>", "output": "class EnhanceoMechano(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Enhance-o Mechano\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([ Buff(Windfury()), Buff(Taunt()), Buff(DivineShield())], RandomPicker()), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Enhance-o", "Mechano", "NAME_END", "3", "ATK_END", "2", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "your", "other", "minions", "<b>", "Windfury", "</b>", ",", "<b>", "Taunt", "</b>", ",", "or", "<b>", "Divine", "Shield", "</b>", ".", "NL", "<i>(at", "random)</i>"], "output_tokens": ["class", "Enhanceo", "Mechano", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Enhance", "-", "o", "Mechano", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Windfury", "(", ")", ")", ",", "Buff", "(", "Taunt", "(", ")", ")", ",", "Buff", "(", "Divine", "Shield", "(", ")", ")", "]", ",", "Random", "Picker", "(", ")", ")", ",", "Minion", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Lil Exorcist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lil ` Exorcist ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Armored Warhorse ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armored Warhorse ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )"]}
{"input": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 2 damage to all minions.", "output": "class ExplosiveSheep(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Sheep\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)\u00a7", "input_tokens": ["Explosive", "Sheep", "NAME_END", "1", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Deal", "2", "damage", "to", "all", "minions."], "output_tokens": ["class", "Explosive", "Sheep", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Explosive", "Sheep", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "taunt", "=", "True", ")"], "examples": ["class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b>Deathrattles</b> on your minions.", "output": "class FeignDeath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feign Death\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in sorted(player.minions, key=lambda m: m.born):\u00a7            for deathrattle in minion.deathrattle:\u00a7                deathrattle.do(minion)\u00a7            if player.double_deathrattle:\u00a7                for deathrattle in minion.deathrattle:\u00a7                    deathrattle.do(minion)\u00a7", "input_tokens": ["Feign", "Death", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Trigger", "all", "<b>", "Deathrattles", "</b>", "on", "your", "minions."], "output_tokens": ["class", "Feign", "Death", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Feign", "Death", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "sorted", "(", "player", ".", "minions", ",", "key", "=", "lambda", "m", ":", "m", ".", "born", ")", ":", "for", "deathrattle", "in", "minion", ".", "deathrattle", ":", "deathrattle", ".", "do", "(", "minion", ")", "if", "player", ".", "double_deathrattle", ":", "for", "deathrattle", "in", "minion", ".", "deathrattle", ":", "deathrattle", ".", "do", "(", "minion", ")"], "examples": ["class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )"]}
{"input": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "output": "class FelCannon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fel Cannon\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), MinionSelector(Not(IsType(MINION_TYPE.MECH, True)), BothPlayer(), RandomPicker())))])\u00a7", "input_tokens": ["Fel", "Cannon", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "deal", "2", "damage", "to", "a", "non-Mech", "minion."], "output_tokens": ["class", "Fel", "Cannon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fel", "Cannon", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Minion", "Selector", "(", "Not", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ",", "True", ")", ")", ",", "Both", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "output": "class FelReaver(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fel Reaver\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, effects=[Effect(CardPlayed(player=EnemyPlayer()), ActionTag(Discard(3, query=CardQuery(source=CARD_SOURCE.MY_DECK)), PlayerSelector()))])\u00a7", "input_tokens": ["Fel", "Reaver", "NAME_END", "8", "ATK_END", "8", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "Whenever", "your", "opponent", "plays", "a", "card,", "remove", "the", "top", "3", "cards", "of", "your", "deck."], "output_tokens": ["class", "Fel", "Reaver", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fel", "Reaver", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Card", "Played", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Discard", "(", "3", ",", "query", "=", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "MY_DECK", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )"]}
{"input": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b>Stealth</b> until your next turn.", "output": "class FinickyCloakfield(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Finicky Cloakfield\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7", "input_tokens": ["Finicky", "Cloakfield", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "friendly", "minion", "<b>", "Stealth", "</b>", "until", "your", "next", "turn."], "output_tokens": ["class", "Finicky", "Cloakfield", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Finicky", "Cloakfield", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "Until", "(", "Stealth", "(", ")", ",", "Turn", "Started", "(", ")", ")", ")"], "examples": ["class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Corruption ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Corruption ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Started ( player = Enemy Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Nightmare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nightmare ` , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )"]}
{"input": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "output": "class FlameLeviathan(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame Leviathan\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, effects=[Effect(Drawn(), ActionTag(Damage(2), CharacterSelector(None, BothPlayer())))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7", "input_tokens": ["Flame", "Leviathan", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "When", "you", "draw", "this,", "deal", "2", "damage", "to", "all", "characters."], "output_tokens": ["class", "Flame", "Leviathan", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flame", "Leviathan", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "effects", "=", "[", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "None", ",", "Both", "Player", "(", ")", ")", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ")"], "examples": ["class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )", "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )"]}
{"input": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "output": "class Flamecannon(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamecannon\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.damage(player.effective_spell_damage(4), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7", "input_tokens": ["Flamecannon", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$4", "damage", "to", "a", "random", "enemy", "minion."], "output_tokens": ["class", "Flamecannon", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flamecannon", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_battlecry_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "True", ")", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "1"], "examples": ["class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2"]}
{"input": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "output": "class FoeReaper4000(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Foe Reaper 4000\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 9, effects=[Effect(Attack(IsMinion()), ActionTag(Damage(Attribute(\"attack\", SelfSelector())), MinionSelector(TargetAdjacent(), EnemyPlayer())))])\u00a7", "input_tokens": ["Foe", "Reaper", "4000", "NAME_END", "6", "ATK_END", "9", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "Also", "damages", "the", "minions", "next", "to", "whomever", "he", "attacks."], "output_tokens": ["class", "Foe", "Reaper4000", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Foe", "Reaper", "4000", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "9", ",", "effects", "=", "[", "Effect", "(", "Attack", "(", "Is", "Minion", "(", ")", ")", ",", "Action", "Tag", "(", "Damage", "(", "Attribute", "(", "`", "attack", "`", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Minion", "Selector", "(", "Target", "Adjacent", "(", ")", ",", "Enemy", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Gahzrilla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gahz ` rilla ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action Tag ( Give ( Buff ( Double Attack ( ) ) ) , Self Selector ( ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )"]}
{"input": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Divine Shield</b>", "output": "class ForceTankMAX(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Force-Tank MAX\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, divine_shield=True)\u00a7", "input_tokens": ["Force-Tank", "MAX", "NAME_END", "7", "ATK_END", "7", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Force", "Tank", "MAX", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Force", "-", "Tank", "MAX", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ",", "divine_shield", "=", "True", ")"], "examples": ["class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )"]}
{"input": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "output": "class Gahzrilla(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gahz'rilla\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 9, effects=[Effect(Damaged(), ActionTag(Give(Buff(DoubleAttack())), SelfSelector()))])\u00a7", "input_tokens": ["Gahz'rilla", "NAME_END", "6", "ATK_END", "9", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "double", "its", "Attack."], "output_tokens": ["class", "Gahzrilla", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gahz", "`", "rilla", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "9", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "(", "Double", "Attack", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Foe Reaper4000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Foe Reaper 4000 ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( ` attack ` , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )", "class Dark Iron Dwarf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Dwarf ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Siege Engine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siege Engine ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "output": "class GallywixsCoin(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gallywix's Coin\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 10:\u00a7            player.mana += 1\u00a7", "input_tokens": ["Gallywix's", "Coin", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Gain", "1", "Mana", "Crystal", "this", "turn", "only.", "NL", "<i>(Won't", "trigger", "Gallywix.)</i>"], "output_tokens": ["class", "Gallywixs", "Coin", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gallywix", "`", "s", "Coin", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "mana", "<", "10", ":", "player", ".", "mana", "+", "=", "1"], "examples": ["class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )"]}
{"input": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "output": "class Gazlowe(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gazlowe\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, effects=[Effect(SpellCast(ManaCost(1)), ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector()))])\u00a7", "input_tokens": ["Gazlowe", "NAME_END", "3", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "you", "cast", "a", "1-mana", "spell,", "add", "a", "random", "Mech", "to", "your", "hand."], "output_tokens": ["class", "Gazlowe", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gazlowe", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "6", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "Mana", "Cost", "(", "1", ")", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Trade Prince Gallywix ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Trade Prince Gallywix ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 8 , effects = [ Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Friendly Player ( ) ) ) ) , Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Gallywixs Coin ( ) ) , Player Selector ( Enemy Player ( ) ) ) ) ] )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )"]}
{"input": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Stealth</b>", "output": "class GilblinStalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gilblin Stalker\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, stealth=True)\u00a7", "input_tokens": ["Gilblin", "Stalker", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Gilblin", "Stalker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gilblin", "Stalker", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "stealth", "=", "True", ")"], "examples": ["class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "class Jungle Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jungle Panther ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , stealth = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )"]}
{"input": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a random friendly minion +1 Attack.", "output": "class Glaivezooka(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Glaivezooka\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)), MinionSelector(None, picker=RandomPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7", "input_tokens": ["Glaivezooka", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "2", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "random", "friendly", "minion", "+1", "Attack."], "output_tokens": ["class", "Glaivezooka", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Glaivezooka", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "None", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "2", ")"], "examples": ["class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Tinkers Sharpsword Oil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinker ` s Sharpsword Oil ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 3 player . hero . change_temp_attack ( 3 ) if player . cards_played > 0 : targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) if targets is not None : target = player . game . random_choice ( targets ) target . add_buff ( Buff ( Change Attack ( 3 ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b> NL <b>Taunt</b>", "output": "class GnomereganInfantry(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomeregan Infantry\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, charge=True, taunt=True)\u00a7", "input_tokens": ["Gnomeregan", "Infantry", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>", "NL", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Gnomeregan", "Infantry", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnomeregan", "Infantry", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "charge", "=", "True", ",", "taunt", "=", "True", ")"], "examples": ["class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )"]}
{"input": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If you have a Mech, deal 4 damage randomly split among all enemies.", "output": "class GoblinBlastmage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Blastmage\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(4)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Goblin", "Blastmage", "NAME_END", "5", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you", "have", "a", "Mech,", "deal", "4", "damage", "randomly", "split", "among", "all", "enemies."], "output_tokens": ["class", "Goblin", "Blastmage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Goblin", "Blastmage", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "None", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", "4", ")", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "output": "class GoblinSapper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Sapper\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, buffs=[Buff(ChangeAttack(4), GreaterThan(Count(CardSelector(EnemyPlayer())), value=5))])\u00a7", "input_tokens": ["Goblin", "Sapper", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Has", "+4", "Attack", "while", "your", "opponent", "has", "6", "or", "more", "cards", "in", "hand."], "output_tokens": ["class", "Goblin", "Sapper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Goblin", "Sapper", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "buffs", "=", "[", "Buff", "(", "Change", "Attack", "(", "4", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ",", "value", "=", "5", ")", ")", "]", ")"], "examples": ["class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )"]}
{"input": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One -</b> Give each player a Mana Crystal; or Each player draws a card.", "output": "class GroveTender(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grove Tender\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[\u00a7            Choice(GiftOfMana(), GiveManaCrystal(), PlayerSelector(players=BothPlayer())),\u00a7            Choice(GiftOfCards(), Draw(), PlayerSelector(players=BothPlayer()))\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Grove", "Tender", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Choose", "One", "-", "</b>", "Give", "each", "player", "a", "Mana", "Crystal;", "or", "Each", "player", "draws", "a", "card."], "output_tokens": ["class", "Grove", "Tender", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Grove", "Tender", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "choices", "=", "[", "Choice", "(", "Gift", "Of", "Mana", "(", ")", ",", "Give", "Mana", "Crystal", "(", ")", ",", "Player", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "Choice", "(", "Gift", "Of", "Cards", "(", ")", ",", "Draw", "(", ")", ",", "Player", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"], "examples": ["class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy a Beast.", "output": "class HemetNesingwary(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hemet Nesingwary\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.BEAST), players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 3)\u00a7", "input_tokens": ["Hemet", "Nesingwary", "NAME_END", "6", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "a", "Beast."], "output_tokens": ["class", "Hemet", "Nesingwary", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hemet", "Nesingwary", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ",", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "3", ")"], "examples": ["class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "output": "class Hobgoblin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hobgoblin\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionPlaced(BaseAttackEqualTo(1)), ActionTag(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), TargetSelector()))])\u00a7", "input_tokens": ["Hobgoblin", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Whenever", "you", "play", "a", "1-Attack", "minion,", "give", "it", "+2/+2."], "output_tokens": ["class", "Hobgoblin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hobgoblin", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Minion", "Placed", "(", "Base", "Attack", "Equal", "To", "(", "1", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", "]", ")", ",", "Target", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )"]}
{"input": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b>Secret</b> at the end of your turn, restore 4 health to your hero.", "output": "class Illuminator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Illuminator\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Heal(4), HeroSelector()))])\u00a7", "input_tokens": ["Illuminator", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "If", "you", "control", "a", "<b>", "Secret", "</b>", "at", "the", "end", "of", "your", "turn,", "restore", "4", "health", "to", "your", "hero."], "output_tokens": ["class", "Illuminator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Illuminator", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "Has", "Secret", "(", ")", ")", ",", "Action", "Tag", "(", "Heal", "(", "4", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Core Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Rager ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "output": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Imp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "output": "class Implosion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp-losion\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        amount = player.effective_spell_damage(game.random_amount(2, 4))\u00a7        had_shield = self.target.divine_shield\u00a7\u00a7        self.target.damage(amount, self)\u00a7\u00a7        if not had_shield:\u00a7            for i in range(0, amount):\u00a7                imp = Imp()\u00a7                imp.summon(player, game, len(player.minions))\u00a7", "input_tokens": ["Imp-losion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2-$4", "damage", "to", "a", "minion.", "Summon", "a", "1/1", "Imp", "for", "each", "damage", "dealt."], "output_tokens": ["class", "Implosion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "-", "losion", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "amount", "=", "player", ".", "effective_spell_damage", "(", "game", ".", "random_amount", "(", "2", ",", "4", ")", ")", "had_shield", "=", "self", ".", "target", ".", "divine_shield", "self", ".", "target", ".", "damage", "(", "amount", ",", "self", ")", "if", "not", "had_shield", ":", "for", "i", "in", "range", "(", "0", ",", "amount", ")", ":", "imp", "=", "Imp", "(", ")", "imp", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")"], "examples": ["class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "output": "class Jeeves(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Jeeves\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Draw(Difference(Count(CardSelector(players=CurrentPlayer())), value=3)), PlayerSelector(CurrentPlayer())))])\u00a7", "input_tokens": ["Jeeves", "NAME_END", "1", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "each", "player's", "turn,", "that", "player", "draws", "until", "they", "have", "3", "cards."], "output_tokens": ["class", "Jeeves", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Jeeves", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Draw", "(", "Difference", "(", "Count", "(", "Card", "Selector", "(", "players", "=", "Current", "Player", "(", ")", ")", ")", ",", "value", "=", "3", ")", ")", ",", "Player", "Selector", "(", "Current", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Mechanical Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 4 , 5 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( Both Player ( ) ) ) )", "class Micro Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Micro Machine ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Turn Started ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "output": "class Junkbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Junkbot\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\u00a7", "input_tokens": ["Junkbot", "NAME_END", "1", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Epic", "RARITY_END", "Whenever", "a", "friendly", "Mech", "dies,", "gain", "+2/+2."], "output_tokens": ["class", "Junkbot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Junkbot", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Oneeyed Cheat ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` One - eyed Cheat ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 4 , 1 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Give ( Stealth ( ) ) , Self Selector ( ) ) ) ] )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Scavenging Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scavenging Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Take control of a random enemy <b>Secret</b>.", "output": "class KezanMystic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kezan Mystic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(ApplySecret(CARD_SOURCE.ENEMY_SECRETS), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Kezan", "Mystic", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Take", "control", "of", "a", "random", "enemy", "<b>", "Secret", "</b>", "."], "output_tokens": ["class", "Kezan", "Mystic", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kezan", "Mystic", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Apply", "Secret", "(", "CARD_SOURCE", ".", "ENEMY_SECRETS", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Taunt</b>. <b>Battlecry:</b> Gain +1 Attack for each other Beast you have.", "output": "class KingOfBeasts(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King of Beasts\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType( MINION_TYPE.BEAST)))))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 6, taunt=True)\u00a7", "input_tokens": ["King", "of", "Beasts", "NAME_END", "2", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Gain", "+1", "Attack", "for", "each", "other", "Beast", "you", "have."], "output_tokens": ["class", "King", "Of", "Beasts", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "King", "of", "Beasts", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Attack", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ")", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "6", ",", "taunt", "=", "True", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Metaltooth Leaper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Metaltooth Leaper ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Buff ( Change Attack ( 2 ) ) ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "output": "class LightOfTheNaaru(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Light of the Naaru\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(3), self)\u00a7\u00a7        lightwarden = Lightwarden()\u00a7        if self.target is None:\u00a7            lightwarden.summon(player, game, len(player.minions))\u00a7        elif self.target.health != self.target.calculate_max_health():\u00a7            lightwarden.summon(player, game, len(player.minions))\u00a7", "input_tokens": ["Light", "of", "the", "Naaru", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Restore", "#3", "Health.", "If", "the", "target", "is", "still", "damaged,", "summon", "a", "Lightwarden."], "output_tokens": ["class", "Light", "Of", "The", "Naaru", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Light", "of", "the", "Naaru", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "3", ")", ",", "self", ")", "lightwarden", "=", "Lightwarden", "(", ")", "if", "self", ".", "target", "is", "None", ":", "lightwarden", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "elif", "self", ".", "target", ".", "health", "!", "=", "self", ".", "target", ".", "calculate_max_health", "(", ")", ":", "lightwarden", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")"], "examples": ["class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "class Circle Of Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Circle of Healing ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . heal ( player . effective_heal_power ( 4 ) , self )", "class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "class Auchenai Soulpriest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Auchenai Soulpriest ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )"]}
{"input": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "output": "class Lightbomb(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightbomb\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(minion.calculate_attack()), self)\u00a7", "input_tokens": ["Lightbomb", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "damage", "to", "each", "minion", "equal", "to", "its", "Attack."], "output_tokens": ["class", "Lightbomb", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightbomb", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "minion", ".", "calculate_attack", "(", ")", ")", ",", "self", ")"], "examples": ["class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )"]}
{"input": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL <b>Battlecry:</b> Gain +1/+1 for each enemy <b>Deathrattle</b> minion.", "output": "class LilExorcist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lil' Exorcist\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer()))))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, taunt=True)\u00a7", "input_tokens": ["Lil'", "Exorcist", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "<b>", "Battlecry", ":", "</b>", "Gain", "+1/+1", "for", "each", "enemy", "<b>", "Deathrattle", "</b>", "minion."], "output_tokens": ["class", "Lil", "Exorcist", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lil", "`", "Exorcist", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "Count", "(", "Minion", "Selector", "(", "Minion", "Has", "Deathrattle", "(", ")", ",", "Enemy", "Player", "(", ")", ")", ")", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "Count", "(", "Minion", "Selector", "(", "Minion", "Has", "Deathrattle", "(", ")", ",", "Enemy", "Player", "(", ")", ")", ")", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "taunt", "=", "True", ")"], "examples": ["class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Master Of Disguise ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master of Disguise ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class LostTallstrider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lost Tallstrider\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Lost", "Tallstrider", "NAME_END", "5", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Lost", "Tallstrider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lost", "Tallstrider", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Oasis Snapjaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Oasis Snapjaw ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 7 )", "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"]}
{"input": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Deathrattle:</b> Shuffle this minion into your deck.", "output": "class Malorne(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Malorne\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=[Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.MINION, minion=SelfSelector()), add_to_deck=True), PlayerSelector()), Deathrattle(Remove(), SelfSelector())])\u00a7", "input_tokens": ["Malorne", "NAME_END", "9", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Shuffle", "this", "minion", "into", "your", "deck."], "output_tokens": ["class", "Malorne", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Malorne", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "deathrattle", "=", "[", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "MINION", ",", "minion", "=", "Self", "Selector", "(", ")", ")", ",", "add_to_deck", "=", "True", ")", ",", "Player", "Selector", "(", ")", ")", ",", "Deathrattle", "(", "Remove", "(", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )"]}
{"input": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b>Spare Part</b> card to your hand.", "output": "class MechBearCat(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mech-Bear-Cat\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, effects=[Effect(Damaged(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))])\u00a7", "input_tokens": ["Mech-Bear-Cat", "NAME_END", "7", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "add", "a", "<b>", "Spare", "Part", "</b>", "card", "to", "your", "hand."], "output_tokens": ["class", "Mech", "Bear", "Cat", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mech", "-", "Bear", "-", "Cat", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "6", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Siege Engine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siege Engine ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Give each player a <b>Spare Part.</b>", "output": "class MechanicalYeti(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechanical Yeti\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(4, 5, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(BothPlayer())))\u00a7", "input_tokens": ["Mechanical", "Yeti", "NAME_END", "4", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Give", "each", "player", "a", "<b>", "Spare", "Part.", "</b>"], "output_tokens": ["class", "Mechanical", "Yeti", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mechanical", "Yeti", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "return", "Minion", "(", "4", ",", "5", ",", "deathrattle", "=", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", "Both", "Player", "(", ")", ")", ")", ")"], "examples": ["class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"]}
{"input": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "output": "class Mechwarper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechwarper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, auras=[Aura(ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.MECH)))])\u00a7", "input_tokens": ["Mechwarper", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "Your", "Mechs", "cost", "(1)", "less."], "output_tokens": ["class", "Mechwarper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mechwarper", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "-", "1", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", "]", ")"], "examples": ["class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Sorcerers Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sorcerer ` s Apprentice ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )"]}
{"input": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "output": "class MekgineerThermaplugg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mekgineer Thermaplugg\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, effects=[Effect(MinionDied(player=EnemyPlayer()), ActionTag(Summon(LeperGnome()), PlayerSelector()))])\u00a7", "input_tokens": ["Mekgineer", "Thermaplugg", "NAME_END", "9", "ATK_END", "7", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "Whenever", "an", "enemy", "minion", "dies,", "summon", "a", "Leper", "Gnome."], "output_tokens": ["class", "Mekgineer", "Thermaplugg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mekgineer", "Thermaplugg", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Summon", "(", "Leper", "Gnome", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "class Gahzrilla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gahz ` rilla ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action Tag ( Give ( Buff ( Double Attack ( ) ) ) , Self Selector ( ) ) ) ] )", "class Foe Reaper4000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Foe Reaper 4000 ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( ` attack ` , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )", "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry</b>: Give your other Mechs +2 Attack.", "output": "class MetaltoothLeaper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Metaltooth Leaper\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(MINION_TYPE.MECH))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Metaltooth", "Leaper", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Give", "your", "other", "Mechs", "+2", "Attack."], "output_tokens": ["class", "Metaltooth", "Leaper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Metaltooth", "Leaper", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "output": "class MicroMachine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Micro Machine\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(TurnStarted(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Micro", "Machine", "NAME_END", "1", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "At", "the", "start", "of", "each", "turn,", "gain", "+1", "Attack."], "output_tokens": ["class", "Micro", "Machine", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Micro", "Machine", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gruul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gruul ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Jeeves ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Jeeves ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Draw ( Difference ( Count ( Card Selector ( players = Current Player ( ) ) ) , value = 3 ) ) , Player Selector ( Current Player ( ) ) ) ) ] )", "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "output": "class MimironsHead(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mimiron's Head\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, effects=[Effect(TurnStarted(), [ActionTag(Kill(), MinionSelector(IsType(MINION_TYPE.MECH, True)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH, True))), value=2)), ActionTag(Summon(V07TR0N()), PlayerSelector())])])\u00a7", "input_tokens": ["Mimiron's", "Head", "NAME_END", "4", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "if", "you", "have", "at", "least", "3", "Mechs,", "destroy", "them", "all", "and", "form", "V-07-TR-0N."], "output_tokens": ["class", "Mimirons", "Head", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mimiron", "`", "s", "Head", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "[", "Action", "Tag", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ",", "True", ")", ")", ",", "Greater", "Than", "(", "Count", "(", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ",", "True", ")", ")", ")", ",", "value", "=", "2", ")", ")", ",", "Action", "Tag", "(", "Summon", "(", "V07TR0N", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )"]}
{"input": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "output": "class MogorTheOgre(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mogor the Ogre\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, effects=[Effect(CharacterAttack(None, BothPlayer()), ActionTag(ChangeTarget(\u00a7            CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), TargetSelector(),\u00a7            And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7", "input_tokens": ["Mogor", "the", "Ogre", "NAME_END", "7", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "All", "minions", "have", "a", "50%", "chance", "to", "attack", "the", "wrong", "enemy."], "output_tokens": ["class", "Mogor", "The", "Ogre", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mogor", "the", "Ogre", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "6", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "None", ",", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Change", "Target", "(", "Character", "Selector", "(", "Not", "Current", "Target", "(", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ",", "Target", "Selector", "(", ")", ",", "And", "(", "One", "In", "(", "2", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "0", ")", ")", ")", ")", "]", ")"], "examples": ["class Foe Reaper4000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Foe Reaper 4000 ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( ` attack ` , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )", "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )"]}
{"input": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "output": "class MusterForBattle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Muster for Battle\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 3):\u00a7            dude = SilverHandRecruit()\u00a7            dude.summon(player, player.game, len(player.minions))\u00a7        justice = LightsJustice()\u00a7        hammer = justice.create_weapon(player)\u00a7        hammer.card = justice\u00a7        hammer.equip(player)\u00a7", "input_tokens": ["Muster", "for", "Battle", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Summon", "three", "1/1", "Silver", "Hand", "Recruits.", "Equip", "a", "1/4", "Weapon."], "output_tokens": ["class", "Muster", "For", "Battle", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Muster", "for", "Battle", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "dude", "=", "Silver", "Hand", "Recruit", "(", ")", "dude", ".", "summon", "(", "player", ",", "player", ".", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "justice", "=", "Lights", "Justice", "(", ")", "hammer", "=", "justice", ".", "create_weapon", "(", "player", ")", "hammer", ".", "card", "=", "justice", "hammer", ".", "equip", "(", "player", ")"], "examples": ["class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )"]}
{"input": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Add 4 random Murlocs to your hand. <b>Overload:</b> (3)", "output": "class Neptulon(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.minions.neutral import BluegillWarrior, ColdlightOracle, ColdlightSeer, \\\u00a7            GrimscaleOracle, MurlocRaider, MurlocTidecaller, MurlocTidehunter, MurlocWarleader, OldMurkEye, \\\u00a7            Puddlestomper\u00a7        murloc_list = [BluegillWarrior(), ColdlightOracle(), ColdlightSeer(), GrimscaleOracle(), MurlocRaider(), MurlocTidecaller(), MurlocTidehunter(), MurlocWarleader(), OldMurkEye(), Puddlestomper(), SiltfinSpiritwalker()]\u00a7        super().__init__(\"Neptulon\", 7, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY, overload=3, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=murloc_list), 4), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7", "input_tokens": ["Neptulon", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Add", "4", "random", "Murlocs", "to", "your", "hand.", "<b>", "Overload", ":", "</b>", "(3)"], "output_tokens": ["class", "Neptulon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "neutral", "import", "Bluegill", "Warrior", ",", "Coldlight", "Oracle", ",", "Coldlight", "Seer", ",", "\\", "Grimscale", "Oracle", ",", "Murloc", "Raider", ",", "Murloc", "Tidecaller", ",", "Murloc", "Tidehunter", ",", "Murloc", "Warleader", ",", "Old", "Murk", "Eye", ",", "\\", "Puddlestomper", "murloc_list", "=", "[", "Bluegill", "Warrior", "(", ")", ",", "Coldlight", "Oracle", "(", ")", ",", "Coldlight", "Seer", "(", ")", ",", "Grimscale", "Oracle", "(", ")", ",", "Murloc", "Raider", "(", ")", ",", "Murloc", "Tidecaller", "(", ")", ",", "Murloc", "Tidehunter", "(", ")", ",", "Murloc", "Warleader", "(", ")", ",", "Old", "Murk", "Eye", "(", ")", ",", "Puddlestomper", "(", ")", ",", "Siltfin", "Spiritwalker", "(", ")", "]", "super", "(", ")", ".", "__init__", "(", "`", "Neptulon", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "overload", "=", "3", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "murloc_list", ")", ",", "4", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ")"], "examples": ["class Nefarian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nefarian ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( ` character_class ` , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "output": "class OgreBrute(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Brute\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7", "input_tokens": ["Ogre", "Brute", "NAME_END", "4", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "50%", "chance", "to", "attack", "the", "wrong", "enemy."], "output_tokens": ["class", "Ogre", "Brute", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ogre", "Brute", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Attack", "(", ")", ",", "Action", "Tag", "(", "Change", "Target", "(", "Character", "Selector", "(", "Not", "Current", "Target", "(", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ",", "And", "(", "One", "In", "(", "2", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "0", ")", ")", ")", ")", "]", ")"], "examples": ["class Ogre Warmaul ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Warmaul ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Ancient Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Watcher ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , buffs = [ Buff ( Cant Attack ( ) ) ] )", "class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )"]}
{"input": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Stealth</b> NL 50% chance to attack the wrong enemy.", "output": "class OgreNinja(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Ninja\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, stealth=True, effects=[Effect(Attack(), ActionTag(ChangeTarget( CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7", "input_tokens": ["Ogre", "Ninja", "NAME_END", "6", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Stealth", "</b>", "NL", "50%", "chance", "to", "attack", "the", "wrong", "enemy."], "output_tokens": ["class", "Ogre", "Ninja", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ogre", "Ninja", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ",", "stealth", "=", "True", ",", "effects", "=", "[", "Effect", "(", "Attack", "(", ")", ",", "Action", "Tag", "(", "Change", "Target", "(", "Character", "Selector", "(", "Not", "Current", "Target", "(", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ",", "And", "(", "One", "In", "(", "2", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "0", ")", ")", ")", ")", "]", ")"], "examples": ["class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Ravenholdt Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ravenholdt Assassin ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 7 , 5 , stealth = True )", "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Dunemaul Shaman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dunemaul Shaman ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"]}
{"input": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "output": "class OgreWarmaul(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Warmaul\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), HeroSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7", "input_tokens": ["Ogre", "Warmaul", "NAME_END", "4", "ATK_END", "-1", "DEF_END", "3", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "50%", "chance", "to", "attack", "the", "wrong", "enemy."], "output_tokens": ["class", "Ogre", "Warmaul", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ogre", "Warmaul", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "4", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "Is", "Hero", "(", ")", ")", ",", "Action", "Tag", "(", "Change", "Target", "(", "Character", "Selector", "(", "Not", "Current", "Target", "(", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ",", "Hero", "Selector", "(", ")", ",", "And", "(", "One", "In", "(", "2", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "0", ")", ")", ")", ")", "]", ")"], "examples": ["class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Ogre Ninja ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Ninja ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"]}
{"input": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b>Stealth</b>.", "output": "class OneeyedCheat(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"One-eyed Cheat\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Give(Stealth()), SelfSelector()))])\u00a7", "input_tokens": ["One-eyed", "Cheat", "NAME_END", "4", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "Pirate", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "summon", "a", "Pirate,", "gain", "<b>", "Stealth", "</b>", "."], "output_tokens": ["class", "Oneeyed", "Cheat", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "One", "-", "eyed", "Cheat", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "1", ",", "effects", "=", "[", "Effect", "(", "Minion", "Summoned", "(", "Is", "Type", "(", "MINION_TYPE", ".", "PIRATE", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Stealth", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Junkbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Junkbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Summon a random 2-Cost minion.", "output": "class PilotedShredder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Piloted Shredder\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\u00a7", "input_tokens": ["Piloted", "Shredder", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "random", "2-Cost", "minion."], "output_tokens": ["class", "Piloted", "Shredder", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Piloted", "Shredder", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "2", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "output": "class Puddlestomper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Puddlestomper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Puddlestomper", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Puddlestomper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Puddlestomper", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Give your Silver Hand Recruits +2/+2.", "output": "class Quartermaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Quartermaster\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(HasCardName(\"Silver Hand Recruit\"))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7", "input_tokens": ["Quartermaster", "NAME_END", "2", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "your", "Silver", "Hand", "Recruits", "+2/+2."], "output_tokens": ["class", "Quartermaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Quartermaster", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Has", "Card", "Name", "(", "`", "Silver", "Hand", "Recruit", "`", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ")"], "examples": ["class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Tirion Fordring ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tirion Fordring ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player Selector ( ) ) )"]}
{"input": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Transform a friendly minion into a random minion with the same Cost.", "output": "class Recombobulator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Recombobulator\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Transform(CardQuery(conditions=[ ManaCost(Attribute(\"mana\", SelfSelector())), IsMinion()])), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Recombobulator", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Transform", "a", "friendly", "minion", "into", "a", "random", "minion", "with", "the", "same", "Cost."], "output_tokens": ["class", "Recombobulator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Recombobulator", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Transform", "(", "Card", "Query", "(", "conditions", "=", "[", "Mana", "Cost", "(", "Attribute", "(", "`", "mana", "`", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Piloted Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Shredder ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "output": "class Recycle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Recycle\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.opponent.deck.put_back(self.target)\u00a7        self.target.remove_from_board()\u00a7", "input_tokens": ["Recycle", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Shuffle", "an", "enemy", "minion", "into", "your", "opponent's", "deck."], "output_tokens": ["class", "Recycle", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Recycle", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "opponent", ".", "deck", ".", "put_back", "(", "self", ".", "target", ")", "self", ".", "target", ".", "remove_from_board", "(", ")"], "examples": ["class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )"]}
{"input": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "output": "class ReversingSwitch(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Reversing Switch\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        temp_attack = self.target.calculate_attack()\u00a7        temp_health = self.target.health\u00a7        if temp_attack == 0:\u00a7            self.target.die(None)\u00a7        else:\u00a7            self.target.set_attack_to(temp_health)\u00a7            self.target.set_health_to(temp_attack)\u00a7", "input_tokens": ["Reversing", "Switch", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Swap", "a", "minion's", "Attack", "and", "Health."], "output_tokens": ["class", "Reversing", "Switch", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Reversing", "Switch", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "temp_attack", "=", "self", ".", "target", ".", "calculate_attack", "(", ")", "temp_health", "=", "self", ".", "target", ".", "health", "if", "temp_attack", "=", "=", "0", ":", "self", ".", "target", ".", "die", "(", "None", ")", "else", ":", "self", ".", "target", ".", "set_attack_to", "(", "temp_health", ")", "self", ".", "target", ".", "set_health_to", "(", "temp_attack", ")"], "examples": ["class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )"]}
{"input": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b>Taunt</b>.", "output": "class RustyHorn(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rusty Horn\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(Taunt()))\u00a7", "input_tokens": ["Rusty", "Horn", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Rusty", "Horn", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Rusty", "Horn", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Taunt", "(", ")", ")", ")"], "examples": ["class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )"]}
{"input": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b>Combo</b>: And your opponent's weapon.", "output": "class Sabotage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sabotage\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.die(None)\u00a7        game.check_delayed()\u00a7        if player.cards_played > 0 and game.other_player.weapon is not None:\u00a7            game.other_player.weapon.destroy()\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7", "input_tokens": ["Sabotage", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Destroy", "a", "random", "enemy", "minion.", "<b>", "Combo", "</b>", ":", "And", "your", "opponent's", "weapon."], "output_tokens": ["class", "Sabotage", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sabotage", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_battlecry_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "True", ")", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "die", "(", "None", ")", "game", ".", "check_delayed", "(", ")", "if", "player", ".", "cards_played", ">", "0", "and", "game", ".", "other_player", ".", "weapon", "is", "not", "None", ":", "game", ".", "other_player", ".", "weapon", ".", "destroy", "(", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "1"], "examples": ["class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Tinkers Sharpsword Oil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinker ` s Sharpsword Oil ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 3 player . hero . change_temp_attack ( 3 ) if player . cards_played > 0 : targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) if targets is not None : target = player . game . random_choice ( targets ) target . add_buff ( Buff ( Change Attack ( 3 ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"]}
{"input": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "output": "class SaltyDog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Salty Dog\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4)\u00a7", "input_tokens": ["Salty", "Dog", "NAME_END", "7", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Salty", "Dog", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Salty", "Dog", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "4", ")"], "examples": ["class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Spider Tank ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spider Tank ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "class Oasis Snapjaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Oasis Snapjaw ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 7 )", "class Core Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Hound ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 5 )"]}
{"input": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "output": "class SealOfLight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Seal of Light\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.heal(player.effective_heal_power(4), self)\u00a7        player.hero.change_temp_attack(2)\u00a7", "input_tokens": ["Seal", "of", "Light", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Restore", "#4", "Health", "to", "your", "hero", "and", "gain", "+2", "Attack", "this", "turn."], "output_tokens": ["class", "Seal", "Of", "Light", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Seal", "of", "Light", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "4", ")", ",", "self", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "2", ")"], "examples": ["class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "class Lay On Hands ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lay on Hands ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self ) player . draw ( ) player . draw ( ) player . draw ( )", "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Deal 3 damage to each hero.", "output": "class Shadowbomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowbomber\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Damage(3), HeroSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Shadowbomber", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage", "to", "each", "hero."], "output_tokens": ["class", "Shadowbomber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadowbomber", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Hero", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "output": "class Shadowboxer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowboxer\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])\u00a7", "input_tokens": ["Shadowboxer", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "character", "is", "healed,", "deal", "1", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Shadowboxer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadowboxer", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Character", "Healed", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ",", "condition", "=", "None", ")", ")", ")", "]", ")"], "examples": ["class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Divine Shield</b>", "output": "class ShieldedMinibot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shielded Minibot\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, divine_shield=True)\u00a7", "input_tokens": ["Shielded", "Minibot", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Shielded", "Minibot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shielded", "Minibot", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "divine_shield", "=", "True", ")"], "examples": ["class Cobalt Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobalt Guardian ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( Divine Shield ( ) ) , Self Selector ( ) ) ) ] )", "class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Gain 5 Armor.", "output": "class Shieldmaiden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shieldmaiden\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=Battlecry(IncreaseArmor(5), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Shieldmaiden", "NAME_END", "5", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "5", "Armor."], "output_tokens": ["class", "Shieldmaiden", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shieldmaiden", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Increase", "Armor", "(", "5", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "output": "class ShipsCannon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ship's Cannon\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Damage(2), CharacterSelector(None, EnemyPlayer(), RandomPicker())))])\u00a7", "input_tokens": ["Ship's", "Cannon", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "summon", "a", "Pirate,", "deal", "2", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Ships", "Cannon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ship", "`", "s", "Cannon", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Minion", "Summoned", "(", "Is", "Type", "(", "MINION_TYPE", ".", "PIRATE", ")", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "None", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Ragnaros The Firelord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ragnaros the Firelord ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 8 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant Attack ( ) ) ] )", "class Sorcerers Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sorcerer ` s Apprentice ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )"]}
{"input": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion -2 Attack this turn.", "output": "class Shrinkmeister(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shrinkmeister\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(-2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Shrinkmeister", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "minion", "-2", "Attack", "this", "turn."], "output_tokens": ["class", "Shrinkmeister", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shrinkmeister", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "-", "2", ")", ",", "Turn", "Ended", "(", "player", "=", "Current", "Player", "(", ")", ")", ")", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Dark Iron Dwarf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Dwarf ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"]}
{"input": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "output": "class SiegeEngine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siege Engine\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, effects=[Effect(ArmorIncreased(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Siege", "Engine", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "gain", "Armor,", "give", "this", "minion", "+1", "Attack."], "output_tokens": ["class", "Siege", "Engine", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Siege", "Engine", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Armor", "Increased", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Freeze</b> any character damaged by this minion.", "output": "class Snowchugger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snowchugger\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])\u00a7", "input_tokens": ["Snowchugger", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "any", "character", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Snowchugger", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Snowchugger", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Frozen", "(", ")", ")", ",", "Target", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Water Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Water Elemental ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Spell Damage +1</b>", "output": "class SootSpewer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soot Spewer\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, spell_damage=1)\u00a7", "input_tokens": ["Soot", "Spewer", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>"], "output_tokens": ["class", "Soot", "Spewer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Soot", "Spewer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "spell_damage", "=", "1", ")"], "examples": ["class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )"]}
{"input": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "output": "class SpiderTank(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spider Tank\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7", "input_tokens": ["Spider", "Tank", "NAME_END", "3", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Spider", "Tank", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spider", "Tank", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "4", ")"], "examples": ["class Salty Dog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Salty Dog ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 7 , 4 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Damaged Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Damaged Golem ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )"]}
{"input": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "output": "class SteamwheedleSniper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Steamwheedle Sniper\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, auras=[Aura(PowerTargetsMinions(), HeroSelector())])\u00a7", "input_tokens": ["Steamwheedle", "Sniper", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Your", "Hero", "Power", "can", "target", "minions."], "output_tokens": ["class", "Steamwheedle", "Sniper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Steamwheedle", "Sniper", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "auras", "=", "[", "Aura", "(", "Power", "Targets", "Minions", "(", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Wee Spellstopper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wee Spellstopper ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )"]}
{"input": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "output": "class StonesplinterTrogg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stonesplinter Trogg\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Stonesplinter", "Trogg", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "your", "opponent", "casts", "a", "spell,", "gain", "+1", "Attack."], "output_tokens": ["class", "Stonesplinter", "Trogg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stonesplinter", "Trogg", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Violet Teacher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Teacher ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )", "class Lorewalker Cho ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lorewalker Cho ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Spell Cast ( player = Both Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Other Player ( ) ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Taunt</b>", "output": "class TargetDummy(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Target Dummy\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7", "input_tokens": ["Target", "Dummy", "NAME_END", "0", "ATK_END", "2", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Target", "Dummy", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Target", "Dummy", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )"]}
{"input": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "output": "class TimeRewinder(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Time Rewinder\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.bounce()\u00a7", "input_tokens": ["Time", "Rewinder", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Return", "a", "friendly", "minion", "to", "your", "hand."], "output_tokens": ["class", "Time", "Rewinder", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Time", "Rewinder", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "bounce", "(", ")"], "examples": ["class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )"]}
{"input": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b>Combo:</b> Give a random friendly minion +3 Attack.", "output": "class TinkersSharpswordOil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tinker's Sharpsword Oil\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.weapon.base_attack += 3\u00a7        player.hero.change_temp_attack(3)\u00a7        if player.cards_played > 0:\u00a7            targets = hearthbreaker.targeting.find_friendly_minion_battlecry_target(player.game, lambda x: x)\u00a7            if targets is not None:\u00a7                target = player.game.random_choice(targets)\u00a7                target.add_buff(Buff(ChangeAttack(3)))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and player.weapon is not None\u00a7", "input_tokens": ["Tinker's", "Sharpsword", "Oil", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "weapon", "+3", "Attack.", "<b>", "Combo", ":", "</b>", "Give", "a", "random", "friendly", "minion", "+3", "Attack."], "output_tokens": ["class", "Tinkers", "Sharpsword", "Oil", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tinker", "`", "s", "Sharpsword", "Oil", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "weapon", ".", "base_attack", "+", "=", "3", "player", ".", "hero", ".", "change_temp_attack", "(", "3", ")", "if", "player", ".", "cards_played", ">", "0", ":", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_battlecry_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "x", ")", "if", "targets", "is", "not", "None", ":", "target", "=", "player", ".", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "add_buff", "(", "Buff", "(", "Change", "Attack", "(", "3", ")", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "player", ".", "weapon", "is", "not", "None"], "examples": ["class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Sabotage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sabotage ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) if player . cards_played > 0 and game . other_player . weapon is not None : game . other_player . weapon . destroy ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )"]}
{"input": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "output": "class TradePrinceGallywix(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Trade Prince Gallywix\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 8, effects=[Effect(SpellCast(Not(HasCardName(\"Gallywix's Coin\")), EnemyPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(FriendlyPlayer()))), Effect(SpellCast(Not(HasCardName(\"Gallywix's Coin\")), EnemyPlayer()), ActionTag(AddCard(GallywixsCoin()), PlayerSelector(EnemyPlayer())))])\u00a7", "input_tokens": ["Trade", "Prince", "Gallywix", "NAME_END", "5", "ATK_END", "8", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "your", "opponent", "casts", "a", "spell,", "gain", "a", "copy", "of", "it", "and", "give", "them", "a", "Coin."], "output_tokens": ["class", "Trade", "Prince", "Gallywix", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Trade", "Prince", "Gallywix", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "Not", "(", "Has", "Card", "Name", "(", "`", "Gallywix", "`", "s", "Coin", "`", ")", ")", ",", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LAST_CARD", ")", ")", ",", "Player", "Selector", "(", "Friendly", "Player", "(", ")", ")", ")", ")", ",", "Effect", "(", "Spell", "Cast", "(", "Not", "(", "Has", "Card", "Name", "(", "`", "Gallywix", "`", "s", "Coin", "`", ")", ")", ",", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Gallywixs", "Coin", "(", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Violet Teacher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Teacher ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "output": "class TreeOfLife(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tree of Life\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for target in targets:\u00a7            target.heal(player.effective_heal_power(target.calculate_max_health()), self)\u00a7", "input_tokens": ["Tree", "of", "Life", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Restore", "all", "characters", "to", "full", "Health."], "output_tokens": ["class", "Tree", "Of", "Life", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tree", "of", "Life", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "targets", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "targets", ".", "append", "(", "game", ".", "current_player", ".", "hero", ")", "for", "target", "in", "targets", ":", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "target", ".", "calculate_max_health", "(", ")", ")", ",", "self", ")"], "examples": ["class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Wild Growth ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Growth ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1 else : player . hand . append ( Excess Mana ( ) ) player . hand [ - 1 ] . player = player"]}
{"input": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "output": "class TroggzorTheEarthinator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Troggzor the Earthinator\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Summon(BurlyRockjawTrogg()), PlayerSelector()))])\u00a7", "input_tokens": ["Troggzor", "the", "Earthinator", "NAME_END", "6", "ATK_END", "6", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "your", "opponent", "casts", "a", "spell,", "summon", "a", "Burly", "Rockjaw", "Trogg."], "output_tokens": ["class", "Troggzor", "The", "Earthinator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Troggzor", "the", "Earthinator", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "player", "=", "Enemy", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Summon", "(", "Burly", "Rockjaw", "Trogg", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Trade Prince Gallywix ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Trade Prince Gallywix ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 8 , effects = [ Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Friendly Player ( ) ) ) ) , Effect ( Spell Cast ( Not ( Has Card Name ( ` Gallywix ` s Coin ` ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Gallywixs Coin ( ) ) , Player Selector ( Enemy Player ( ) ) ) ) ] )", "class Violet Teacher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Teacher ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )", "class Illidan Stormrage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illidan Stormrage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Summon ( Flame Of Azzinoth ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "output": "class UnstablePortal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unstable Portal\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        query = CardQuery(conditions=[IsMinion()])\u00a7        new_minon = query.get_card(player, player, self)\u00a7        new_minon.add_buff(Buff(ManaChange(-3)))\u00a7        player.hand.append(new_minon)\u00a7", "input_tokens": ["Unstable", "Portal", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Add", "a", "random", "minion", "to", "your", "hand.", "It", "costs", "(3)", "less."], "output_tokens": ["class", "Unstable", "Portal", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Unstable", "Portal", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "query", "=", "Card", "Query", "(", "conditions", "=", "[", "Is", "Minion", "(", ")", "]", ")", "new_minon", "=", "query", ".", "get_card", "(", "player", ",", "player", ",", "self", ")", "new_minon", ".", "add_buff", "(", "Buff", "(", "Mana", "Change", "(", "-", "3", ")", ")", ")", "player", ".", "hand", ".", "append", "(", "new_minon", ")"], "examples": ["class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )"]}
{"input": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry:</b> Give a friendly Mech +4 Health.", "output": "class UpgradedRepairBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Upgraded Repair Bot\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Upgraded", "Repair", "Bot", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "Mech", "+4", "Health."], "output_tokens": ["class", "Upgraded", "Repair", "Bot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Upgraded", "Repair", "Bot", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Change", "Health", "(", "4", ")", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Charge</b> NL <b>Mega-Windfury</b> <i>(Can attack four times a turn.)</i>", "output": "class V07TR0N(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"V-07-TR-0N\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False, MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 8, charge=True, buffs=[Buff(MegaWindfury())])\u00a7", "input_tokens": ["V-07-TR-0N", "NAME_END", "4", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Charge", "</b>", "NL", "<b>", "Mega-Windfury", "</b>", "<i>(Can", "attack", "four", "times", "a", "turn.)</i>"], "output_tokens": ["class", "V07TR0N", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "V", "-", "07", "-", "TR", "-", "0N", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ",", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "8", ",", "charge", "=", "True", ",", "buffs", "=", "[", "Buff", "(", "Mega", "Windfury", "(", ")", ")", "]", ")"], "examples": ["class Grommash Hellscream ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grommash Hellscream ` , 8 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 9 , charge = True , enrage = [ Aura ( Change Attack ( 6 ) , Self Selector ( ) ) ] )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )"]}
{"input": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b>Spell Damage +1</b>.", "output": "class VelensChosen(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Velen's Chosen\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(2)\u00a7        self.target.increase_health(4)\u00a7        self.target.add_buff(Buff(SpellDamage(1)))\u00a7", "input_tokens": ["Velen's", "Chosen", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "a", "minion", "+2/+4", "and", "<b>", "Spell", "Damage", "+1", "</b>", "."], "output_tokens": ["class", "Velens", "Chosen", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Velen", "`", "s", "Chosen", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "increase_health", "(", "4", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Spell", "Damage", "(", "1", ")", ")", ")"], "examples": ["class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Hand Of Protection ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hand of Protection ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . divine_shield = True"]}
{"input": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "output": "class VitalityTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vitality Totem\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Heal(4), HeroSelector()))])\u00a7", "input_tokens": ["Vitality", "Totem", "NAME_END", "0", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "restore", "4", "Health", "to", "your", "hero."], "output_tokens": ["class", "Vitality", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vitality", "Totem", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "4", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Mana Tide Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Tide Totem ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Illuminator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illuminator ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )"]}
{"input": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "output": "class WeeSpellstopper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wee Spellstopper\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, auras=[Aura(NoSpellTarget(), MinionSelector(Adjacent()))])\u00a7", "input_tokens": ["Wee", "Spellstopper", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Adjacent", "minions", "can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Wee", "Spellstopper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wee", "Spellstopper", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "auras", "=", "[", "Aura", "(", "No", "Spell", "Target", "(", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", "]", ")"], "examples": ["class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "class Arcane Nullifier X21 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Nullifier X - 21 ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 5 , taunt = True , spell_targetable = False )", "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )"]}
{"input": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "output": "class WhirlingBlades(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirling Blades\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(1)\u00a7", "input_tokens": ["Whirling", "Blades", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "+1", "Attack."], "output_tokens": ["class", "Whirling", "Blades", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whirling", "Blades", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "1", ")"], "examples": ["class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )"]}
{"input": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Windfury</b>", "output": "class WhirlingZapomatic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirling Zap-o-matic\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(3, 2, windfury=True)\u00a7", "input_tokens": ["Whirling", "Zap-o-matic", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Whirling", "Zapomatic", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whirling", "Zap", "-", "o", "-", "matic", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "windfury", "=", "True", ")"], "examples": ["class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )"]}
{"input": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Return a random friendly minion to your hand.", "output": "class AnubarAmbusher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anub'ar Ambusher\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, deathrattle=Deathrattle(Bounce(), MinionSelector(picker=RandomPicker())))\u00a7", "input_tokens": ["Anub'ar", "Ambusher", "NAME_END", "5", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Return", "a", "random", "friendly", "minion", "to", "your", "hand."], "output_tokens": ["class", "Anubar", "Ambusher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Anub", "`", "ar", "Ambusher", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ",", "deathrattle", "=", "Deathrattle", "(", "Bounce", "(", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"], "examples": ["class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, give a random friendly minion +3/+2.", "output": "class Avenge(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Avenge\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, dead_minion, attacker):\u00a7        if len([minion for minion in self.player.minions if not minion.dead]) > 0:\u00a7            target = self.player.game.random_choice(self.player.minions)\u00a7            target.change_attack(3)\u00a7            target.increase_health(2)\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7", "input_tokens": ["Avenge", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "one", "of", "your", "minions", "dies,", "give", "a", "random", "friendly", "minion", "+3/+2."], "output_tokens": ["class", "Avenge", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Avenge", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "dead_minion", ",", "attacker", ")", ":", "if", "len", "(", "[", "minion", "for", "minion", "in", "self", ".", "player", ".", "minions", "if", "not", "minion", ".", "dead", "]", ")", ">", "0", ":", "target", "=", "self", ".", "player", ".", "game", ".", "random_choice", "(", "self", ".", "player", ".", "minions", ")", "target", ".", "change_attack", "(", "3", ")", "target", ".", "increase_health", "(", "2", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Hand Of Protection ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hand of Protection ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . divine_shield = True", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None"]}
{"input": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b>Deathrattles</b> twice.", "output": "class BaronRivendare(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baron Rivendare\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7, auras=[Aura(DoubleDeathrattle(), PlayerSelector())])\u00a7", "input_tokens": ["Baron", "Rivendare", "NAME_END", "1", "ATK_END", "7", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Your", "minions", "trigger", "their", "<b>", "Deathrattles", "</b>", "twice."], "output_tokens": ["class", "Baron", "Rivendare", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Baron", "Rivendare", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "7", ",", "auras", "=", "[", "Aura", "(", "Double", "Deathrattle", "(", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )"]}
{"input": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Your opponent draws a card.", "output": "class DancingSwords(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dancing Swords\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, deathrattle=Deathrattle(Draw(), PlayerSelector(EnemyPlayer())))\u00a7", "input_tokens": ["Dancing", "Swords", "NAME_END", "4", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Your", "opponent", "draws", "a", "card."], "output_tokens": ["class", "Dancing", "Swords", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dancing", "Swords", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"], "examples": ["class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Give a random friendly minion +3 Health.", "output": "class DarkCultist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Cultist\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, deathrattle=Deathrattle(Give(ChangeHealth(3)), MinionSelector(picker=RandomPicker())))\u00a7", "input_tokens": ["Dark", "Cultist", "NAME_END", "3", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Give", "a", "random", "friendly", "minion", "+3", "Health."], "output_tokens": ["class", "Dark", "Cultist", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dark", "Cultist", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Give", "(", "Change", "Health", "(", "3", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"], "examples": ["class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When a friendly minion dies, put 2 copies of it into your hand.", "output": "class Duplicate(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Duplicate\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7        self.player = None\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        for c in range(0, 2):\u00a7            if len(self.player.hand) < 10:\u00a7                new_card = type(minion.card)()\u00a7                self.player.hand.append(new_card)\u00a7                new_card.attach(new_card, self.player)\u00a7        super().reveal()\u00a7", "input_tokens": ["Duplicate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "a", "friendly", "minion", "dies,", "put", "2", "copies", "of", "it", "into", "your", "hand."], "output_tokens": ["class", "Duplicate", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Duplicate", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "self", ".", "player", "=", "None", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "player", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "minion_died", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "minion", ",", "by", ")", ":", "for", "c", "in", "range", "(", "0", ",", "2", ")", ":", "if", "len", "(", "self", ".", "player", ".", "hand", ")", "<", "10", ":", "new_card", "=", "type", "(", "minion", ".", "card", ")", "(", ")", "self", ".", "player", ".", "hand", ".", "append", "(", "new_card", ")", "new_card", ".", "attach", "(", "new_card", ",", "self", ".", "player", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )"]}
{"input": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Summon an exact copy of this minion at the end of the turn.", "output": "class EchoingOoze(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Echoing Ooze\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(GiveEffect(Effect(TurnEnded(), ActionTag(Duplicate(SelfSelector()), PlayerSelector()))), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7", "input_tokens": ["Echoing", "Ooze", "NAME_END", "1", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "an", "exact", "copy", "of", "this", "minion", "at", "the", "end", "of", "the", "turn."], "output_tokens": ["class", "Echoing", "Ooze", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Echoing", "Ooze", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Give", "Effect", "(", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Duplicate", "(", "Self", "Selector", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ")"], "examples": ["class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Dark Iron Dwarf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Dwarf ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class Feugen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feugen\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))\u00a7", "input_tokens": ["Feugen", "NAME_END", "4", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Feugen", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Feugen", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Thaddius", "(", ")", ")", ",", "Player", "Selector", "(", ")", ",", "In", "Graveyard", "(", "Stalagg", "(", ")", ")", ")", ")"], "examples": ["class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "class Thaddius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thaddius ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 11 , 11 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> If Stalagg also died this game, summon Thaddius.", "output": "class Feugen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feugen\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))\u00a7", "input_tokens": ["Feugen", "NAME_END", "4", "ATK_END", "7", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "If", "Stalagg", "also", "died", "this", "game,", "summon", "Thaddius."], "output_tokens": ["class", "Feugen", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Feugen", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Thaddius", "(", ")", ")", ",", "Player", "Selector", "(", ")", ",", "In", "Graveyard", "(", "Stalagg", "(", ")", ")", ")", ")"], "examples": ["class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )"]}
{"input": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Deathrattle:</b> Summon two 1/1 Spectral Spiders.", "output": "class HauntedCreeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Haunted Creeper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, deathrattle=Deathrattle(Summon(SpectralSpider(), 2), PlayerSelector()))\u00a7", "input_tokens": ["Haunted", "Creeper", "NAME_END", "1", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "two", "1/1", "Spectral", "Spiders."], "output_tokens": ["class", "Haunted", "Creeper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Haunted", "Creeper", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Spectral", "Spider", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Harvest Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harvest Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )"]}
{"input": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "output": "class KelThuzad(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kel'Thuzad\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 8, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(ResurrectFriendly(), PlayerSelector()))])\u00a7", "input_tokens": ["Kel'Thuzad", "NAME_END", "6", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "each", "turn,", "summon", "all", "friendly", "minions", "that", "died", "this", "turn."], "output_tokens": ["class", "Kel", "Thuzad", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kel", "`", "Thuzad", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Resurrect", "Friendly", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "class Foe Reaper4000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Foe Reaper 4000 ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( ` attack ` , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )"]}
{"input": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Enemy spells cost (5) more next turn.", "output": "class Loatheb(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Loatheb\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(5), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Loatheb", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Enemy", "spells", "cost", "(5)", "more", "next", "turn."], "output_tokens": ["class", "Loatheb", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Loatheb", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Give", "Aura", "(", "Aura", "Until", "(", "Mana", "Change", "(", "5", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Spell", "(", ")", ")", ",", "Turn", "Ended", "(", ")", ")", ")", ",", "Player", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )"]}
{"input": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Put a <b>Secret</b> from your deck into the battlefield.", "output": "class MadScientist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mad Scientist\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, deathrattle=Deathrattle(ApplySecret(CARD_SOURCE.MY_DECK), PlayerSelector()))\u00a7", "input_tokens": ["Mad", "Scientist", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Put", "a", "<b>", "Secret", "</b>", "from", "your", "deck", "into", "the", "battlefield."], "output_tokens": ["class", "Mad", "Scientist", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mad", "Scientist", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Apply", "Secret", "(", "CARD_SOURCE", ".", "MY_DECK", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Webspinner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Webspinner ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )", "class Malorne ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malorne ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )"]}
{"input": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Nerubian", "NAME_END", "4", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Nerubian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerubian", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Nerubian", "NAME_END", "3", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Nerubian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerubian", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Defias Bandit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defias Bandit ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "output": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Nerubian", "NAME_END", "4", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "NIL"], "output_tokens": ["class", "Nerubian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerubian", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Chillwind Yeti ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chillwind Yeti ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )"]}
{"input": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Deathrattle:</b> Summon a 4/4 Nerubian.", "output": "class NerubianEgg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian Egg\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, deathrattle=Deathrattle(Summon(Nerubian()), PlayerSelector()))\u00a7", "input_tokens": ["Nerubian", "Egg", "NAME_END", "0", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "4/4", "Nerubian."], "output_tokens": ["class", "Nerubian", "Egg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerubian", "Egg", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Nerubian", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "output": "class PoisonSeeds(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Poison Seeds\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import PoisonSeedsTreant\u00a7        targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda m: True)\u00a7        for target in targets:\u00a7            target.die(None)\u00a7\u00a7        game.check_delayed()\u00a7\u00a7        for target in targets:\u00a7            PoisonSeedsTreant().summon(target.player, target.game, len(target.player.minions))\u00a7", "input_tokens": ["Poison", "Seeds", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "all", "minions", "and", "summon", "2/2", "Treants", "to", "replace", "them."], "output_tokens": ["class", "Poison", "Seeds", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Poison", "Seeds", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "druid", "import", "Poison", "Seeds", "Treant", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "m", ":", "True", ")", "for", "target", "in", "targets", ":", "target", ".", "die", "(", "None", ")", "game", ".", "check_delayed", "(", ")", "for", "target", "in", "targets", ":", "Poison", "Seeds", "Treant", "(", ")", ".", "summon", "(", "target", ".", "player", ",", "target", ".", "game", ",", "len", "(", "target", ".", "player", ".", "minions", ")", ")"], "examples": ["class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "class Naturalize ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Naturalize ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . other_player . draw ( ) game . other_player . draw ( )"]}
{"input": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "output": "class Reincarnate(SpellCard):\u00a7\u00a7    def __init__(self):\u00a7        super().__init__(\"Reincarnate\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        game.check_delayed()\u00a7        self.target.card.summon(self.target.player, game, len(self.target.player.minions))\u00a7", "input_tokens": ["Reincarnate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "a", "minion,", "then", "return", "it", "to", "life", "with", "full", "Health."], "output_tokens": ["class", "Reincarnate", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Reincarnate", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")", "game", ".", "check_delayed", "(", ")", "self", ".", "target", ".", "card", ".", "summon", "(", "self", ".", "target", ".", "player", ",", "game", ",", "len", "(", "self", ".", "target", ".", "player", ".", "minions", ")", ")"], "examples": ["class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth.</b> At the start of your turn, gain +1/+1.", "output": "class ShadeOfNaxxramas(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shade of Naxxramas\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, stealth=True, effects=[Effect(TurnStarted(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7", "input_tokens": ["Shade", "of", "Naxxramas", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Stealth.", "</b>", "At", "the", "start", "of", "your", "turn,", "gain", "+1/+1."], "output_tokens": ["class", "Shade", "Of", "Naxxramas", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shade", "of", "Naxxramas", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "stealth", "=", "True", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "output": "class Slime(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Slime\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 2, taunt=True)\u00a7", "input_tokens": ["Slime", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Slime", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Slime", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
{"input": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class SpectralSpider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spectral Spider\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Spectral", "Spider", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Spectral", "Spider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spectral", "Spider", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Defias Bandit ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defias Bandit ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class Stalagg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stalagg\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))\u00a7", "input_tokens": ["Stalagg", "NAME_END", "7", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Stalagg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stalagg", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Thaddius", "(", ")", ")", ",", "Player", "Selector", "(", ")", ",", "In", "Graveyard", "(", "Feugen", "(", ")", ")", ")", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Thaddius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thaddius ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 11 , 11 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> If Feugen also died this game, summon Thaddius.", "output": "class Stalagg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stalagg\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))\u00a7", "input_tokens": ["Stalagg", "NAME_END", "7", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "If", "Feugen", "also", "died", "this", "game,", "summon", "Thaddius."], "output_tokens": ["class", "Stalagg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stalagg", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Thaddius", "(", ")", ")", ",", "Player", "Selector", "(", ")", ",", "In", "Graveyard", "(", "Feugen", "(", ")", ")", ")", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "output": "class StoneskinGargoyle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneskin Gargoyle\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Heal(10000), SelfSelector()))])\u00a7", "input_tokens": ["Stoneskin", "Gargoyle", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "restore", "this", "minion", "to", "full", "Health."], "output_tokens": ["class", "Stoneskin", "Gargoyle", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stoneskin", "Gargoyle", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "10000", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )"]}
{"input": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class Thaddius(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thaddius\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(11, 11)\u00a7", "input_tokens": ["Thaddius", "NAME_END", "11", "ATK_END", "11", "DEF_END", "10", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Thaddius", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Thaddius", "`", ",", "10", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "11", ",", "11", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "class Finkle Einhorn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finkle Einhorn ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )"]}
{"input": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Treant", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Treant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Treant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "_", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b>Deathrattle</b>, gain +1 Attack.", "output": "class Undertaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Undertaker\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(MinionSummoned(MinionHasDeathrattle()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Undertaker", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "summon", "a", "minion", "with", "<b>", "Deathrattle", "</b>", ",", "gain", "+1", "Attack."], "output_tokens": ["class", "Undertaker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Undertaker", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Minion", "Summoned", "(", "Minion", "Has", "Deathrattle", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>. <b>Deathrattle:</b> Deal 1 damage to all minions.", "output": "class UnstableGhoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unstable Ghoul\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())), taunt=True)\u00a7", "input_tokens": ["Unstable", "Ghoul", "NAME_END", "1", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Deathrattle", ":", "</b>", "Deal", "1", "damage", "to", "all", "minions."], "output_tokens": ["class", "Unstable", "Ghoul", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Unstable", "Ghoul", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "1", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "taunt", "=", "True", ")"], "examples": ["class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Deathrattle:</b> Add a random Beast card to your hand.", "output": "class Webspinner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Webspinner\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.BEAST)])), PlayerSelector()))\u00a7", "input_tokens": ["Webspinner", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Add", "a", "random", "Beast", "card", "to", "your", "hand."], "output_tokens": ["class", "Webspinner", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Webspinner", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )"]}
{"input": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Restore 5 Health to the enemy hero.", "output": "class ZombieChow(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Zombie Chow\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, deathrattle=Deathrattle(Heal(5), HeroSelector(EnemyPlayer())))\u00a7", "input_tokens": ["Zombie", "Chow", "NAME_END", "2", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Restore", "5", "Health", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Zombie", "Chow", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Zombie", "Chow", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "deathrattle", "=", "Deathrattle", "(", "Heal", "(", "5", ")", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"], "examples": ["class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Leper Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leper Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )"]}
{"input": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b>. <b>Deathrattle:</b> Deal 2 damage to ALL characters.", "output": "class Abomination(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Abomination\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)\u00a7", "input_tokens": ["Abomination", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Deathrattle", ":", "</b>", "Deal", "2", "damage", "to", "ALL", "characters."], "output_tokens": ["class", "Abomination", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Abomination", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "taunt", "=", "True", ")"], "examples": ["class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )", "class Stormpike Commando ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormpike Commando ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )"]}
{"input": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion +2 Attack this turn.", "output": "class AbusiveSergeant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Abusive Sergeant\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Abusive", "Sergeant", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "minion", "+2", "Attack", "this", "turn."], "output_tokens": ["class", "Abusive", "Sergeant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Abusive", "Sergeant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "2", ")", ",", "Turn", "Ended", "(", "player", "=", "Current", "Player", "(", ")", ")", ")", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Dark Iron Dwarf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Dwarf ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )"]}
{"input": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "output": "class AcolyteOfPain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acolyte of Pain\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(Damaged(), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Acolyte", "of", "Pain", "NAME_END", "1", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "draw", "a", "card."], "output_tokens": ["class", "Acolyte", "Of", "Pain", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Acolyte", "of", "Pain", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )"]}
{"input": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Windfury, Charge, Divine Shield, Taunt</b>", "output": "class AlAkirTheWindlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Al'Akir the Windlord\", 8, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, windfury=True, charge=True, divine_shield=True, taunt=True)\u00a7", "input_tokens": ["Al'Akir", "the", "Windlord", "NAME_END", "3", "ATK_END", "5", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Windfury,", "Charge,", "Divine", "Shield,", "Taunt", "</b>"], "output_tokens": ["class", "Al", "Akir", "The", "Windlord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Al", "`", "Akir", "the", "Windlord", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "windfury", "=", "True", ",", "charge", "=", "True", ",", "divine_shield", "=", "True", ",", "taunt", "=", "True", ")"], "examples": ["class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )"]}
{"input": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "output": "class AlarmoBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alarm-o-Bot\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnStarted(), ActionTag(SwapWithHand(), PlayerSelector()))])\u00a7", "input_tokens": ["Alarm-o-Bot", "NAME_END", "0", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "swap", "this", "minion", "with", "a", "random", "one", "in", "your", "hand."], "output_tokens": ["class", "Alarmo", "Bot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Alarm", "-", "o", "-", "Bot", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Swap", "With", "Hand", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Pint Sized Summoner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pint - Sized Summoner ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give Aura ( Aura Until ( Mana Change ( - 1 ) , Card Selector ( condition = Is Minion ( ) ) , Minion Placed ( ) ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Change an enemy minion's Attack to 1.", "output": "class AldorPeacekeeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Aldor Peacekeeper\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Give(SetAttack(1)), MinionSelector(condition=None, players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Aldor", "Peacekeeper", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Change", "an", "enemy", "minion's", "Attack", "to", "1."], "output_tokens": ["class", "Aldor", "Peacekeeper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Aldor", "Peacekeeper", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Set", "Attack", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "condition", "=", "None", ",", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Argent Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Protector ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Crazed Alchemist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crazed Alchemist ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )"]}
{"input": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \"<b>Deathrattle:</b> Resummon this minion.\"", "output": "class AncestralSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Spirit\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.deathrattle.append(Deathrattle(Summon(self.target.card), PlayerSelector()))\u00a7", "input_tokens": ["Ancestral", "Spirit", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Give", "a", "minion", "\"", "<b>", "Deathrattle", ":", "</b>", "Resummon", "this", "minion.\""], "output_tokens": ["class", "Ancestral", "Spirit", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancestral", "Spirit", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "deathrattle", ".", "append", "(", "Deathrattle", "(", "Summon", "(", "self", ".", "target", ".", "card", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Windfury ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( _Windfury ( ) ) )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Return a friendly minion from the battlefield to your hand.", "output": "class AncientBrewmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Brewmaster\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Ancient", "Brewmaster", "NAME_END", "5", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Return", "a", "friendly", "minion", "from", "the", "battlefield", "to", "your", "hand."], "output_tokens": ["class", "Ancient", "Brewmaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancient", "Brewmaster", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Bounce", "(", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Youthful Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Youthful Brewmaster ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions <b>Spell Damage +1</b>.", "output": "class AncientMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)), MinionSelector(condition=Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7", "input_tokens": ["Ancient", "Mage", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "adjacent", "minions", "<b>", "Spell", "Damage", "+1", "</b>", "."], "output_tokens": ["class", "Ancient", "Mage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancient", "Mage", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Spell", "Damage", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "condition", "=", "Adjacent", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ")"], "examples": ["class Baron Rivendare ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Rivendare ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "output": "class AncientWatcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Watcher\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, buffs=[Buff(CantAttack())])\u00a7", "input_tokens": ["Ancient", "Watcher", "NAME_END", "4", "ATK_END", "5", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Can't", "attack."], "output_tokens": ["class", "Ancient", "Watcher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancient", "Watcher", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ",", "buffs", "=", "[", "Buff", "(", "Cant", "Attack", "(", ")", ")", "]", ")"], "examples": ["class Argent Watchman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Watchman ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , buffs = [ Buff ( Cant Attack ( ) ) ] , effects = [ Effect ( Used Power ( ) , Action Tag ( Give ( Buff Until ( Can Attack ( ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Ogre Brute ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Brute ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One -</b> Draw 2 cards; or Restore 5 Health.", "output": "class AncientOfLore(MinionCard):\u00a7    def __init__(self):\u00a7\u00a7        super().__init__(\"Ancient of Lore\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[\u00a7            Choice(AncientSecrets(), Heal(5), HeroSelector()),\u00a7            Choice(AncientTeachings(), Draw(3), PlayerSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Ancient", "of", "Lore", "NAME_END", "5", "ATK_END", "5", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Choose", "One", "-", "</b>", "Draw", "2", "cards;", "or", "Restore", "5", "Health."], "output_tokens": ["class", "Ancient", "Of", "Lore", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancient", "of", "Lore", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ",", "choices", "=", "[", "Choice", "(", "Ancient", "Secrets", "(", ")", ",", "Heal", "(", "5", ")", ",", "Hero", "Selector", "(", ")", ")", ",", "Choice", "(", "Ancient", "Teachings", "(", ")", ",", "Draw", "(", "3", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One</b> - NL +5 Attack; or +5 Health and <b>Taunt</b>.", "output": "class AncientOfWar(MinionCard):\u00a7    def __init__(self):\u00a7\u00a7        super().__init__(\"Ancient of War\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[\u00a7            Choice(Health(), Give([Buff(ChangeHealth(5)), Buff(Taunt())]), SelfSelector()),\u00a7            Choice(Attack(), Give([Buff(ChangeAttack(5))]), SelfSelector()),\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Ancient", "of", "War", "NAME_END", "5", "ATK_END", "5", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "NL", "+5", "Attack;", "or", "+5", "Health", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Ancient", "Of", "War", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ancient", "of", "War", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ",", "choices", "=", "[", "Choice", "(", "Health", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "5", ")", ")", ",", "Buff", "(", "Taunt", "(", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Attack", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "5", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ",", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"]}
{"input": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Enrage:</b> +5 Attack.", "output": "class AngryChicken(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Angry Chicken\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, enrage=[Aura(ChangeAttack(5), SelfSelector())])\u00a7", "input_tokens": ["Angry", "Chicken", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Enrage", ":", "</b>", "+5", "Attack."], "output_tokens": ["class", "Angry", "Chicken", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Angry", "Chicken", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "5", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )"]}
{"input": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Equip a 2/2 weapon.", "output": "class ArathiWeaponsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arathi Weaponsmith\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry(Equip(BattleAxe()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Arathi", "Weaponsmith", "NAME_END", "3", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Equip", "a", "2/2", "weapon."], "output_tokens": ["class", "Arathi", "Weaponsmith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Arathi", "Weaponsmith", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Equip", "(", "Battle", "Axe", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "class Stormforged Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormforged Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b> NL <b>Divine Shield</b>", "output": "class ArgentCommander(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Commander\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, divine_shield=True, charge=True)\u00a7", "input_tokens": ["Argent", "Commander", "NAME_END", "4", "ATK_END", "2", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Charge", "</b>", "NL", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Argent", "Commander", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Commander", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "divine_shield", "=", "True", ",", "charge", "=", "True", ")"], "examples": ["class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )"]}
{"input": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Divine Shield</b>.", "output": "class ArgentProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Protector\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(DivineShield()), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Argent", "Protector", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "minion", "<b>", "Divine", "Shield", "</b>", "."], "output_tokens": ["class", "Argent", "Protector", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Protector", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Divine", "Shield", "(", ")", ")", ",", "Minion", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "output": "class ArgentSquire(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Squire\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, divine_shield=True)\u00a7", "input_tokens": ["Argent", "Squire", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Argent", "Squire", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Argent", "Squire", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "divine_shield", "=", "True", ")"], "examples": ["class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )"]}
{"input": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "output": "class Armorsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armorsmith\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(CharacterDamaged(condition=IsMinion()), ActionTag(IncreaseArmor(), HeroSelector()))])\u00a7", "input_tokens": ["Armorsmith", "NAME_END", "1", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "friendly", "minion", "takes", "damage,", "gain", "1", "Armor."], "output_tokens": ["class", "Armorsmith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Armorsmith", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "condition", "=", "Is", "Minion", "(", ")", ")", ",", "Action", "Tag", "(", "Increase", "Armor", "(", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Siege Engine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siege Engine ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class Ashbringer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ashbringer\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        weapon = Weapon(5, 3)\u00a7        return weapon\u00a7", "input_tokens": ["Ashbringer", "NAME_END", "5", "ATK_END", "-1", "DEF_END", "5", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Ashbringer", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ashbringer", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "weapon", "=", "Weapon", "(", "5", ",", "3", ")", "return", "weapon"], "examples": ["class Lights Justice ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Light ` s Justice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 1 , 4 )", "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )"]}
{"input": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "output": "class AuchenaiSoulpriest(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Auchenai Soulpriest\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, auras=[Aura(HealAsDamage(), PlayerSelector())])\u00a7", "input_tokens": ["Auchenai", "Soulpriest", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Your", "cards", "and", "powers", "that", "restore", "Health", "now", "deal", "damage", "instead."], "output_tokens": ["class", "Auchenai", "Soulpriest", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Auchenai", "Soulpriest", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "auras", "=", "[", "Aura", "(", "Heal", "As", "Damage", "(", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )"]}
{"input": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "output": "class AvengingWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Avenging Wrath\", 6, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, player.effective_spell_damage(8)):\u00a7            targets = copy.copy(game.other_player.minions)\u00a7            targets.append(game.other_player.hero)\u00a7            target = game.random_choice(targets)\u00a7            target.damage(1, self)\u00a7", "input_tokens": ["Avenging", "Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$8", "damage", "randomly", "split", "among", "all", "enemies."], "output_tokens": ["class", "Avenging", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Avenging", "Wrath", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "player", ".", "effective_spell_damage", "(", "8", ")", ")", ":", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "append", "(", "game", ".", "other_player", ".", "hero", ")", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "damage", "(", "1", ",", "self", ")"], "examples": ["class Arcane Missiles ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Missiles ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "class Consecration ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Consecration ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )"]}
{"input": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Spell Damage +1</b>. <b>Battlecry:</b> Draw a card.", "output": "class AzureDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Azure Drake\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, spell_damage=1)\u00a7", "input_tokens": ["Azure", "Drake", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Rare", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Azure", "Drake", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Azure", "Drake", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "spell_damage", "=", "1", ")"], "examples": ["class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )"]}
{"input": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "output": "class BaneOfDoom(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bane of Doom\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(2) and \\ (isinstance(self.target, Minion) and not self.target.divine_shield):\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7            demons = CardQuery(conditions=[IsType(MINION_TYPE.DEMON)])\u00a7            demons.get_card(player, player, self).summon(player, game, len(player.minions))\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Bane", "of", "Doom", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$2", "damage", "to", "a", "character.", "If", "that", "kills", "it,", "summon", "a", "random", "Demon."], "output_tokens": ["class", "Bane", "Of", "Doom", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bane", "of", "Doom", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "health", "<", "=", "player", ".", "effective_spell_damage", "(", "2", ")", "and", "\\", "(", "isinstance", "(", "self", ".", "target", ",", "Minion", ")", "and", "not", "self", ".", "target", ".", "divine_shield", ")", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "demons", "=", "Card", "Query", "(", "conditions", "=", "[", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", "]", ")", "demons", ".", "get_card", "(", "player", ",", "player", ",", "self", ")", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "output": "class BaronGeddon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baron Geddon\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), CharacterSelector(players=BothPlayer())))])\u00a7", "input_tokens": ["Baron", "Geddon", "NAME_END", "7", "ATK_END", "5", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "deal", "2", "damage", "to", "ALL", "other", "characters."], "output_tokens": ["class", "Baron", "Geddon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Baron", "Geddon", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Flame Leviathan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Leviathan ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Both Player ( ) ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class BattleAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Battle Axe\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7", "input_tokens": ["Battle", "Axe", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "1", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Battle", "Axe", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Battle", "Axe", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "2", ")"], "examples": ["class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )", "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon"]}
{"input": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "output": "class BattleRage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Battle Rage\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        def damaged_character(character):\u00a7            return character.health < character.calculate_max_health()\u00a7\u00a7        super().use(player, game)\u00a7\u00a7        characters = copy.copy(player.minions)\u00a7        characters.append(player.hero)\u00a7\u00a7        characters = [character for character in characters if damaged_character(character)]\u00a7\u00a7        for i in range(0, len(characters)):\u00a7            player.draw()\u00a7", "input_tokens": ["Battle", "Rage", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Draw", "a", "card", "for", "each", "damaged", "friendly", "character."], "output_tokens": ["class", "Battle", "Rage", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Battle", "Rage", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "def", "damaged_character", "(", "character", ")", ":", "return", "character", ".", "health", "<", "character", ".", "calculate_max_health", "(", ")", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "characters", "=", "copy", ".", "copy", "(", "player", ".", "minions", ")", "characters", ".", "append", "(", "player", ".", "hero", ")", "characters", "=", "[", "character", "for", "character", "in", "characters", "if", "damaged_character", "(", "character", ")", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "characters", ")", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )"]}
{"input": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b>Immune</b> this turn.", "output": "class BestialWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bestial Wrath\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target, filter_func=lambda minion: minion.card.minion_type is MINION_TYPE.BEAST and minion.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))\u00a7        self.target.change_temp_attack(2)\u00a7", "input_tokens": ["Bestial", "Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Give", "a", "friendly", "Beast", "+2", "Attack", "and", "<b>", "Immune", "</b>", "this", "turn."], "output_tokens": ["class", "Bestial", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bestial", "Wrath", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ",", "filter_func", "=", "lambda", "minion", ":", "minion", ".", "card", ".", "minion_type", "is", "MINION_TYPE", ".", "BEAST", "and", "minion", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "Until", "(", "Immune", "(", ")", ",", "Turn", "Ended", "(", "player", "=", "Current", "Player", "(", ")", ")", ")", ")", "self", ".", "target", ".", "change_temp_attack", "(", "2", ")"], "examples": ["class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Rockbiter Weapon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rockbiter Weapon ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_temp_attack ( 3 )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Timber Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Timber Wolf ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )"]}
{"input": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "output": "class Betrayal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Betrayal\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        left_minion = None\u00a7        right_minion = None\u00a7\u00a7        index = self.target.index\u00a7        if index > 0:\u00a7            left_minion = game.other_player.minions[index - 1]\u00a7        if index < min(len(game.other_player.minions) - 1, 6):\u00a7            right_minion = game.other_player.minions[index + 1]\u00a7\u00a7        original_immune = self.target.immune\u00a7        self.target.immune = True\u00a7        if left_minion is not None:\u00a7            left_minion.damage(self.target.calculate_attack(), self.target)\u00a7        if right_minion is not None:\u00a7            right_minion.damage(self.target.calculate_attack(), self.target)\u00a7        self.target.immune = original_immune\u00a7", "input_tokens": ["Betrayal", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Force", "an", "enemy", "minion", "to", "deal", "its", "damage", "to", "the", "minions", "next", "to", "it."], "output_tokens": ["class", "Betrayal", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Betrayal", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "left_minion", "=", "None", "right_minion", "=", "None", "index", "=", "self", ".", "target", ".", "index", "if", "index", ">", "0", ":", "left_minion", "=", "game", ".", "other_player", ".", "minions", "[", "index", "-", "1", "]", "if", "index", "<", "min", "(", "len", "(", "game", ".", "other_player", ".", "minions", ")", "-", "1", ",", "6", ")", ":", "right_minion", "=", "game", ".", "other_player", ".", "minions", "[", "index", "+", "1", "]", "original_immune", "=", "self", ".", "target", ".", "immune", "self", ".", "target", ".", "immune", "=", "True", "if", "left_minion", "is", "not", "None", ":", "left_minion", ".", "damage", "(", "self", ".", "target", ".", "calculate_attack", "(", ")", ",", "self", ".", "target", ")", "if", "right_minion", "is", "not", "None", ":", "right_minion", ".", "damage", "(", "self", ".", "target", ".", "calculate_attack", "(", ")", ",", "self", ".", "target", ")", "self", ".", "target", ".", "immune", "=", "original_immune"], "examples": ["class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1"]}
{"input": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Destroy a minion with an Attack of 7 or more.", "output": "class BigGameHunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Big Game Hunter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(AttackGreaterThan(6), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2)\u00a7", "input_tokens": ["Big", "Game", "Hunter", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "a", "minion", "with", "an", "Attack", "of", "7", "or", "more."], "output_tokens": ["class", "Big", "Game", "Hunter", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Big", "Game", "Hunter", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Attack", "Greater", "Than", "(", "6", ")", ",", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ")"], "examples": ["class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "output": "class Bite(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bite\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(4)\u00a7        player.hero.increase_armor(4)\u00a7", "input_tokens": ["Bite", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Give", "your", "hero", "+4", "Attack", "this", "turn", "and", "4", "Armor."], "output_tokens": ["class", "Bite", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bite", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "4", ")", "player", ".", "hero", ".", "increase_armor", "(", "4", ")"], "examples": ["class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )"]}
{"input": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "output": "class BlessingOfWisdom(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Wisdom\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player is game.players[0]:\u00a7            draw_player = PlayerOne()\u00a7        else:\u00a7            draw_player = PlayerTwo()\u00a7        self.target.add_effect(Effect(Attack(), ActionTag(Draw(), PlayerSelector(draw_player))))\u00a7", "input_tokens": ["Blessing", "of", "Wisdom", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Choose", "a", "minion.", "Whenever", "it", "attacks,", "draw", "a", "card."], "output_tokens": ["class", "Blessing", "Of", "Wisdom", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blessing", "of", "Wisdom", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", "is", "game", ".", "players", "[", "0", "]", ":", "draw_player", "=", "Player", "One", "(", ")", "else", ":", "draw_player", "=", "Player", "Two", "(", ")", "self", ".", "target", ".", "add_effect", "(", "Effect", "(", "Attack", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", "draw_player", ")", ")", ")", ")"], "examples": ["class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Corruption ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Corruption ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Started ( player = Enemy Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "class Blessing Of Might ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Might ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b>Freeze</b> them.", "output": "class Blizzard(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blizzard\", 6, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7        for minion in game.other_player.minions:\u00a7            minion.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Blizzard", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2", "damage", "to", "all", "enemy", "minions", "and", "<b>", "Freeze", "</b>", "them."], "output_tokens": ["class", "Blizzard", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blizzard", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "for", "minion", "in", "game", ".", "other_player", ".", "minions", ":", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )"]}
{"input": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class BloodFury(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Fury\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 8)\u00a7", "input_tokens": ["Blood", "Fury", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "3", "COST_END", "8", "DUR_END", "Weapon", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Blood", "Fury", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blood", "Fury", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "8", ")"], "examples": ["class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Heavy Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heavy Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 )", "class Ashbringer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ashbringer ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) def create_weapon ( self , player ) : weapon = Weapon ( 5 , 3 ) return weapon", "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )"]}
{"input": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Stealth</b>. At the end of your turn, give another random friendly minion +1 Health.", "output": "class BloodImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 1, stealth=True, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\u00a7", "input_tokens": ["Blood", "Imp", "NAME_END", "0", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>", ".", "At", "the", "end", "of", "your", "turn,", "give", "another", "random", "friendly", "minion", "+1", "Health."], "output_tokens": ["class", "Blood", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blood", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "1", ",", "stealth", "=", "True", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Health", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> All minions lose <b>Divine Shield</b>. Gain +3/+3 for each Shield lost.", "output": "class BloodKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Knight\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=(Battlecry([Give([Buff(ChangeAttack(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3)), Buff(ChangeHealth(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3))])], SelfSelector()), Battlecry(RemoveDivineShields(), (MinionSelector(HasDivineShield(), BothPlayer())))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Blood", "Knight", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "All", "minions", "lose", "<b>", "Divine", "Shield", "</b>", ".", "Gain", "+3/+3", "for", "each", "Shield", "lost."], "output_tokens": ["class", "Blood", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blood", "Knight", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "(", "Battlecry", "(", "[", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "Count", "(", "Minion", "Selector", "(", "Has", "Divine", "Shield", "(", ")", ",", "Both", "Player", "(", ")", ")", ")", ",", "3", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "Count", "(", "Minion", "Selector", "(", "Has", "Divine", "Shield", "(", ")", ",", "Both", "Player", "(", ")", ")", ")", ",", "3", ")", ")", "]", ")", "]", ",", "Self", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Remove", "Divine", "Shields", "(", ")", ",", "(", "Minion", "Selector", "(", "Has", "Divine", "Shield", "(", ")", ",", "Both", "Player", "(", ")", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Lil Exorcist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lil ` Exorcist ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Spell Damage +1</b>. <b>Deathrattle:</b> Draw a card.", "output": "class BloodmageThalnos(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodmage Thalnos\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, spell_damage=1, deathrattle=Deathrattle(Draw(), PlayerSelector()))\u00a7", "input_tokens": ["Bloodmage", "Thalnos", "NAME_END", "1", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Spell", "Damage", "+1", "</b>", ".", "<b>", "Deathrattle", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Bloodmage", "Thalnos", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bloodmage", "Thalnos", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "spell_damage", "=", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b>Battlecry:</b> Remove 1 Durability from your opponent's weapon.", "output": "class BloodsailCorsair(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodsail Corsair\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(DecreaseDurability(), WeaponSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7", "input_tokens": ["Bloodsail", "Corsair", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Remove", "1", "Durability", "from", "your", "opponent's", "weapon."], "output_tokens": ["class", "Bloodsail", "Corsair", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bloodsail", "Corsair", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ",", "battlecry", "=", "Battlecry", "(", "Decrease", "Durability", "(", ")", ",", "Weapon", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ")"], "examples": ["class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )"]}
{"input": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b>Battlecry:</b> Gain Attack equal to the Attack of your weapon.", "output": "class BloodsailRaider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodsail Raider\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give(Buff(ChangeAttack(Attribute(\"base_attack\", WeaponSelector())))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Bloodsail", "Raider", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "Attack", "equal", "to", "the", "Attack", "of", "your", "weapon."], "output_tokens": ["class", "Bloodsail", "Raider", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bloodsail", "Raider", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Attack", "(", "Attribute", "(", "`", "base_attack", "`", ",", "Weapon", "Selector", "(", ")", ")", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a 4/5 Baine Bloodhoof.", "output": "class CairneBloodhoof(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cairne Bloodhoof\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, deathrattle=Deathrattle(Summon(BaineBloodhoof()), PlayerSelector()))\u00a7", "input_tokens": ["Cairne", "Bloodhoof", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "4/5", "Baine", "Bloodhoof."], "output_tokens": ["class", "Cairne", "Bloodhoof", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cairne", "Bloodhoof", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Baine", "Bloodhoof", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Savannah Highmane ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savannah Highmane ` , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b>Battlecry:</b> Give your weapon +1/+1.", "output": "class CaptainGreenskin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Captain Greenskin\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()], WeaponSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Captain", "Greenskin", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "your", "weapon", "+1/+1."], "output_tokens": ["class", "Captain", "Greenskin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Captain", "Greenskin", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ",", "battlecry", "=", "Battlecry", "(", "[", "Increase", "Weapon", "Attack", "(", "1", ")", ",", "Increase", "Durability", "(", ")", "]", ",", "Weapon", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Choose One</b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b>Taunt</b>.", "output": "class Cenarius(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cenarius\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, choices=[\u00a7            Choice(IncreaseStats(), Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)), Buff(Taunt())]), MinionSelector()),\u00a7            Choice(SummonTreants(), Summon(TauntTreant(), 2), PlayerSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 8)\u00a7", "input_tokens": ["Cenarius", "NAME_END", "5", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Give", "your", "other", "minions", "+2/+2;", "or", "Summon", "two", "2/2", "Treants", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Cenarius", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cenarius", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "choices", "=", "[", "Choice", "(", "Increase", "Stats", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Taunt", "(", ")", ")", "]", ")", ",", "Minion", "Selector", "(", ")", ")", ",", "Choice", "(", "Summon", "Treants", "(", ")", ",", "Summon", "(", "Taunt", "Treant", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "8", ")"], "examples": ["class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )", "class Mind Control Tech ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control Tech ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , condition = None , picker = Random Picker ( ) ) , Opponent Minion Count Is Greater Than ( 3 ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "output": "class CircleOfHealing(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Circle of Healing\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.heal(player.effective_heal_power(4), self)\u00a7", "input_tokens": ["Circle", "of", "Healing", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Restore", "#4", "Health", "to", "ALL", "minions."], "output_tokens": ["class", "Circle", "Of", "Healing", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Circle", "of", "Healing", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "minion", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "4", ")", ",", "self", ")"], "examples": ["class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "class Ancestral Healing ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Healing ` , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) self . target . taunt = True", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Mirror Image ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Image ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"]}
{"input": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b>Combo:</b> +4 Attack instead.", "output": "class ColdBlood(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cold Blood\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.cards_played > 0:\u00a7            self.target.change_attack(4)\u00a7        else:\u00a7            self.target.change_attack(2)\u00a7", "input_tokens": ["Cold", "Blood", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "a", "minion", "+2", "Attack.", "<b>", "Combo", ":", "</b>", "+4", "Attack", "instead."], "output_tokens": ["class", "Cold", "Blood", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cold", "Blood", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "cards_played", ">", "0", ":", "self", ".", "target", ".", "change_attack", "(", "4", ")", "else", ":", "self", ".", "target", ".", "change_attack", "(", "2", ")"], "examples": ["class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Tinkers Sharpsword Oil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinker ` s Sharpsword Oil ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 3 player . hero . change_temp_attack ( 3 ) if player . cards_played > 0 : targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) if targets is not None : target = player . game . random_choice ( targets ) target . add_buff ( Buff ( Change Attack ( 3 ) ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None"]}
{"input": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b>Battlecry:</b> Each player draws 2 cards.", "output": "class ColdlightOracle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coldlight Oracle\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Draw(2), PlayerSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Coldlight", "Oracle", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Each", "player", "draws", "2", "cards."], "output_tokens": ["class", "Coldlight", "Oracle", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Coldlight", "Oracle", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ",", "battlecry", "=", "Battlecry", "(", "Draw", "(", "2", ")", ",", "Player", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b>Battlecry:</b> Give ALL other Murlocs +2 Health.", "output": "class ColdlightSeer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coldlight Seer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Coldlight", "Seer", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "ALL", "other", "Murlocs", "+2", "Health."], "output_tokens": ["class", "Coldlight", "Seer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Coldlight", "Seer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Change", "Health", "(", "2", ")", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "output": "class CommandingShout(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Commanding Shout\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.add_aura(AuraUntil(MinimumHealth(1), MinionSelector(), TurnEnded()))\u00a7\u00a7        player.draw()\u00a7", "input_tokens": ["Commanding", "Shout", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Your", "minions", "can't", "be", "reduced", "below", "1", "Health", "this", "turn.", "Draw", "a", "card."], "output_tokens": ["class", "Commanding", "Shout", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Commanding", "Shout", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "add_aura", "(", "Aura", "Until", "(", "Minimum", "Health", "(", "1", ")", ",", "Minion", "Selector", "(", ")", ",", "Turn", "Ended", "(", ")", ")", ")", "player", ".", "draw", "(", ")"], "examples": ["class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )"]}
{"input": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When your opponent casts a spell, <b>Counter</b> it.", "output": "class Counterspell(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Counterspell\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell():\u00a7            card.cancel = True\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7", "input_tokens": ["Counterspell", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "opponent", "casts", "a", "spell,", "<b>", "Counter", "</b>", "it."], "output_tokens": ["class", "Counterspell", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Counterspell", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "def", "_reveal", "(", "self", ",", "card", ",", "index", ")", ":", "if", "card", ".", "is_spell", "(", ")", ":", "card", ".", "cancel", "=", "True", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Ice Barrier ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Barrier ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : if target is self . player . hero and not attacker . removed : attacker . player . game . other_player . hero . armor + = 8 super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Ice Block ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Block ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : if character . health - amount < = 0 : character . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` pre_damage ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` pre_damage ` , self . _reveal )"]}
{"input": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Swap the Attack and Health of a minion.", "output": "class CrazedAlchemist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crazed Alchemist\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(SwapStats('health', 'attack', False), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Crazed", "Alchemist", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Swap", "the", "Attack", "and", "Health", "of", "a", "minion."], "output_tokens": ["class", "Crazed", "Alchemist", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Crazed", "Alchemist", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Swap", "Stats", "(", "`", "health", "`", ",", "`", "attack", "`", ",", "False", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Aldor Peacekeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Aldor Peacekeeper ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage to a minion and give it +2 Attack.", "output": "class CruelTaskmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cruel Taskmaster\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(ChangeAttack(2))], MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Cruel", "Taskmaster", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "1", "damage", "to", "a", "minion", "and", "give", "it", "+2", "Attack."], "output_tokens": ["class", "Cruel", "Taskmaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cruel", "Taskmaster", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "[", "Damage", "(", "1", ")", ",", "Give", "(", "Change", "Attack", "(", "2", ")", ")", "]", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Inner Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Rage ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 1 , self ) self . target . change_attack ( 2 )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "output": "class CultMaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cult Master\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, effects=[Effect(MinionDied(), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Cult", "Master", "NAME_END", "4", "ATK_END", "2", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "one", "of", "your", "other", "minions", "dies,", "draw", "a", "card."], "output_tokens": ["class", "Cult", "Master", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cult", "Master", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Acolyte Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acolyte of Pain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Northshire Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Northshire Cleric ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "output": "class DamagedGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Damaged Golem\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Damaged", "Golem", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Damaged", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Damaged", "Golem", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Mechanical Dragonling ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechanical Dragonling ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
{"input": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion +2 Attack this turn.", "output": "class DarkIronDwarf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Iron Dwarf\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Dark", "Iron", "Dwarf", "NAME_END", "4", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "minion", "+2", "Attack", "this", "turn."], "output_tokens": ["class", "Dark", "Iron", "Dwarf", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dark", "Iron", "Dwarf", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "2", ")", ",", "Turn", "Ended", "(", "player", "=", "Current", "Player", "(", ")", ")", ")", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "output": "class DeadlyShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deadly Shot\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.die(None)\u00a7        game.check_delayed()\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7", "input_tokens": ["Deadly", "Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "a", "random", "enemy", "minion."], "output_tokens": ["class", "Deadly", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deadly", "Shot", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_battlecry_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "True", ")", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "target", ".", "die", "(", "None", ")", "game", ".", "check_delayed", "(", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "1"], "examples": ["class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Reincarnate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reincarnate ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) game . check_delayed ( ) self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )"]}
{"input": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy all other minions and discard your hand.", "output": "class Deathwing(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deathwing\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Kill(), MinionSelector(players=BothPlayer())), Battlecry(Discard(amount=Count(CardSelector())), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(12, 12)\u00a7", "input_tokens": ["Deathwing", "NAME_END", "12", "ATK_END", "12", "DEF_END", "10", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "all", "other", "minions", "and", "discard", "your", "hand."], "output_tokens": ["class", "Deathwing", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deathwing", "`", ",", "10", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "Battlecry", "(", "Discard", "(", "amount", "=", "Count", "(", "Card", "Selector", "(", ")", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "12", ",", "12", ")"], "examples": ["class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Void Terror ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Void Terror ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Health ( Attribute ( ` health ` , Minion Selector ( Adjacent ( ) ) ) ) ) , Buff ( Change Attack ( Attribute ( ` attack ` , Minion Selector ( Adjacent ( ) ) ) ) ) ] ) , Self Selector ( ) ) , Battlecry ( Kill ( ) , Minion Selector ( Adjacent ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Rend Blackhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rend Blackhand ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( And ( Minion Is Not Target ( ) , Is Rarity ( CARD_RARITY . LEGENDARY ) ) , Both Player ( ) , User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 4 )", "class Dark Iron Skulker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Iron Skulker ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class DefiasBandit(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defias Bandit\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Defias", "Bandit", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Defias", "Bandit", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defias", "Bandit", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )"]}
{"input": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Combo:</b> Summon a 2/1 Defias Bandit.", "output": "class DefiasRingleader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defias Ringleader\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, combo=Battlecry(Summon(DefiasBandit()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Defias", "Ringleader", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Combo", ":", "</b>", "Summon", "a", "2/1", "Defias", "Bandit."], "output_tokens": ["class", "Defias", "Ringleader", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defias", "Ringleader", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "combo", "=", "Battlecry", "(", "Summon", "(", "Defias", "Bandit", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Loot Hoarder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loot Hoarder ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "output": "class Demolisher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demolisher\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Damage(2), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))])\u00a7", "input_tokens": ["Demolisher", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "deal", "2", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Demolisher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Demolisher", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Shadowboxer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowboxer ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )", "class Boom Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boom Bot ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )"]}
{"input": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "output": "class Demonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonfire\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(2)\u00a7            self.target.increase_health(2)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Demonfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "a", "minion.", "If", "it\u2019s", "a", "friendly", "Demon,", "give", "it", "+2/+2", "instead."], "output_tokens": ["class", "Demonfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Demonfire", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "player", ".", "game", ".", "current_player", ".", "minions", ")", "if", "self", ".", "target", ".", "card", ".", "minion_type", "is", "MINION_TYPE", ".", "DEMON", "and", "self", ".", "target", "in", "targets", ":", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Bane Of Doom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bane of Doom ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health < = player . effective_spell_damage ( 2 ) and \\ ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "output": "class Demonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonfire\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(2)\u00a7            self.target.increase_health(2)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Demonfire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Enchantment", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "This", "Demon", "has", "+2/+2."], "output_tokens": ["class", "Demonfire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Demonfire", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "player", ".", "game", ".", "current_player", ".", "minions", ")", "if", "self", ".", "target", ".", "card", ".", "minion_type", "is", "MINION_TYPE", ".", "DEMON", "and", "self", ".", "target", "in", "targets", ":", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Voidwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidwalker ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , taunt = True )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Worthless Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worthless Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , MINION_TYPE . DEMON ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )"]}
{"input": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Devilsaur(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Devilsaur\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Devilsaur", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Devilsaur", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Devilsaur", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "output": "class DireWolfAlpha(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dire Wolf Alpha\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(Adjacent()))])\u00a7", "input_tokens": ["Dire", "Wolf", "Alpha", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "Adjacent", "minions", "have", "+1", "Attack."], "output_tokens": ["class", "Dire", "Wolf", "Alpha", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dire", "Wolf", "Alpha", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", "]", ")"], "examples": ["class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Flametongue Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flametongue Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Raid Leader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raid Leader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "output": "class DivineFavor(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Divine Favor\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        difference = len(game.other_player.hand) - len(player.hand)\u00a7        for i in range(0, difference):\u00a7            player.draw()\u00a7", "input_tokens": ["Divine", "Favor", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Draw", "cards", "until", "you", "have", "as", "many", "in", "hand", "as", "your", "opponent."], "output_tokens": ["class", "Divine", "Favor", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Divine", "Favor", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "difference", "=", "len", "(", "game", ".", "other_player", ".", "hand", ")", "-", "len", "(", "player", ".", "hand", ")", "for", "i", "in", "range", "(", "0", ",", "difference", ")", ":", "player", ".", "draw", "(", ")"], "examples": ["class Excess Mana ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Excess Mana ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . draw ( )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )", "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Tracking ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tracking ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) cards = [ ] for card_index in range ( 0 , 3 ) : if player . can_draw ( ) : cards . append ( player . deck . draw ( game ) ) if len ( cards ) > 0 : chosen_card = player . agent . choose_option ( cards , player ) player . hand . append ( chosen_card ) player . hand [ - 1 ] . player = player player . trigger ( ` card_drawn ` , chosen_card )"]}
{"input": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "output": "class Doomsayer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomsayer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 7, effects=[Effect(TurnStarted(), ActionTag(Kill(), MinionSelector(condition=None, players=BothPlayer())))])\u00a7", "input_tokens": ["Doomsayer", "NAME_END", "0", "ATK_END", "7", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "destroy", "ALL", "minions."], "output_tokens": ["class", "Doomsayer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Doomsayer", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "condition", "=", "None", ",", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )", "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Cult Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cult Master ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )"]}
{"input": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b>Taunt.</b> Costs (1) less per Attack of your weapon.", "output": "class DreadCorsair(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dread Corsair\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, buffs=[Buff(ManaChange(Attribute(\"attack\", WeaponSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, taunt=True)\u00a7", "input_tokens": ["Dread", "Corsair", "NAME_END", "3", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt.", "</b>", "Costs", "(1)", "less", "per", "Attack", "of", "your", "weapon."], "output_tokens": ["class", "Dread", "Corsair", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dread", "Corsair", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Attribute", "(", "`", "attack", "`", ",", "Weapon", "Selector", "(", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "taunt", "=", "True", ")"], "examples": ["class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "output": "class Dream(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dream\", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.bounce()\u00a7", "input_tokens": ["Dream", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Dream", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Return", "a", "minion", "to", "its", "owner's", "hand."], "output_tokens": ["class", "Dream", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dream", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DREAM", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "bounce", "(", ")"], "examples": ["class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "output": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Druid", "of", "the", "Claw", "NAME_END", "4", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Druid", "Of", "The", "Claw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Claw", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Cat", "Form", "(", ")", ",", "Transform", "(", "Cat", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Bear", "Form", "(", ")", ",", "Transform", "(", "Bear", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )"]}
{"input": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One -</b> <b>Charge</b>; or +2 Health and <b>Taunt</b>.", "output": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Druid", "of", "the", "Claw", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "-", "</b>", "<b>", "Charge", "</b>", ";", "or", "+2", "Health", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Druid", "Of", "The", "Claw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Claw", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Cat", "Form", "(", ")", ",", "Transform", "(", "Cat", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Bear", "Form", "(", ")", ",", "Transform", "(", "Bear", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Ancient Of Lore ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of Lore ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Grove Tender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grove Tender ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Charge</b>", "output": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Druid", "of", "the", "Claw", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Druid", "Of", "The", "Claw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Claw", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Cat", "Form", "(", ")", ",", "Transform", "(", "Cat", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Bear", "Form", "(", ")", ",", "Transform", "(", "Bear", "Druid", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>. <b>Overload:</b> (2)", "output": "class DustDevil(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dust Devil\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, windfury=True)\u00a7", "input_tokens": ["Dust", "Devil", "NAME_END", "3", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>", ".", "<b>", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Dust", "Devil", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dust", "Devil", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "overload", "=", "2", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "1", ",", "windfury", "=", "True", ")"], "examples": ["class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )"]}
{"input": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b>Secret</b> is revealed, gain +1 Durability.", "output": "class EaglehornBow(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eaglehorn Bow\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2, effects=[Effect(SecretRevealed(), ActionTag(IncreaseDurability(), WeaponSelector()))])\u00a7", "input_tokens": ["Eaglehorn", "Bow", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "3", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "friendly", "<b>", "Secret", "</b>", "is", "revealed,", "gain", "+1", "Durability."], "output_tokens": ["class", "Eaglehorn", "Bow", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Eaglehorn", "Bow", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Secret", "Revealed", "(", ")", ",", "Action", "Tag", "(", "Increase", "Durability", "(", ")", ",", "Weapon", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gladiators Longbow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gladiator ` s Longbow ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )", "class Secretkeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Secretkeeper ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 3 Health.", "output": "class EarthenRingFarseer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earthen Ring Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Earthen", "Ring", "Farseer", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "3", "Health."], "output_tokens": ["class", "Earthen", "Ring", "Farseer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Earthen", "Ring", "Farseer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "3", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Combo:</b> Gain +2/+2 for each card played earlier this turn.", "output": "class EdwinVanCleef(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Edwin VanCleef\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(Attribute(\"cards_played\", PlayerSelector()), 2)), Buff(ChangeHealth(Attribute(\"cards_played\", PlayerSelector()), 2))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Edwin", "VanCleef", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Combo", ":", "</b>", "Gain", "+2/+2", "for", "each", "card", "played", "earlier", "this", "turn."], "output_tokens": ["class", "Edwin", "Van", "Cleef", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Edwin", "Van", "Cleef", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "Attribute", "(", "`", "cards_played", "`", ",", "Player", "Selector", "(", ")", ")", ",", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "Attribute", "(", "`", "cards_played", "`", ",", "Player", "Selector", "(", ")", ")", ",", "2", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )", "class Defias Ringleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defias Ringleader ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , combo = Battlecry ( Summon ( Defias Bandit ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )"]}
{"input": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "output": "class EmeraldDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emerald Drake\", 4, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6)\u00a7", "input_tokens": ["Emerald", "Drake", "NAME_END", "7", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Dream", "PLAYER_CLS_END", "Dragon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Emerald", "Drake", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Emerald", "Drake", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DREAM", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "6", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "output": "class EmperorCobra(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emperor Cobra\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7", "input_tokens": ["Emperor", "Cobra", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "Destroy", "any", "minion", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Emperor", "Cobra", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Emperor", "Cobra", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", "Is", "Minion", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Snowchugger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snowchugger ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )", "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "output": "class Equality(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Equality\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.set_health_to(1)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and (len(player.minions) > 0 or len(game.other_player.minions) > 0)\u00a7", "input_tokens": ["Equality", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Change", "the", "Health", "of", "ALL", "minions", "to", "1."], "output_tokens": ["class", "Equality", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Equality", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "minion", ".", "set_health_to", "(", "1", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "(", "len", "(", "player", ".", "minions", ")", ">", "0", "or", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "0", ")"], "examples": ["class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Hunters Mark ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hunter ` s Mark ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . set_health_to ( 1 )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Reversing Switch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reversing Switch ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) temp_attack = self . target . calculate_attack ( ) temp_health = self . target . health if temp_attack = = 0 : self . target . die ( None ) else : self . target . set_attack_to ( temp_health ) self . target . set_health_to ( temp_attack )"]}
{"input": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b>Secret</b> at the end of your turn, gain +2/+2.", "output": "class EtherealArcanist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ethereal Arcanist\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\u00a7", "input_tokens": ["Ethereal", "Arcanist", "NAME_END", "3", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "If", "you", "control", "a", "<b>", "Secret", "</b>", "at", "the", "end", "of", "your", "turn,", "gain", "+2/+2."], "output_tokens": ["class", "Ethereal", "Arcanist", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ethereal", "Arcanist", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "Has", "Secret", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Turn", "Ended", "(", "Has", "Secret", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Health", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Illuminator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Illuminator ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Core Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Core Rager ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Secretkeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Secretkeeper ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b>Combo:</b> Deal $4 damage instead.", "output": "class Eviscerate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eviscerate\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.cards_played > 0:\u00a7            self.target.damage(player.effective_spell_damage(4), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Eviscerate", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage.", "<b>", "Combo", ":", "</b>", "Deal", "$4", "damage", "instead."], "output_tokens": ["class", "Eviscerate", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Eviscerate", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "cards_played", ">", "0", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Swipe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Swipe ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 4 , self ) for minion in copy . copy ( game . other_player . minions ) : if minion is not self . target : minion . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target is not game . other_player . hero : game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "output": "class ExplosiveShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Shot\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        index = self.target.index\u00a7        if self.target.index < len(self.target.player.minions) - 1:\u00a7            minion = self.target.player.minions[index + 1]\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7\u00a7        if self.target.index > 0:\u00a7            minion = self.target.player.minions[index - 1]\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Explosive", "Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$5", "damage", "to", "a", "minion", "and", "$2", "damage", "to", "adjacent", "ones."], "output_tokens": ["class", "Explosive", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Explosive", "Shot", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "index", "=", "self", ".", "target", ".", "index", "if", "self", ".", "target", ".", "index", "<", "len", "(", "self", ".", "target", ".", "player", ".", "minions", ")", "-", "1", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "+", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")", "if", "self", ".", "target", ".", "index", ">", "0", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "-", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Implosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp - losion ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) had_shield = self . target . divine_shield self . target . damage ( amount , self ) if not had_shield : for i in range ( 0 , amount ) : imp = Imp ( ) imp . summon ( player , game , len ( player . minions ) )", "class Backstab ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Backstab ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health = = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Choose a minion and become a copy of it.", "output": "class FacelessManipulator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Faceless Manipulator\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Faceless", "Manipulator", "NAME_END", "3", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Choose", "a", "minion", "and", "become", "a", "copy", "of", "it."], "output_tokens": ["class", "Faceless", "Manipulator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Faceless", "Manipulator", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Replace", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Recombobulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recombobulator ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( ` mana ` , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )"]}
{"input": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "output": "class FaerieDragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Faerie Dragon\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, spell_targetable=False)\u00a7", "input_tokens": ["Faerie", "Dragon", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "Can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Faerie", "Dragon", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Faerie", "Dragon", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "spell_targetable", "=", "False", ")"], "examples": ["class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )", "class Arcane Nullifier X21 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Nullifier X - 21 ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 5 , taunt = True , spell_targetable = False )", "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "class Wee Spellstopper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wee Spellstopper ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )"]}
{"input": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "output": "class FarSight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Far Sight\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        def reduce_cost(card):\u00a7            card.add_buff(Buff(ManaChange(-3)))\u00a7\u00a7        super().use(player, game)\u00a7        player.bind_once(\"card_drawn\", reduce_cost)\u00a7        player.draw()\u00a7", "input_tokens": ["Far", "Sight", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Draw", "a", "card.", "That", "card", "costs", "(3)", "less."], "output_tokens": ["class", "Far", "Sight", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Far", "Sight", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "def", "reduce_cost", "(", "card", ")", ":", "card", ".", "add_buff", "(", "Buff", "(", "Mana", "Change", "(", "-", "3", ")", ")", ")", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "bind_once", "(", "`", "card_drawn", "`", ",", "reduce_cost", ")", "player", ".", "draw", "(", ")"], "examples": ["class Shield Block ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Block ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . increase_armor ( 5 ) player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )", "class Sprint ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sprint ` , 7 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 4 ) : player . draw ( )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Taunt</b>. <b>Battlecry:</b> Destroy one of your Mana Crystals.", "output": "class Felguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Felguard\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(DestroyManaCrystal(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7", "input_tokens": ["Felguard", "NAME_END", "3", "ATK_END", "5", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Destroy", "one", "of", "your", "Mana", "Crystals."], "output_tokens": ["class", "Felguard", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Felguard", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Destroy", "Mana", "Crystal", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "taunt", "=", "True", ")"], "examples": ["class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Lord Jaraxxus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord Jaraxxus ` , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace Hero With Minion ( Jaraxxus ( ) ) , Hero Selector ( ) ) , Battlecry ( Remove ( ) , Self Selector ( ) ) , Battlecry ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 15 )", "class Fireguard Destroyer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireguard Destroyer ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Random Amount ( 1 , 4 ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 6 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class FenCreeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fen Creeper\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, taunt=True)\u00a7", "input_tokens": ["Fen", "Creeper", "NAME_END", "3", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Fen", "Creeper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fen", "Creeper", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "6", ",", "taunt", "=", "True", ")"], "examples": ["class Lord Of The Arena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord of the Arena ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 5 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )"]}
{"input": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b>Taunt</b>. <b>Overload:</b> (2)", "output": "class FeralSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feral Spirit\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 2):\u00a7            spirit_wolf = hearthbreaker.cards.minions.shaman.SpiritWolf()\u00a7            spirit_wolf.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Feral", "Spirit", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Summon", "two", "2/3", "Spirit", "Wolves", "with", "<b>", "Taunt", "</b>", ".", "<b>", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Feral", "Spirit", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Feral", "Spirit", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "overload", "=", "2", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "spirit_wolf", "=", "hearthbreaker", ".", "cards", ".", "minions", ".", "shaman", ".", "Spirit", "Wolf", "(", ")", "spirit_wolf", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Spirit Wolf ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spirit Wolf ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 2 , 3 , taunt = True )", "class Ancestral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestral Spirit ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )", "class Fireguard Destroyer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireguard Destroyer ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Random Amount ( 1 , 4 ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 6 )", "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )"]}
{"input": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "output": "class FinkleEinhorn(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Finkle Einhorn\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Finkle", "Einhorn", "NAME_END", "3", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Finkle", "Einhorn", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Finkle", "Einhorn", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Nerubian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nerubian ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) def create_minion ( self , p ) : return Minion ( 4 , 4 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Thaddius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thaddius ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 11 , 11 )"]}
{"input": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage to your hero.", "output": "class FlameImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(3), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Flame", "Imp", "NAME_END", "3", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage", "to", "your", "hero."], "output_tokens": ["class", "Flame", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flame", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "output": "class FlesheatingGhoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flesheating Ghoul\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionDied(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Flesheating", "Ghoul", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "a", "minion", "dies,", "gain", "+1", "Attack."], "output_tokens": ["class", "Flesheating", "Ghoul", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flesheating", "Ghoul", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Undertaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Undertaker ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Leokk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leokk ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b>Charge</b> that die at the end of the turn.", "output": "class ForceOfNature(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Force of Nature\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import ChargeTreant\u00a7        for i in [0, 1, 2]:\u00a7            treant_card = ChargeTreant()\u00a7            treant_card.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Force", "of", "Nature", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Summon", "three", "2/2", "Treants", "with", "<b>", "Charge", "</b>", "that", "die", "at", "the", "end", "of", "the", "turn."], "output_tokens": ["class", "Force", "Of", "Nature", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Force", "of", "Nature", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "druid", "import", "Charge", "Treant", "for", "i", "in", "[", "0", ",", "1", ",", "2", "]", ":", "treant_card", "=", "Charge", "Treant", "(", ")", "treant_card", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Bestial Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bestial Wrath ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) self . target . change_temp_attack ( 2 )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Savage Roar ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savage Roar ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 2 ) player . hero . change_temp_attack ( 2 )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )", "class Far Sight ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Far Sight ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def use ( self , player , game ) : def reduce_cost ( card ) : card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )"]}
{"input": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b>Overload:</b> (2)", "output": "class ForkedLightning(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Forked Lightning\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(game.other_player.minions)\u00a7        for i in range(0, 2):\u00a7            minion = game.random_choice(minions)\u00a7            minions.remove(minion)\u00a7            minion.damage(player.effective_spell_damage(3), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7", "input_tokens": ["Forked", "Lightning", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "2", "random", "enemy", "minions.", "<b>", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Forked", "Lightning", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Forked", "Lightning", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "overload", "=", "2", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minions", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "minion", "=", "game", ".", "random_choice", "(", "minions", ")", "minions", ".", "remove", "(", "minion", ")", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "2"], "examples": ["class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "class Cleave ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cleave ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 2 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Flamecannon ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamecannon ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . damage ( player . effective_spell_damage ( 4 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "output": "class FreezingTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Freezing Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(attacker, Minion) and not attacker.removed:\u00a7            attacker.bounce()\u00a7            attacker.card.add_buff(Buff(ManaChange(2)))\u00a7            super().reveal()\u00a7", "input_tokens": ["Freezing", "Trap", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "an", "enemy", "minion", "attacks,", "return", "it", "to", "its", "owner's", "hand", "and", "it", "costs", "(2)", "more."], "output_tokens": ["class", "Freezing", "Trap", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Freezing", "Trap", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "isinstance", "(", "attacker", ",", "Minion", ")", "and", "not", "attacker", ".", "removed", ":", "attacker", ".", "bounce", "(", ")", "attacker", ".", "card", ".", "add_buff", "(", "Buff", "(", "Mana", "Change", "(", "2", ")", ")", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None"]}
{"input": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> <b>Freeze</b> a character.", "output": "class FrostElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Elemental\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Frost", "Elemental", "NAME_END", "5", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "<b>", "Freeze", "</b>", "a", "character."], "output_tokens": ["class", "Frost", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frost", "Elemental", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Frozen", "(", ")", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Mad Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mad Bomber ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )"]}
{"input": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "output": "class FrothingBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frothing Berserker\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CharacterDamaged(player=BothPlayer(), condition=IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Frothing", "Berserker", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "minion", "takes", "damage,", "gain", "+1", "Attack."], "output_tokens": ["class", "Frothing", "Berserker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Frothing", "Berserker", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "player", "=", "Both", "Player", "(", ")", ",", "condition", "=", "Is", "Minion", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Flesheating Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flesheating Ghoul ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Axe Flinger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Axe Flinger ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "output": "class GadgetzanAuctioneer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gadgetzan Auctioneer\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(SpellCast(), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Gadgetzan", "Auctioneer", "NAME_END", "4", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "draw", "a", "card."], "output_tokens": ["class", "Gadgetzan", "Auctioneer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gadgetzan", "Auctioneer", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )"]}
{"input": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b>Immune</b> while attacking.", "output": "class GladiatorsLongbow(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gladiator's Longbow\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Give(BuffUntil(Immune(), AttackCompleted())), HeroSelector()))])\u00a7", "input_tokens": ["Gladiator's", "Longbow", "NAME_END", "5", "ATK_END", "-1", "DEF_END", "7", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Your", "hero", "is", "<b>", "Immune", "</b>", "while", "attacking."], "output_tokens": ["class", "Gladiators", "Longbow", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gladiator", "`", "s", "Longbow", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "5", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "Is", "Hero", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "Until", "(", "Immune", "(", ")", ",", "Attack", "Completed", "(", ")", ")", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Ogre Warmaul ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Warmaul ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )", "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Truesilver Champion ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Truesilver Champion ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Charge</b> NL <b>Enrage:</b> +6 Attack", "output": "class GrommashHellscream(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grommash Hellscream\", 8, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 9, charge=True, enrage=[Aura(ChangeAttack(6), SelfSelector())])\u00a7", "input_tokens": ["Grommash", "Hellscream", "NAME_END", "4", "ATK_END", "9", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Charge", "</b>", "NL", "<b>", "Enrage", ":", "</b>", "+6", "Attack"], "output_tokens": ["class", "Grommash", "Hellscream", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Grommash", "Hellscream", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "9", ",", "charge", "=", "True", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "6", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class V07TR0N ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` V - 07 - TR - 0N ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False , MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 8 , charge = True , buffs = [ Buff ( Mega Windfury ( ) ) ] )"]}
{"input": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "output": "class Gruul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gruul\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7", "input_tokens": ["Gruul", "NAME_END", "7", "ATK_END", "7", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "each", "turn,", "gain", "+1/+1", "."], "output_tokens": ["class", "Gruul", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gruul", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Micro Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Micro Machine ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Turn Started ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )"]}
{"input": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy your opponent's weapon and draw cards equal to its Durability.", "output": "class HarrisonJones(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Harrison Jones\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Draw(Attribute(\"durability\", WeaponSelector(EnemyPlayer()))), PlayerSelector()), Battlecry(Destroy(), WeaponSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Harrison", "Jones", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "your", "opponent's", "weapon", "and", "draw", "cards", "equal", "to", "its", "Durability."], "output_tokens": ["class", "Harrison", "Jones", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Harrison", "Jones", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "(", "Battlecry", "(", "Draw", "(", "Attribute", "(", "`", "durability", "`", ",", "Weapon", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", ",", "Player", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Destroy", "(", ")", ",", "Weapon", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Acidic Swamp Ooze ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidic Swamp Ooze ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Blingtron3000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blingtron 3000 ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )"]}
{"input": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Summon a 2/1 Damaged Golem.", "output": "class HarvestGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Harvest Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, deathrattle=Deathrattle(Summon(DamagedGolem()), PlayerSelector()))\u00a7", "input_tokens": ["Harvest", "Golem", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "2/1", "Damaged", "Golem."], "output_tokens": ["class", "Harvest", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Harvest", "Golem", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Damaged", "Golem", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Haunted Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Haunted Creeper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b>Combo:</b> Return this to your hand next turn.", "output": "class Headcrack(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Headcrack\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(2), self)\u00a7        if player.cards_played > 0:\u00a7            player.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self), PlayerSelector())))\u00a7", "input_tokens": ["Headcrack", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2", "damage", "to", "the", "enemy", "hero.", "<b>", "Combo", ":", "</b>", "Return", "this", "to", "your", "hand", "next", "turn."], "output_tokens": ["class", "Headcrack", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Headcrack", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "if", "player", ".", "cards_played", ">", "0", ":", "player", ".", "add_effect", "(", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "self", ")", ",", "Player", "Selector", "(", ")", ")", ")", ")"], "examples": ["class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class HeavyAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heavy Axe\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 3)\u00a7", "input_tokens": ["Heavy", "Axe", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Heavy", "Axe", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Heavy", "Axe", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "3", ")"], "examples": ["class Battle Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Axe ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )", "class Wicked Knife ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wicked Knife ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) def create_weapon ( self , player ) : return Weapon ( 1 , 2 )", "class Blood Fury ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Fury ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) def create_weapon ( self , player ) : return Weapon ( 3 , 8 )", "class Arcanite Reaper ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcanite Reaper ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 5 , 2 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b>Taunt</b>.", "output": "class Hogger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hogger\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(TurnEnded(), ActionTag(Summon(Gnoll()), PlayerSelector()))])\u00a7", "input_tokens": ["Hogger", "NAME_END", "4", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "summon", "a", "2/2", "Gnoll", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Hogger", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hogger", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Gnoll", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "output": "class HolyFire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Fire\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7        player.hero.heal(player.effective_heal_power(5), self)\u00a7", "input_tokens": ["Holy", "Fire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$5", "damage.", "Restore", "#5", "Health", "to", "your", "hero."], "output_tokens": ["class", "Holy", "Fire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Holy", "Fire", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")", "player", ".", "hero", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "5", ")", ",", "self", ")"], "examples": ["class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Sacrificial Pact ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sacrificial Pact ` , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type = = MINION_TYPE . DEMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b>Battlecry:</b> Destroy a Murloc and gain +2/+2.", "output": "class HungryCrab(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hungry Crab\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7", "input_tokens": ["Hungry", "Crab", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "a", "Murloc", "and", "gain", "+2/+2."], "output_tokens": ["class", "Hungry", "Crab", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hungry", "Crab", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "(", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "Both", "Player", "(", ")", ")", ")", ",", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ")"], "examples": ["class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Scavenging Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scavenging Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "output": "class Hyena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hyena\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Hyena", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "NIL"], "output_tokens": ["class", "Hyena", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hyena", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Bloodfen Raptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodfen Raptor ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "class River Crocolisk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` River Crocolisk ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, gain 8 Armor.", "output": "class IceBarrier(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Barrier\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if target is self.player.hero and not attacker.removed:\u00a7            attacker.player.game.other_player.hero.armor += 8\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7", "input_tokens": ["Ice", "Barrier", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "is", "attacked,", "gain", "8", "Armor."], "output_tokens": ["class", "Ice", "Barrier", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ice", "Barrier", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "target", "is", "self", ".", "player", ".", "hero", "and", "not", "attacker", ".", "removed", ":", "attacker", ".", "player", ".", "game", ".", "other_player", ".", "hero", ".", "armor", "+", "=", "8", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Ice Block ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Block ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : if character . health - amount < = 0 : character . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` pre_damage ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` pre_damage ` , self . _reveal )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )"]}
{"input": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When your hero takes fatal damage, prevent it and become <b>Immune</b> this turn.", "output": "class IceBlock(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Block\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, character, attacker, amount):\u00a7        if character.is_hero():\u00a7            if character.health - amount <= 0:\u00a7                character.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))\u00a7                super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"pre_damage\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"pre_damage\", self._reveal)\u00a7", "input_tokens": ["Ice", "Block", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "takes", "fatal", "damage,", "prevent", "it", "and", "become", "<b>", "Immune", "</b>", "this", "turn."], "output_tokens": ["class", "Ice", "Block", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ice", "Block", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "character", ",", "attacker", ",", "amount", ")", ":", "if", "character", ".", "is_hero", "(", ")", ":", "if", "character", ".", "health", "-", "amount", "<", "=", "0", ":", "character", ".", "add_buff", "(", "Buff", "Until", "(", "Immune", "(", ")", ",", "Turn", "Ended", "(", "player", "=", "Current", "Player", "(", ")", ")", ")", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "pre_damage", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "pre_damage", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Ice Barrier ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ice Barrier ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def _reveal ( self , attacker , target ) : if target is self . player . hero and not attacker . removed : attacker . player . game . other_player . hero . armor + = 8 super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> a character. If it was already <b>Frozen</b>, deal $4 damage instead.", "output": "class IceLance(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Lance\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.frozen:\u00a7            self.target.damage(4, self)\u00a7        else:\u00a7            self.target.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Ice", "Lance", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "a", "character.", "If", "it", "was", "already", "<b>", "Frozen", "</b>", ",", "deal", "$4", "damage", "instead."], "output_tokens": ["class", "Ice", "Lance", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ice", "Lance", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "frozen", ":", "self", ".", "target", ".", "damage", "(", "4", ",", "self", ")", "else", ":", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Frost Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Ysera Awakens ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera Awakens ` , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . other_player . minions ) targets . extend ( player . game . current_player . minions ) targets . append ( player . game . other_player . hero ) targets . append ( player . game . current_player . hero ) targets = filter ( lambda m : not m . is_minion ( ) or m . card . name ! = ` Ysera ` , targets ) for minion in targets : minion . damage ( player . effective_spell_damage ( 5 ) , self )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )"]}
{"input": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "output": "class IllidanStormrage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Illidan Stormrage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, effects=[Effect(CardPlayed(), ActionTag(Summon(FlameOfAzzinoth()), PlayerSelector()))])\u00a7", "input_tokens": ["Illidan", "Stormrage", "NAME_END", "7", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Demon", "RACE_END", "Legendary", "RARITY_END", "Whenever", "you", "play", "a", "card,", "summon", "a", "2/1", "Flame", "of", "Azzinoth."], "output_tokens": ["class", "Illidan", "Stormrage", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Illidan", "Stormrage", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Card", "Played", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Flame", "Of", "Azzinoth", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "output": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Imp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "NIL"], "output_tokens": ["class", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
{"input": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "output": "class ImpMaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp Master\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(1), SelfSelector())), Effect(TurnEnded(), ActionTag(Summon(Imp()), PlayerSelector()))])\u00a7", "input_tokens": ["Imp", "Master", "NAME_END", "1", "ATK_END", "5", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "deal", "1", "damage", "to", "this", "minion", "and", "summon", "a", "1/1", "Imp."], "output_tokens": ["class", "Imp", "Master", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "Master", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Imp", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )"]}
{"input": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "output": "class InnerFire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Inner Fire\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        delta = self.target.health - self.target.calculate_attack()\u00a7        self.target.change_attack(delta)\u00a7", "input_tokens": ["Inner", "Fire", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Change", "a", "minion's", "Attack", "to", "be", "equal", "to", "its", "Health."], "output_tokens": ["class", "Inner", "Fire", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Inner", "Fire", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "delta", "=", "self", ".", "target", ".", "health", "-", "self", ".", "target", ".", "calculate_attack", "(", ")", "self", ".", "target", ".", "change_attack", "(", "delta", ")"], "examples": ["class Hunters Mark ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hunter ` s Mark ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . set_health_to ( 1 )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )", "class Reversing Switch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Reversing Switch ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) temp_attack = self . target . calculate_attack ( ) temp_health = self . target . health if temp_attack = = 0 : self . target . die ( None ) else : self . target . set_attack_to ( temp_health ) self . target . set_health_to ( temp_attack )", "class Equality ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Equality ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . set_health_to ( 1 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) > 0 or len ( game . other_player . minions ) > 0 )", "class Lightspawn ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightspawn ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 5 , buffs = [ Buff ( Attack Equals Health ( ) ) ] )"]}
{"input": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "output": "class InnerRage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Inner Rage\", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(1, self)\u00a7        self.target.change_attack(2)\u00a7", "input_tokens": ["Inner", "Rage", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$1", "damage", "to", "a", "minion", "and", "give", "it", "+2", "Attack."], "output_tokens": ["class", "Inner", "Rage", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Inner", "Rage", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "1", ",", "self", ")", "self", ".", "target", ".", "change_attack", "(", "2", ")"], "examples": ["class Cruel Taskmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cruel Taskmaster ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Whirling Blades ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Blades ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Battlecry:</b> <b>Silence</b> a minion.", "output": "class IronbeakOwl(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironbeak Owl\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Ironbeak", "Owl", "NAME_END", "2", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "<b>", "Silence", "</b>", "a", "minion."], "output_tokens": ["class", "Ironbeak", "Owl", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ironbeak", "Owl", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "Battlecry", "(", "Silence", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Lil Exorcist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lil ` Exorcist ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )"]}
{"input": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Stealth</b>", "output": "class JunglePanther(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Jungle Panther\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, stealth=True)\u00a7", "input_tokens": ["Jungle", "Panther", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Jungle", "Panther", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Jungle", "Panther", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "stealth", "=", "True", ")"], "examples": ["class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )"]}
{"input": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One</b> - Deal 2 damage; or <b>Silence</b> a minion.", "output": "class KeeperOfTheGrove(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Keeper of the Grove\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[\u00a7            Choice(Moonfire(), Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())),\u00a7            Choice(Dispel(), Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker()))\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Keeper", "of", "the", "Grove", "NAME_END", "2", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Deal", "2", "damage;", "or", "<b>", "Silence", "</b>", "a", "minion."], "output_tokens": ["class", "Keeper", "Of", "The", "Grove", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Keeper", "of", "the", "Grove", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "choices", "=", "[", "Choice", "(", "Moonfire", "(", ")", ",", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ",", "Choice", "(", "Dispel", "(", ")", ",", "Silence", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"], "examples": ["class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Mark Of Nature ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Mark Of Nature Attack ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Attack ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . change_attack ( 4 ) class Mark Of Nature Health ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mark of Nature + 4 Health ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . increase_health ( 4 ) target . taunt = True super ( ) . use ( player , game ) target = self . target option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) option . use ( player , game )", "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Combo:</b> Return a minion to its owner's hand.", "output": "class Kidnapper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kidnapper\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(picker=UserPicker(), players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 3)\u00a7", "input_tokens": ["Kidnapper", "NAME_END", "5", "ATK_END", "3", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Combo", ":", "</b>", "Return", "a", "minion", "to", "its", "owner's", "hand."], "output_tokens": ["class", "Kidnapper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Kidnapper", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ",", "combo", "=", "Battlecry", "(", "Bounce", "(", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ",", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "3", ")"], "examples": ["class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )"]}
{"input": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Charge</b>", "output": "class KingKrush(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King Krush\", 9, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, charge=True)\u00a7", "input_tokens": ["King", "Krush", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "King", "Krush", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "King", "Krush", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ",", "charge", "=", "True", ")"], "examples": ["class Huffer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Huffer ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , charge = True )", "class Korkron Elite ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kor ` kron Elite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 3 , charge = True )", "class Tundra Rhino ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tundra Rhino ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )"]}
{"input": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Battlecry:</b> Give your opponent 2 Bananas.", "output": "class KingMukla(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King Mukla\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(AddCard(Bananas(), 2), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["King", "Mukla", "NAME_END", "5", "ATK_END", "5", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "your", "opponent", "2", "Bananas."], "output_tokens": ["class", "King", "Mukla", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "King", "Mukla", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Bananas", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )"]}
{"input": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "output": "class LaughingSister(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Laughing Sister\", 3, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, spell_targetable=False)\u00a7", "input_tokens": ["Laughing", "Sister", "NAME_END", "3", "ATK_END", "5", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Dream", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Laughing", "Sister", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Laughing", "Sister", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DREAM", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "spell_targetable", "=", "False", ")"], "examples": ["class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )", "class Wee Spellstopper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wee Spellstopper ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )", "class Arcane Nullifier X21 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Nullifier X - 21 ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 5 , taunt = True , spell_targetable = False )", "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )", "class Flamewaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamewaker ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )"]}
{"input": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b>Overload:</b> (2)", "output": "class LavaBurst(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lava Burst\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7", "input_tokens": ["Lava", "Burst", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$5", "damage.", "<b>", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Lava", "Burst", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lava", "Burst", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "overload", "=", "2", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")"], "examples": ["class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Lava Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Shock ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 2 , self ) player . upcoming_overload = 0 player . mana + = player . current_overload player . current_overload = 0", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )"]}
{"input": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "output": "class LayOnHands(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lay on Hands\", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(8), self)\u00a7        player.draw()\u00a7        player.draw()\u00a7        player.draw()\u00a7", "input_tokens": ["Lay", "on", "Hands", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Restore", "#8", "Health.", "Draw", "3", "cards."], "output_tokens": ["class", "Lay", "On", "Hands", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lay", "on", "Hands", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "heal", "(", "player", ".", "effective_heal_power", "(", "8", ")", ",", "self", ")", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")"], "examples": ["class Holy Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 6 ) , self )", "class Seal Of Light ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Seal of Light ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . heal ( player . effective_heal_power ( 4 ) , self ) player . hero . change_temp_attack ( 2 )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Healing Touch ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Touch ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . heal ( player . effective_heal_power ( 8 ) , self )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )"]}
{"input": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Charge</b>. <b>Battlecry:</b> Summon two 1/1 Whelps for your opponent.", "output": "class LeeroyJenkins(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leeroy Jenkins\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Whelp(), 2), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 2, charge=True)\u00a7", "input_tokens": ["Leeroy", "Jenkins", "NAME_END", "6", "ATK_END", "2", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Charge", "</b>", ".", "<b>", "Battlecry", ":", "</b>", "Summon", "two", "1/1", "Whelps", "for", "your", "opponent."], "output_tokens": ["class", "Leeroy", "Jenkins", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Leeroy", "Jenkins", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Whelp", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "2", ",", "charge", "=", "True", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )"]}
{"input": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 2 damage to the enemy hero.", "output": "class LeperGnome(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leper Gnome\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, deathrattle=Deathrattle(Damage(2), HeroSelector(EnemyPlayer())))\u00a7", "input_tokens": ["Leper", "Gnome", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Deal", "2", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Leper", "Gnome", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Leper", "Gnome", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Damage", "(", "2", ")", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"], "examples": ["class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"]}
{"input": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b>Overload:</b> (1)", "output": "class LightningBolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightning Bolt\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Lightning", "Bolt", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage.", "<b>", "Overload", ":", "</b>", "(1)"], "output_tokens": ["class", "Lightning", "Bolt", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightning", "Bolt", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "overload", "=", "1", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b>Overload:</b> (2)", "output": "class LightningStorm(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightning Storm\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(game.random_amount(2, 3)), self)\u00a7", "input_tokens": ["Lightning", "Storm", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2-$3", "damage", "to", "all", "enemy", "minions.", "<b>", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Lightning", "Storm", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightning", "Storm", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "overload", "=", "2", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "game", ".", "random_amount", "(", "2", ",", "3", ")", ")", ",", "self", ")"], "examples": ["class Forked Lightning ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Forked Lightning ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) minions = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : minion = game . random_choice ( minions ) minions . remove ( minion ) minion . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "output": "class Lightspawn(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightspawn\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 5, buffs=[Buff(AttackEqualsHealth())])\u00a7", "input_tokens": ["Lightspawn", "NAME_END", "0", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "This", "minion's", "Attack", "is", "always", "equal", "to", "its", "Health."], "output_tokens": ["class", "Lightspawn", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightspawn", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "5", ",", "buffs", "=", "[", "Buff", "(", "Attack", "Equals", "Health", "(", ")", ")", "]", ")"], "examples": ["class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "class Inner Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Inner Fire ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) delta = self . target . health - self . target . calculate_attack ( ) self . target . change_attack ( delta )", "class Armor Plating ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armor Plating ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 1 )", "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "class Humility ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Humility ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 - self . target . calculate_attack ( ) )"]}
{"input": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Draw a card.", "output": "class LootHoarder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Loot Hoarder\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, deathrattle=Deathrattle(Draw(), PlayerSelector()))\u00a7", "input_tokens": ["Loot", "Hoarder", "NAME_END", "2", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Loot", "Hoarder", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Loot", "Hoarder", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "deathrattle", "=", "Deathrattle", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Novice Engineer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Novice Engineer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Clockwork Gnome ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Gnome ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )"]}
{"input": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "output": "class LordJaraxxus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord Jaraxxus\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 15)\u00a7", "input_tokens": ["Lord", "Jaraxxus", "NAME_END", "0", "ATK_END", "15", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Hero", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Legendary", "RARITY_END", "NIL"], "output_tokens": ["class", "Lord", "Jaraxxus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lord", "Jaraxxus", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Replace", "Hero", "With", "Minion", "(", "Jaraxxus", "(", ")", ")", ",", "Hero", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Remove", "(", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Equip", "(", "Blood", "Fury", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "15", ")"], "examples": ["class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Thaddius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thaddius ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) def create_minion ( self , player ) : return Minion ( 11 , 11 )", "class Stalagg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stalagg ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy your hero and replace it with Lord Jaraxxus.", "output": "class LordJaraxxus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord Jaraxxus\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 15)\u00a7", "input_tokens": ["Lord", "Jaraxxus", "NAME_END", "3", "ATK_END", "15", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "your", "hero", "and", "replace", "it", "with", "Lord", "Jaraxxus."], "output_tokens": ["class", "Lord", "Jaraxxus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lord", "Jaraxxus", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Replace", "Hero", "With", "Minion", "(", "Jaraxxus", "(", ")", ")", ",", "Hero", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Remove", "(", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Equip", "(", "Blood", "Fury", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "15", ")"], "examples": ["class Majordomo Executus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Majordomo Executus ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Transform ( Ragnaros ( ) ) , Hero Selector ( ) ) ] )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "output": "class LorewalkerCho(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lorewalker Cho\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, effects=[Effect(SpellCast(player=BothPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(OtherPlayer())))])\u00a7", "input_tokens": ["Lorewalker", "Cho", "NAME_END", "0", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "a", "player", "casts", "a", "spell,", "put", "a", "copy", "into", "the", "other", "player\u2019s", "hand."], "output_tokens": ["class", "Lorewalker", "Cho", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lorewalker", "Cho", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LAST_CARD", ")", ")", ",", "Player", "Selector", "(", "Other", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Violet Teacher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Teacher ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage randomly split between all other characters.", "output": "class MadBomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mad Bomber\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Mad", "Bomber", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage", "randomly", "split", "between", "all", "other", "characters."], "output_tokens": ["class", "Mad", "Bomber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mad", "Bomber", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", "3", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Dread Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Abomination ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abomination ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Ironforge Rifleman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironforge Rifleman ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Frost Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Elemental ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Baron Geddon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baron Geddon ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )"]}
{"input": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Spell Damage +5</b>", "output": "class Malygos(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Malygos\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 12, spell_damage=5)\u00a7", "input_tokens": ["Malygos", "NAME_END", "4", "ATK_END", "12", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Spell", "Damage", "+5", "</b>"], "output_tokens": ["class", "Malygos", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Malygos", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "12", ",", "spell_damage", "=", "5", ")"], "examples": ["class Ogre Magi ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ogre Magi ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , spell_damage = 1 )", "class Dalaran Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dalaran Mage ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , spell_damage = 1 )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )"]}
{"input": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "output": "class ManaAddict(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Addict\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(BuffUntil(ChangeAttack(2), TurnEnded())), SelfSelector()))])\u00a7", "input_tokens": ["Mana", "Addict", "NAME_END", "1", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "gain", "+2", "Attack", "this", "turn."], "output_tokens": ["class", "Mana", "Addict", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Addict", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "2", ")", ",", "Turn", "Ended", "(", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Cogmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "output": "class ManaTideTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Tide Totem\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Draw(), PlayerSelector()))])\u00a7", "input_tokens": ["Mana", "Tide", "Totem", "NAME_END", "0", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "Totem", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "draw", "a", "card."], "output_tokens": ["class", "Mana", "Tide", "Totem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Tide", "Totem", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "TOTEM", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Nat Pagle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nat Pagle ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )", "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )"]}
{"input": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give a minion +4 Attack; or +4 Health and <b>Taunt</b>.", "output": "class MarkOfNature(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mark of Nature\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        class MarkOfNatureAttack(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Mark of Nature +4 Attack\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.change_attack(4)\u00a7\u00a7        class MarkOfNatureHealth(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Mark of Nature +4 Health\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.increase_health(4)\u00a7                target.taunt = True\u00a7\u00a7        super().use(player, game)\u00a7        target = self.target\u00a7        option = game.current_player.agent.choose_option([MarkOfNatureAttack(), MarkOfNatureHealth()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Mark", "of", "Nature", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Give", "a", "minion", "+4", "Attack;", "or", "+4", "Health", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Mark", "Of", "Nature", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mark", "of", "Nature", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "class", "Mark", "Of", "Nature", "Attack", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mark", "of", "Nature", "+", "4", "Attack", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "target", ".", "change_attack", "(", "4", ")", "class", "Mark", "Of", "Nature", "Health", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mark", "of", "Nature", "+", "4", "Health", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "target", ".", "increase_health", "(", "4", ")", "target", ".", "taunt", "=", "True", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "target", "=", "self", ".", "target", "option", "=", "game", ".", "current_player", ".", "agent", ".", "choose_option", "(", "[", "Mark", "Of", "Nature", "Attack", "(", ")", ",", "Mark", "Of", "Nature", "Health", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Dark Wispers ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Wispers ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Buff5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Give a minion + 5 / + 5 and Taunt ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None def use ( self , player , game ) : targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) target = player . agent . choose_target ( targets ) target . change_attack ( 5 ) target . increase_health ( 5 ) target . taunt = True class Wisps5 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summon 5 Wisps ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def can_use ( self , player , game ) : return len ( player . minions ) < 7 def use ( self , player , game ) : from hearthbreaker . cards . minions . neutral import Wisp for i in range ( 0 , 5 ) : wisp = Wisp ( ) wisp . summon ( player , game , len ( player . minions ) ) if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) = = 0 : option = Wisps5 ( ) else : option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) option . use ( player , game )", "class Ancient Of War ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient of War ` , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , ] ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )"]}
{"input": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Silence</b> all enemy minions. Draw a card.", "output": "class MassDispel(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mass Dispel\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in game.other_player.minions:\u00a7            minion.silence()\u00a7\u00a7        player.draw()\u00a7", "input_tokens": ["Mass", "Dispel", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Silence", "</b>", "all", "enemy", "minions.", "Draw", "a", "card."], "output_tokens": ["class", "Mass", "Dispel", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mass", "Dispel", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "game", ".", "other_player", ".", "minions", ":", "minion", ".", "silence", "(", ")", "player", ".", "draw", "(", ")"], "examples": ["class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Silence ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silence ` , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )", "class Commanding Shout ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Commanding Shout ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) player . draw ( )", "class Frost Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frost Nova ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Battle Rage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Battle Rage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : def damaged_character ( character ) : return character . health < character . calculate_max_health ( ) super ( ) . use ( player , game ) characters = copy . copy ( player . minions ) characters . append ( player . hero ) characters = [ character for character in characters if damaged_character ( character ) ] for i in range ( 0 , len ( characters ) ) : player . draw ( )"]}
{"input": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "output": "class MasterSwordsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Master Swordsmith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])\u00a7", "input_tokens": ["Master", "Swordsmith", "NAME_END", "1", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "give", "another", "random", "friendly", "minion", "+1", "Attack."], "output_tokens": ["class", "Master", "Swordsmith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Master", "Swordsmith", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Alarmo Bot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alarm - o - Bot ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Swap With Hand ( ) , Player Selector ( ) ) ) ] )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )"]}
{"input": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Stealth</b>.", "output": "class MasterOfDisguise(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Master of Disguise\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Give(Stealth()), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Master", "of", "Disguise", "NAME_END", "4", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "minion", "<b>", "Stealth", "</b>", "."], "output_tokens": ["class", "Master", "Of", "Disguise", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Master", "of", "Disguise", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Stealth", "(", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Enemy spells cost (0) next turn.", "output": "class MillhouseManastorm(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Millhouse Manastorm\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(-100), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Millhouse", "Manastorm", "NAME_END", "4", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Enemy", "spells", "cost", "(0)", "next", "turn."], "output_tokens": ["class", "Millhouse", "Manastorm", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Millhouse", "Manastorm", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Give", "Aura", "(", "Aura", "Until", "(", "Mana", "Change", "(", "-", "100", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Spell", "(", ")", ")", ",", "Turn", "Ended", "(", ")", ")", ")", ",", "Player", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Hemet Nesingwary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hemet Nesingwary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 3 )"]}
{"input": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If your opponent has 4 or more minions, take control of one at random.", "output": "class MindControlTech(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Control Tech\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Steal(), MinionSelector(players=EnemyPlayer(), condition=None, picker=RandomPicker()), OpponentMinionCountIsGreaterThan(3)) )\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Mind", "Control", "Tech", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "your", "opponent", "has", "4", "or", "more", "minions,", "take", "control", "of", "one", "at", "random."], "output_tokens": ["class", "Mind", "Control", "Tech", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mind", "Control", "Tech", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Steal", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "condition", "=", "None", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ",", "Opponent", "Minion", "Count", "Is", "Greater", "Than", "(", "3", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "output": "class Mindgames(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mindgames\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minion_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn and isinstance(c, MinionCard))\u00a7        if not minion_card:\u00a7            minion_card = ShadowOfNothing()\u00a7        else:\u00a7            minion_card = copy.copy(minion_card)\u00a7        minion_card.drawn = True\u00a7        minion_card.summon(player, game, 0)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7", "input_tokens": ["Mindgames", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Put", "a", "copy", "of", "a", "random", "minion", "from", "your", "opponent's", "deck", "into", "the", "battlefield."], "output_tokens": ["class", "Mindgames", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mindgames", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "minion_card", "=", "game", ".", "random_draw", "(", "game", ".", "other_player", ".", "deck", ".", "cards", ",", "lambda", "c", ":", "not", "c", ".", "drawn", "and", "isinstance", "(", "c", ",", "Minion", "Card", ")", ")", "if", "not", "minion_card", ":", "minion_card", "=", "Shadow", "Of", "Nothing", "(", ")", "else", ":", "minion_card", "=", "copy", ".", "copy", "(", "minion_card", ")", "minion_card", ".", "drawn", "=", "True", "minion_card", ".", "summon", "(", "player", ",", "game", ",", "0", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Ancestors Call ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancestor ` s Call ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for player in game . players : minions = [ card for card in player . hand if card . is_minion ( ) ] if len ( minions ) and len ( player . minions ) < 7 : minion_card = game . random_choice ( minions ) minion_card . unattach ( ) player . hand . remove ( minion_card ) minion_card . summon ( player , game , len ( player . minions ) )", "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )"]}
{"input": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, summon a copy of it.", "output": "class MirrorEntity(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Entity\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, minion):\u00a7        if len(self.player.minions) < 7:\u00a7            mirror = minion.copy(self.player)\u00a7            mirror.add_to_board(len(self.player.minions))\u00a7            minion.player.trigger(\"minion_summoned\", mirror)\u00a7            minion.player.trigger(\"after_added\", mirror)\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7        self.player = None\u00a7", "input_tokens": ["Mirror", "Entity", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "opponent", "plays", "a", "minion,", "summon", "a", "copy", "of", "it."], "output_tokens": ["class", "Mirror", "Entity", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mirror", "Entity", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "minion", ")", ":", "if", "len", "(", "self", ".", "player", ".", "minions", ")", "<", "7", ":", "mirror", "=", "minion", ".", "copy", "(", "self", ".", "player", ")", "mirror", ".", "add_to_board", "(", "len", "(", "self", ".", "player", ".", "minions", ")", ")", "minion", ".", "player", ".", "trigger", "(", "`", "minion_summoned", "`", ",", "mirror", ")", "minion", ".", "player", ".", "trigger", "(", "`", "after_added", "`", ",", "mirror", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "player", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "None"], "examples": ["class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )"]}
{"input": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "output": "class MoltenGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Molten Giant\", 20, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Attribute(\"damage\", HeroSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Molten", "Giant", "NAME_END", "8", "ATK_END", "8", "DEF_END", "20", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Costs", "(1)", "less", "for", "each", "damage", "your", "hero", "has", "taken."], "output_tokens": ["class", "Molten", "Giant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Molten", "Giant", "`", ",", "20", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Attribute", "(", "`", "damage", "`", ",", "Hero", "Selector", "(", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "output": "class MortalStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mortal Strike\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.hero.health <= 12:\u00a7            self.target.damage(player.effective_spell_damage(6), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(4), self)\u00a7", "input_tokens": ["Mortal", "Strike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$4", "damage.", "If", "you", "have", "12", "or", "less", "Health,", "deal", "$6", "instead."], "output_tokens": ["class", "Mortal", "Strike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mortal", "Strike", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "player", ".", "hero", ".", "health", "<", "=", "12", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "6", ")", ",", "self", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")"], "examples": ["class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Holy Fire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Fire ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . hero . heal ( player . effective_heal_power ( 5 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )"]}
{"input": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "output": "class MountainGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mountain Giant\", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(CardSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Mountain", "Giant", "NAME_END", "8", "ATK_END", "8", "DEF_END", "12", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Costs", "(1)", "less", "for", "each", "other", "card", "in", "your", "hand."], "output_tokens": ["class", "Mountain", "Giant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mountain", "Giant", "`", ",", "12", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Card", "Selector", "(", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )"]}
{"input": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "output": "class MurlocTidecaller(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Tidecaller\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[(Effect(MinionSummoned(IsType(MINION_TYPE.MURLOC), player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector())))])\u00a7", "input_tokens": ["Murloc", "Tidecaller", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "Murloc", "is", "summoned,", "gain", "+1", "Attack."], "output_tokens": ["class", "Murloc", "Tidecaller", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Murloc", "Tidecaller", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "(", "Effect", "(", "Minion", "Summoned", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "player", "=", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grimscale Oracle ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "output": "class MurlocWarleader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Warleader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, auras=[Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\u00a7", "input_tokens": ["Murloc", "Warleader", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Murloc", "RACE_END", "Epic", "RARITY_END", "ALL", "other", "Murlocs", "have", "+2/+1."], "output_tokens": ["class", "Murloc", "Warleader", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Murloc", "Warleader", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "MURLOC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "Both", "Player", "(", ")", ")", ")", ",", "Aura", "(", "Change", "Health", "(", "1", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MURLOC", ")", ",", "Both", "Player", "(", ")", ")", ")", "]", ")"], "examples": ["class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grimscale Oracle ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )", "class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Seer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Murloc Scout ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Scout ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Murloc Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Raider ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "output": "class NatPagle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nat Pagle\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, effects=[Effect(TurnStarted(), ActionTag(Draw(), PlayerSelector(), OneIn(2)))])\u00a7", "input_tokens": ["Nat", "Pagle", "NAME_END", "0", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "you", "have", "a", "50%", "chance", "to", "draw", "an", "extra", "card."], "output_tokens": ["class", "Nat", "Pagle", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nat", "Pagle", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ",", "One", "In", "(", "2", ")", ")", ")", "]", ")"], "examples": ["class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Dancing Swords ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dancing Swords ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )", "class Chromaggus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chromaggus ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )"]}
{"input": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "output": "class Naturalize(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Naturalize\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        game.other_player.draw()\u00a7        game.other_player.draw()\u00a7", "input_tokens": ["Naturalize", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Destroy", "a", "minion.", "Your", "opponent", "draws", "2", "cards."], "output_tokens": ["class", "Naturalize", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Naturalize", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "die", "(", "self", ")", "game", ".", "other_player", ".", "draw", "(", ")", "game", ".", "other_player", ".", "draw", "(", ")"], "examples": ["class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Arcane Intellect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Intellect ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for c in range ( 0 , 2 ) : player . draw ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )"]}
{"input": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "output": "class Nightmare(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nightmare\", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(ChangeAttack(5)))\u00a7        self.target.add_buff(Buff(ChangeHealth(5)))\u00a7        self.target.add_effect(Effect(TurnStarted(player=CurrentPlayer()), ActionTag(Kill(), SelfSelector())))\u00a7", "input_tokens": ["Nightmare", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Dream", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "+5/+5.", "At", "the", "start", "of", "your", "next", "turn,", "destroy", "it."], "output_tokens": ["class", "Nightmare", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nightmare", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DREAM", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Change", "Attack", "(", "5", ")", ")", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Change", "Health", "(", "5", ")", ")", ")", "self", ".", "target", ".", "add_effect", "(", "Effect", "(", "Turn", "Started", "(", "player", "=", "Current", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Self", "Selector", "(", ")", ")", ")", ")"], "examples": ["class Corruption ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Corruption ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_effect ( Effect ( Turn Started ( player = Enemy Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )", "class Finicky Cloakfield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Finicky Cloakfield ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Doomsayer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomsayer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )"]}
{"input": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "output": "class Nozdormu(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nozdormu\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Nozdormu", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "Players", "only", "have", "15", "seconds", "to", "take", "their", "turns."], "output_tokens": ["class", "Nozdormu", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nozdormu", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Gruul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gruul ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 7 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Malygos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Malygos ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 4 , 12 , spell_damage = 5 )", "class Southsea Captain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Captain ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )"]}
{"input": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Summon 1/1 Whelps until your side of the battlefield is full.", "output": "class Onyxia(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Onyxia\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Summon(Whelp(), 6), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Onyxia", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "1/1", "Whelps", "until", "your", "side", "of", "the", "battlefield", "is", "full."], "output_tokens": ["class", "Onyxia", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Onyxia", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Whelp", "(", ")", ",", "6", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class The Beast ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Beast ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Panther(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Panther\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(3, 2, MINION_TYPE.BEAST)\u00a7", "input_tokens": ["Panther", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Panther", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Panther", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "_", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "MINION_TYPE", ".", "BEAST", ")"], "examples": ["class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Flame ` , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Devilsaur ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Devilsaur ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Snake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake ` , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b>. Destroy any minion damaged by this minion.", "output": "class PatientAssassin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Patient Assassin\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, stealth=True, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7", "input_tokens": ["Patient", "Assassin", "NAME_END", "1", "ATK_END", "1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Stealth", "</b>", ".", "Destroy", "any", "minion", "damaged", "by", "this", "minion."], "output_tokens": ["class", "Patient", "Assassin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Patient", "Assassin", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "stealth", "=", "True", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", "Is", "Minion", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Emperor Cobra ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Cobra ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Kidnapper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kidnapper ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 3 )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Crush ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crush ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 1 damage. <b>Combo:</b> Deal 2 instead.", "output": "class PerditionsBlade(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Perdition's Blade\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, picker=UserPicker())), combo=Battlecry(Damage(2), CharacterSelector(None, picker=UserPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7", "input_tokens": ["Perdition's", "Blade", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "3", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "1", "damage.", "<b>", "Combo", ":", "</b>", "Deal", "2", "instead."], "output_tokens": ["class", "Perditions", "Blade", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Perdition", "`", "s", "Blade", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "None", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ",", "combo", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "None", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "2", ")"], "examples": ["class Coghammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coghammer ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 3 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "output": "class PintSizedSummoner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pint-Sized Summoner\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(TurnStarted(), ActionTag(GiveAura(AuraUntil(ManaChange(-1), CardSelector( condition=IsMinion()), MinionPlaced())), PlayerSelector()))])\u00a7", "input_tokens": ["Pint-Sized", "Summoner", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "The", "first", "minion", "you", "play", "each", "turn", "costs", "(1)", "less."], "output_tokens": ["class", "Pint", "Sized", "Summoner", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Pint", "-", "Sized", "Summoner", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Give", "Aura", "(", "Aura", "Until", "(", "Mana", "Change", "(", "-", "1", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Minion", "(", ")", ")", ",", "Minion", "Placed", "(", ")", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )"]}
{"input": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b>Battlecry:</b> Deal 5 damage to your hero.", "output": "class PitLord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pit Lord\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(5), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7", "input_tokens": ["Pit", "Lord", "NAME_END", "5", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "5", "damage", "to", "your", "hero."], "output_tokens": ["class", "Pit", "Lord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Pit", "Lord", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "5", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "6", ")"], "examples": ["class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Felguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Felguard ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "output": "class PowerOverwhelming(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power Overwhelming\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_effect(Effect(TurnEnded(), ActionTag(Kill(), SelfSelector())))\u00a7        self.target.change_attack(4)\u00a7        self.target.increase_health(4)\u00a7", "input_tokens": ["Power", "Overwhelming", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "a", "friendly", "minion", "+4/+4", "until", "end", "of", "turn.", "Then,", "it", "dies.", "Horribly."], "output_tokens": ["class", "Power", "Overwhelming", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Power", "Overwhelming", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_effect", "(", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Kill", "(", ")", ",", "Self", "Selector", "(", ")", ")", ")", ")", "self", ".", "target", ".", "change_attack", "(", "4", ")", "self", ".", "target", ".", "increase_health", "(", "4", ")"], "examples": ["class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )"]}
{"input": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 4 Health to your hero.", "output": "class PriestessOfElune(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Priestess of Elune\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Priestess", "of", "Elune", "NAME_END", "5", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Restore", "4", "Health", "to", "your", "hero."], "output_tokens": ["class", "Priestess", "Of", "Elune", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Priestess", "of", "Elune", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Heal", "(", "4", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Zombie Chow ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Zombie Chow ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )", "class Guardian Of Kings ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Guardian of Kings ` , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Tournament Medic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tournament Medic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )", "class Earthen Ring Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earthen Ring Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "output": "class ProphetVelen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Prophet Velen\", 7, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, auras=[Aura(MultiplySpellDamage(2), PlayerSelector()), Aura(MultiplyHealAmount(2), PlayerSelector())])\u00a7", "input_tokens": ["Prophet", "Velen", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Double", "the", "damage", "and", "healing", "of", "your", "spells", "and", "Hero", "Power."], "output_tokens": ["class", "Prophet", "Velen", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Prophet", "Velen", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ",", "auras", "=", "[", "Aura", "(", "Multiply", "Spell", "Damage", "(", "2", ")", ",", "Player", "Selector", "(", ")", ")", ",", "Aura", "(", "Multiply", "Heal", "Amount", "(", "2", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Priestess Of Elune ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Priestess of Elune ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class King Krush ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Krush ` , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 8 , 8 , charge = True )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "output": "class Pyroblast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pyroblast\", 10, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(10), self)\u00a7", "input_tokens": ["Pyroblast", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "10", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "$10", "damage."], "output_tokens": ["class", "Pyroblast", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Pyroblast", "`", ",", "10", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "10", ")", ",", "self", ")"], "examples": ["class Fireball ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fireball ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 6 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Moonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Moonfire ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "output": "class QuestingAdventurer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Questing Adventurer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(CardPlayed(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7", "input_tokens": ["Questing", "Adventurer", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "play", "a", "card,", "gain", "+1/+1."], "output_tokens": ["class", "Questing", "Adventurer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Questing", "Adventurer", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Card", "Played", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Gadgetzan Auctioneer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gadgetzan Auctioneer ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Twilight Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Drake ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 1 )"]}
{"input": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> <b>Windfury</b> and +1 Attack", "output": "class RagingWorgen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Raging Worgen\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()), Aura(Windfury(), SelfSelector())])\u00a7", "input_tokens": ["Raging", "Worgen", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "<b>", "Windfury", "</b>", "and", "+1", "Attack"], "output_tokens": ["class", "Raging", "Worgen", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Raging", "Worgen", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Aura", "(", "Windfury", "(", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )"]}
{"input": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "output": "class RagnarosTheFirelord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ragnaros the Firelord\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, effects=[Effect(TurnEnded(), ActionTag(Damage(8), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))], buffs=[Buff(CantAttack())])\u00a7", "input_tokens": ["Ragnaros", "the", "Firelord", "NAME_END", "8", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Can't", "attack.", "At", "the", "end", "of", "your", "turn,", "deal", "8", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Ragnaros", "The", "Firelord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ragnaros", "the", "Firelord", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "8", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ",", "buffs", "=", "[", "Buff", "(", "Cant", "Attack", "(", ")", ")", "]", ")"], "examples": ["class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "output": "class Rampage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rampage\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(3)\u00a7        self.target.increase_health(3)\u00a7", "input_tokens": ["Rampage", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "a", "damaged", "minion", "+3/+3."], "output_tokens": ["class", "Rampage", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Rampage", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ",", "filter_func", "=", "lambda", "target", ":", "target", ".", "health", "!", "=", "target", ".", "calculate_max_health", "(", ")", "and", "target", ".", "spell_targetable", "(", ")", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "3", ")", "self", ".", "target", ".", "increase_health", "(", "3", ")"], "examples": ["class Velens Chosen ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Velen ` s Chosen ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . increase_health ( 4 ) self . target . add_buff ( Buff ( Spell Damage ( 1 ) ) )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )"]}
{"input": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Stealth</b>", "output": "class RavenholdtAssassin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ravenholdt Assassin\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, stealth=True)\u00a7", "input_tokens": ["Ravenholdt", "Assassin", "NAME_END", "7", "ATK_END", "5", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Ravenholdt", "Assassin", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ravenholdt", "Assassin", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "5", ",", "stealth", "=", "True", ")"], "examples": ["class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )"]}
{"input": "SI:7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Combo:</b> Deal 2 damage.", "output": "class SI7Agent(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"SI:7 Agent\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, combo=Battlecry(Damage(2), CharacterSelector( players=BothPlayer(), picker=UserPicker()) ))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["SI", ":", "7", "Agent", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Combo", ":", "</b>", "Deal", "2", "damage."], "output_tokens": ["class", "SI7Agent", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "SI", ":", "7", "Agent", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "combo", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Eviscerate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eviscerate ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . damage ( player . effective_spell_damage ( 4 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Elven Archer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Elven Archer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Perditions Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Perdition ` s Blade ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )"]}
{"input": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "output": "class Savagery(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savagery\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(player.hero.calculate_attack()), self)\u00a7", "input_tokens": ["Savagery", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "damage", "equal", "to", "your", "hero's", "Attack", "to", "a", "minion."], "output_tokens": ["class", "Savagery", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Savagery", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "player", ".", "hero", ".", "calculate_attack", "(", ")", ")", ",", "self", ")"], "examples": ["class Lightbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightbomb ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Shield Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shield Slam ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )"]}
{"input": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Deathrattle:</b> Summon two 2/2 Hyenas.", "output": "class SavannahHighmane(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savannah Highmane\", 6, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5, deathrattle=Deathrattle(Summon(Hyena(), 2), PlayerSelector()))\u00a7", "input_tokens": ["Savannah", "Highmane", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "two", "2/2", "Hyenas."], "output_tokens": ["class", "Savannah", "Highmane", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Savannah", "Highmane", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Hyena", "(", ")", ",", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Stranglethorn Tiger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stranglethorn Tiger ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 5 , stealth = True )", "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "output": "class ScarletCrusader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scarlet Crusader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, divine_shield=True)\u00a7", "input_tokens": ["Scarlet", "Crusader", "NAME_END", "3", "ATK_END", "1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Scarlet", "Crusader", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Scarlet", "Crusader", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "1", ",", "divine_shield", "=", "True", ")"], "examples": ["class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Argent Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 , divine_shield = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )"]}
{"input": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "output": "class ScavengingHyena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scavenging Hyena\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])\u00a7", "input_tokens": ["Scavenging", "Hyena", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "Whenever", "a", "friendly", "Beast", "dies,", "gain", "+2/+1."], "output_tokens": ["class", "Scavenging", "Hyena", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Scavenging", "Hyena", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Minion", "Died", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Minion", "Died", "(", "Is", "Type", "(", "MINION_TYPE", ".", "BEAST", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Health", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Junkbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Junkbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "output": "class SeaGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sea Giant\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(MinionSelector(None, BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Sea", "Giant", "NAME_END", "8", "ATK_END", "8", "DEF_END", "10", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Costs", "(1)", "less", "for", "each", "other", "minion", "on", "the", "battlefield."], "output_tokens": ["class", "Sea", "Giant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sea", "Giant", "`", ",", "10", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Minion", "Selector", "(", "None", ",", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Mountain Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mountain Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "class Molten Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Molten Giant ` , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( ` damage ` , Hero Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Steamwheedle Sniper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Steamwheedle Sniper ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )"]}
{"input": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b>Secret</b> is played, gain +1/+1.", "output": "class Secretkeeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Secretkeeper\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(SpellCast(IsSecret(), BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7", "input_tokens": ["Secretkeeper", "NAME_END", "1", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "a", "<b>", "Secret", "</b>", "is", "played,", "gain", "+1/+1."], "output_tokens": ["class", "Secretkeeper", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Secretkeeper", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", "Is", "Secret", "(", ")", ",", "Both", "Player", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Unbound Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unbound Elemental ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Eaglehorn Bow ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eaglehorn Bow ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )", "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )"]}
{"input": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "output": "class SenseDemons(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sense Demons\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 2):\u00a7            demon_card = game.random_draw(game.current_player.deck.cards, lambda c: not c.drawn and c.is_minion() and c.minion_type == MINION_TYPE.DEMON)\u00a7            if demon_card:\u00a7                demon_card.drawn = True\u00a7                player.deck.left -= 1\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(demon_card)\u00a7                    demon_card.player = player\u00a7                    self.trigger(\"card_drawn\", demon_card)\u00a7                else:\u00a7                    player.trigger(\"card_destroyed\", demon_card)\u00a7            else:\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(hearthbreaker.cards.minions.warlock.WorthlessImp())\u00a7                    player.hand[-1].player = player\u00a7                    self.trigger(\"card_drawn\", hearthbreaker.cards.minions.warlock.WorthlessImp())\u00a7", "input_tokens": ["Sense", "Demons", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Put", "2", "random", "Demons", "from", "your", "deck", "into", "your", "hand."], "output_tokens": ["class", "Sense", "Demons", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sense", "Demons", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "demon_card", "=", "game", ".", "random_draw", "(", "game", ".", "current_player", ".", "deck", ".", "cards", ",", "lambda", "c", ":", "not", "c", ".", "drawn", "and", "c", ".", "is_minion", "(", ")", "and", "c", ".", "minion_type", "=", "=", "MINION_TYPE", ".", "DEMON", ")", "if", "demon_card", ":", "demon_card", ".", "drawn", "=", "True", "player", ".", "deck", ".", "left", "-", "=", "1", "if", "len", "(", "player", ".", "hand", ")", "<", "10", ":", "player", ".", "hand", ".", "append", "(", "demon_card", ")", "demon_card", ".", "player", "=", "player", "self", ".", "trigger", "(", "`", "card_drawn", "`", ",", "demon_card", ")", "else", ":", "player", ".", "trigger", "(", "`", "card_destroyed", "`", ",", "demon_card", ")", "else", ":", "if", "len", "(", "player", ".", "hand", ")", "<", "10", ":", "player", ".", "hand", ".", "append", "(", "hearthbreaker", ".", "cards", ".", "minions", ".", "warlock", ".", "Worthless", "Imp", "(", ")", ")", "player", ".", "hand", "[", "-", "1", "]", ".", "player", "=", "player", "self", ".", "trigger", "(", "`", "card_drawn", "`", ",", "hearthbreaker", ".", "cards", ".", "minions", ".", "warlock", ".", "Worthless", "Imp", "(", ")", ")"], "examples": ["class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Thoughtsteal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thoughtsteal ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) if new_card : new_card = copy . copy ( new_card ) new_card . drawn = True if len ( player . hand ) < 10 : player . hand . append ( new_card ) new_card . player = player self . trigger ( ` card_drawn ` , new_card ) else : player . trigger ( ` card_destroyed ` , new_card )", "class Tracking ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tracking ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) cards = [ ] for card_index in range ( 0 , 3 ) : if player . can_draw ( ) : cards . append ( player . deck . draw ( game ) ) if len ( cards ) > 0 : chosen_card = player . agent . choose_option ( cards , player ) player . hand . append ( chosen_card ) player . hand [ - 1 ] . player = player player . trigger ( ` card_drawn ` , chosen_card )", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )"]}
{"input": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "output": "class Shadowflame(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowflame\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        shadowflame_damage = self.target.calculate_attack()\u00a7        self.target.die(self)\u00a7        for minion in game.other_player.minions:\u00a7            minion.damage(player.effective_spell_damage(shadowflame_damage), self)\u00a7", "input_tokens": ["Shadowflame", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Destroy", "a", "friendly", "minion", "and", "deal", "its", "Attack", "damage", "to", "all", "enemy", "minions."], "output_tokens": ["class", "Shadowflame", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadowflame", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "shadowflame_damage", "=", "self", ".", "target", ".", "calculate_attack", "(", ")", "self", ".", "target", ".", "die", "(", "self", ")", "for", "minion", "in", "game", ".", "other_player", ".", "minions", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "shadowflame_damage", ")", ",", "self", ")"], "examples": ["class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )", "class Twisting Nether ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twisting Nether ` , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )"]}
{"input": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform: 3 damage.", "output": "class Shadowform(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowform\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if type(player.hero.power) is not hearthbreaker.powers.MindShatter and type( player.hero.power) is not hearthbreaker.powers.MindSpike:\u00a7            player.hero.power = hearthbreaker.powers.MindSpike()\u00a7            player.hero.power.hero = player.hero\u00a7        elif type(player.hero.power) is hearthbreaker.powers.MindSpike:\u00a7            player.hero.power = hearthbreaker.powers.MindShatter()\u00a7            player.hero.power.hero = player.hero\u00a7", "input_tokens": ["Shadowform", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Your", "Hero", "Power", "becomes", "'Deal", "2", "damage'.", "If", "already", "in", "Shadowform", ":", "3", "damage."], "output_tokens": ["class", "Shadowform", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadowform", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "type", "(", "player", ".", "hero", ".", "power", ")", "is", "not", "hearthbreaker", ".", "powers", ".", "Mind", "Shatter", "and", "type", "(", "player", ".", "hero", ".", "power", ")", "is", "not", "hearthbreaker", ".", "powers", ".", "Mind", "Spike", ":", "player", ".", "hero", ".", "power", "=", "hearthbreaker", ".", "powers", ".", "Mind", "Spike", "(", ")", "player", ".", "hero", ".", "power", ".", "hero", "=", "player", ".", "hero", "elif", "type", "(", "player", ".", "hero", ".", "power", ")", "is", "hearthbreaker", ".", "powers", ".", "Mind", "Spike", ":", "player", ".", "hero", ".", "power", "=", "hearthbreaker", ".", "powers", ".", "Mind", "Shatter", "(", ")", "player", ".", "hero", ".", "power", ".", "hero", "=", "player", ".", "hero"], "examples": ["class Shadowbomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowbomber ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Claw ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Claw ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 2 ) player . hero . increase_armor ( 2 )", "class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Laughing Sister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Laughing Sister ` , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 3 , 5 , spell_targetable = False )"]}
{"input": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "output": "class Shadowstep(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowstep\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.bounce()\u00a7        self.target.card.add_buff(Buff(ManaChange(-3)))\u00a7", "input_tokens": ["Shadowstep", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Return", "a", "friendly", "minion", "to", "your", "hand.", "It", "costs", "(2)", "less."], "output_tokens": ["class", "Shadowstep", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadowstep", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_friendly_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "bounce", "(", ")", "self", ".", "target", ".", "card", ".", "add_buff", "(", "Buff", "(", "Mana", "Change", "(", "-", "3", ")", ")", ")"], "examples": ["class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Unstable Portal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Portal ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) query = Card Query ( conditions = [ Is Minion ( ) ] ) new_minon = query . get_card ( player , player , self ) new_minon . add_buff ( Buff ( Mana Change ( - 3 ) ) ) player . hand . append ( new_minon )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )"]}
{"input": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "output": "class ShieldSlam(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shield Slam\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(player.hero.armor), self)\u00a7", "input_tokens": ["Shield", "Slam", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Deal", "1", "damage", "to", "a", "minion", "for", "each", "Armor", "you", "have."], "output_tokens": ["class", "Shield", "Slam", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shield", "Slam", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "player", ".", "hero", ".", "armor", ")", ",", "self", ")"], "examples": ["class Savagery ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Savagery ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Implosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp - losion ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) had_shield = self . target . divine_shield self . target . damage ( amount , self ) if not had_shield : for i in range ( 0 , amount ) : imp = Imp ( ) imp . summon ( player , game , len ( player . minions ) )"]}
{"input": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class Shieldbearer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shieldbearer\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, taunt=True)\u00a7", "input_tokens": ["Shieldbearer", "NAME_END", "0", "ATK_END", "4", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Shieldbearer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shieldbearer", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "4", ",", "taunt", "=", "True", ")"], "examples": ["class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )"]}
{"input": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Silence</b> a minion.", "output": "class Silence(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silence\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.silence()\u00a7", "input_tokens": ["Silence", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Silence", "</b>", "a", "minion."], "output_tokens": ["class", "Silence", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silence", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "silence", "(", ")"], "examples": ["class Mind Control ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control ` , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) new_minion = self . target . copy ( player ) self . target . remove_from_board ( ) new_minion . add_to_board ( len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Rusty Horn ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rusty Horn ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Taunt ( ) ) )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )", "class Mass Dispel ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mass Dispel ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in game . other_player . minions : minion . silence ( ) player . draw ( )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 2/2 Squire.", "output": "class SilverHandKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silver Hand Knight\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Squire()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Silver", "Hand", "Knight", "NAME_END", "4", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Summon", "a", "2/2", "Squire."], "output_tokens": ["class", "Silver", "Hand", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silver", "Hand", "Knight", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Summon", "(", "Squire", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Cairne Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cairne Bloodhoof ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )", "class Murloc Tidehunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Tidehunter ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Dragonling Mechanic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonling Mechanic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "output": "class SilvermoonGuardian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silvermoon Guardian\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, divine_shield=True)\u00a7", "input_tokens": ["Silvermoon", "Guardian", "NAME_END", "3", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Silvermoon", "Guardian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Silvermoon", "Guardian", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "divine_shield", "=", "True", ")"], "examples": ["class Scarlet Crusader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Crusader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 1 , divine_shield = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Sunwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunwalker ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 5 , divine_shield = True , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )"]}
{"input": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Snake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snake\", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Snake", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Snake", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Snake", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Hyena ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hyena ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )"]}
{"input": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When one of your minions is attacked, summon three 1/1 Snakes.", "output": "class SnakeTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snake Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Minion):\u00a7            snake = hearthbreaker.cards.minions.hunter.Snake()\u00a7            player = target.player.game.other_player\u00a7            for i in range(0, 3):\u00a7                snake.summon(player, player.game, len(player.minions))\u00a7            super().reveal()\u00a7", "input_tokens": ["Snake", "Trap", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "one", "of", "your", "minions", "is", "attacked,", "summon", "three", "1/1", "Snakes."], "output_tokens": ["class", "Snake", "Trap", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Snake", "Trap", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "isinstance", "(", "target", ",", "Minion", ")", ":", "snake", "=", "hearthbreaker", ".", "cards", ".", "minions", ".", "hunter", ".", "Snake", "(", ")", "player", "=", "target", ".", "player", ".", "game", ".", "other_player", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "snake", ".", "summon", "(", "player", ",", "player", ".", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Soul Of The Forest ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soul of the Forest ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Treant for minion in player . minions : minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )", "class Avenge ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Avenge ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , dead_minion , attacker ) : if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : target = self . player . game . random_choice ( self . player . minions ) target . change_attack ( 3 ) target . increase_health ( 2 ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )"]}
{"input": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, deal $4 damage to it.", "output": "class Snipe(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snipe\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7\u00a7    def _reveal(self, minion):\u00a7        minion.damage(4, None)\u00a7        super().reveal()\u00a7", "input_tokens": ["Snipe", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "opponent", "plays", "a", "minion,", "deal", "$4", "damage", "to", "it."], "output_tokens": ["class", "Snipe", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Snipe", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "def", "_reveal", "(", "self", ",", "minion", ")", ":", "minion", ".", "damage", "(", "4", ",", "None", ")", "super", "(", ")", ".", "reveal", "(", ")"], "examples": ["class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )", "class Spellbender ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) self . player = None def _reveal ( self , card , index ) : if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) card . target = self . player . minions [ - 1 ] super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal ) self . player = None", "class Duplicate ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Duplicate ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , by ) : for c in range ( 0 , 2 ) : if len ( self . player . hand ) < 10 : new_card = type ( minion . card ) ( ) self . player . hand . append ( new_card ) new_card . attach ( new_card , self . player ) super ( ) . reveal ( )", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )"]}
{"input": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "output": "class SorcerersApprentice(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sorcerer's Apprentice\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, auras=[Aura(ManaChange(-1), CardSelector(condition=IsSpell()))])\u00a7", "input_tokens": ["Sorcerer's", "Apprentice", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Your", "spells", "cost", "(1)", "less."], "output_tokens": ["class", "Sorcerers", "Apprentice", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sorcerer", "`", "s", "Apprentice", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "-", "1", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Spell", "(", ")", ")", ")", "]", ")"], "examples": ["class Mechwarper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mechwarper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 3 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) ] )", "class Kobold Geomancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kobold Geomancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , spell_damage = 1 )", "class Millhouse Manastorm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Millhouse Manastorm ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \"<b>Deathrattle:</b> Summon a 2/2 Treant.\"", "output": "class SoulOfTheForest(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soul of the Forest\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import Treant\u00a7        for minion in player.minions:\u00a7            minion.deathrattle.append(Deathrattle(Summon(Treant()), PlayerSelector()))\u00a7", "input_tokens": ["Soul", "of", "the", "Forest", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Give", "your", "minions", "\"", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "2/2", "Treant.\""], "output_tokens": ["class", "Soul", "Of", "The", "Forest", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Soul", "of", "the", "Forest", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "from", "hearthbreaker", ".", "cards", ".", "minions", ".", "druid", "import", "Treant", "for", "minion", "in", "player", ".", "minions", ":", "minion", ".", "deathrattle", ".", "append", "(", "Deathrattle", "(", "Summon", "(", "Treant", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Cenarius ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cenarius ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 5 , 8 )", "class Bloodlust ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodlust ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . change_temp_attack ( 3 )", "class Cold Blood ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cold Blood ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . cards_played > 0 : self . target . change_attack ( 4 ) else : self . target . change_attack ( 2 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "output": "class SouthseaCaptain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Southsea Captain\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\u00a7", "input_tokens": ["Southsea", "Captain", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Epic", "RARITY_END", "Your", "other", "Pirates", "have", "+1/+1."], "output_tokens": ["class", "Southsea", "Captain", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Southsea", "Captain", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "EPIC", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "auras", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "PIRATE", ")", ")", ")", ",", "Aura", "(", "Change", "Health", "(", "1", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "PIRATE", ")", ")", ")", "]", ")"], "examples": ["class Murloc Warleader ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Murloc Warleader ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )", "class Southsea Deckhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Southsea Deckhand ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )"]}
{"input": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b>Charge</b> while you have a weapon equipped.", "output": "class SouthseaDeckhand(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Southsea Deckhand\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, buffs=[Buff(Charge(), GreaterThan(Count(WeaponSelector()), value=0))])\u00a7", "input_tokens": ["Southsea", "Deckhand", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Pirate", "RACE_END", "Common", "RARITY_END", "Has", "<b>", "Charge", "</b>", "while", "you", "have", "a", "weapon", "equipped."], "output_tokens": ["class", "Southsea", "Deckhand", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Southsea", "Deckhand", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "PIRATE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "buffs", "=", "[", "Buff", "(", "Charge", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Weapon", "Selector", "(", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")"], "examples": ["class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bluegill Warrior ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Faerie Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faerie Dragon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 2 , spell_targetable = False )"]}
{"input": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "output": "class Spellbender(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7", "input_tokens": ["Spellbender", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "an", "enemy", "casts", "a", "spell", "on", "a", "minion,", "summon", "a", "1/3", "as", "the", "new", "target."], "output_tokens": ["class", "Spellbender", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spellbender", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "EPIC", ")", "self", ".", "player", "=", "None", "def", "_reveal", "(", "self", ",", "card", ",", "index", ")", ":", "if", "card", ".", "is_spell", "(", ")", "and", "len", "(", "self", ".", "player", ".", "minions", ")", "<", "7", "and", "card", ".", "target", "and", "card", ".", "target", ".", "is_minion", "(", ")", ":", "Spellbender", "Minion", "(", ")", ".", "summon", "(", "self", ".", "player", ",", "self", ".", "player", ".", "game", ",", "len", "(", "self", ".", "player", ".", "minions", ")", ")", "card", ".", "target", "=", "self", ".", "player", ".", "minions", "[", "-", "1", "]", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "player", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "card_played", "`", ",", "self", ".", "_reveal", ")", "self", ".", "player", "=", "None"], "examples": ["class Counterspell ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Counterspell ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) def _reveal ( self , card , index ) : if card . is_spell ( ) : card . cancel = True super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` card_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` card_played ` , self . _reveal )", "class Snipe ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snipe ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def _reveal ( self , minion ) : minion . damage ( 4 , None ) super ( ) . reveal ( )", "class Mirror Entity ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mirror Entity ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) self . player = None def _reveal ( self , minion ) : if len ( self . player . minions ) < 7 : mirror = minion . copy ( self . player ) mirror . add_to_board ( len ( self . player . minions ) ) minion . player . trigger ( ` minion_summoned ` , mirror ) minion . player . trigger ( ` after_added ` , mirror ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) self . player = None", "class Freezing Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Freezing Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( attacker , Minion ) and not attacker . removed : attacker . bounce ( ) attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) super ( ) . reveal ( )", "class Snake Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Snake Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : snake = hearthbreaker . cards . minions . hunter . Snake ( ) player = target . player . game . other_player for i in range ( 0 , 3 ) : snake . summon ( player , player . game , len ( player . minions ) ) super ( ) . reveal ( )"]}
{"input": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b>", "output": "class SpiritWolf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spirit Wolf\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(2, 3, taunt=True)\u00a7", "input_tokens": ["Spirit", "Wolf", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Spirit", "Wolf", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spirit", "Wolf", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "taunt", "=", "True", ")"], "examples": ["class Feral Spirit ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feral Spirit ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) spirit_wolf . summon ( player , game , len ( player . minions ) ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"]}
{"input": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> Your weapon has +2 Attack.", "output": "class SpitefulSmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spiteful Smith\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6, enrage=[Aura(ChangeAttack(2), WeaponSelector())])\u00a7", "input_tokens": ["Spiteful", "Smith", "NAME_END", "4", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "Your", "weapon", "has", "+2", "Attack."], "output_tokens": ["class", "Spiteful", "Smith", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spiteful", "Smith", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "6", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Weapon", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Bloodsail Raider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Raider ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( ` base_attack ` , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Dread Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dread Corsair ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( ` attack ` , Weapon Selector ( ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Loatheb ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Loatheb ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )"]}
{"input": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class Squire(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Squire\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Squire", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Squire", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Squire", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Squirrel ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squirrel ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class Squirrel(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Squirrel\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Squirrel", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Squirrel", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Squirrel", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Squire ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Squire ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Puddlestomper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Puddlestomper ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) def create_minion ( self , player ) : return Minion ( 3 , 2 )"]}
{"input": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> Destroy a random enemy minion with 2 or less Attack.", "output": "class StampedingKodo(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stampeding Kodo\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Kill(), MinionSelector(AttackLessThanOrEqualTo(2), EnemyPlayer(), RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5)\u00a7", "input_tokens": ["Stampeding", "Kodo", "NAME_END", "3", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "a", "random", "enemy", "minion", "with", "2", "or", "less", "Attack."], "output_tokens": ["class", "Stampeding", "Kodo", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stampeding", "Kodo", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Attack", "Less", "Than", "Or", "Equal", "To", "(", "2", ")", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ")"], "examples": ["class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Sylvanas Windrunner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sylvanas Windrunner ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Glaivezooka ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Glaivezooka ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )"]}
{"input": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One -</b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "output": "class Starfall(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starfall\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) > 0\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([DamageAll(), DamageOne()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Starfall", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Choose", "One", "-", "</b>", "Deal", "$5", "damage", "to", "a", "minion;", "or", "$2", "damage", "to", "all", "enemy", "minions."], "output_tokens": ["class", "Starfall", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Starfall", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "0", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Damage", "All", "(", ")", ",", "Damage", "One", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )", "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Revenge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Revenge ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) if player . hero . health < = 12 : for minion in targets : minion . damage ( player . effective_spell_damage ( 3 ) , self ) else : for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )"]}
{"input": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Overload:</b> (1)", "output": "class StormforgedAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormforged Axe\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 3)\u00a7", "input_tokens": ["Stormforged", "Axe", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "2", "COST_END", "3", "DUR_END", "Weapon", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Overload", ":", "</b>", "(1)"], "output_tokens": ["class", "Stormforged", "Axe", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stormforged", "Axe", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "overload", "=", "1", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "3", ")"], "examples": ["class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "class Arathi Weaponsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arathi Weaponsmith ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"]}
{"input": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Stealth</b>", "output": "class StranglethornTiger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stranglethorn Tiger\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, stealth=True)\u00a7", "input_tokens": ["Stranglethorn", "Tiger", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Stranglethorn", "Tiger", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Stranglethorn", "Tiger", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ",", "stealth", "=", "True", ")"], "examples": ["class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Ravenholdt Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ravenholdt Assassin ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 7 , 5 , stealth = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )"]}
{"input": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "output": "class Sunwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sunwalker\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, divine_shield=True, taunt=True)\u00a7", "input_tokens": ["Sunwalker", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "<b>", "Divine", "Shield", "</b>"], "output_tokens": ["class", "Sunwalker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sunwalker", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ",", "divine_shield", "=", "True", ",", "taunt", "=", "True", ")"], "examples": ["class Argent Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Commander ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 2 , divine_shield = True , charge = True )", "class Shieldbearer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldbearer ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , taunt = True )", "class Gnomeregan Infantry ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomeregan Infantry ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , charge = True , taunt = True )", "class Silvermoon Guardian ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silvermoon Guardian ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , divine_shield = True )", "class Argent Horserider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Horserider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , charge = True , divine_shield = True )"]}
{"input": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "output": "class SwordOfJustice(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sword of Justice\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 5, effects=[Effect(MinionSummoned(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), TargetSelector())), Effect(MinionSummoned(), ActionTag(DecreaseDurability(), WeaponSelector()))])\u00a7", "input_tokens": ["Sword", "of", "Justice", "NAME_END", "1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "5", "DUR_END", "Weapon", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Whenever", "you", "summon", "a", "minion,", "give", "it", "+1/+1", "and", "this", "loses", "1", "Durability."], "output_tokens": ["class", "Sword", "Of", "Justice", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sword", "of", "Justice", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "1", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Minion", "Summoned", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Target", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Minion", "Summoned", "(", ")", ",", "Action", "Tag", "(", "Decrease", "Durability", "(", ")", ",", "Weapon", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Hobgoblin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hobgoblin ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )", "class Bolvar Fordragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bolvar Fordragon ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 1 , 7 )", "class Warsong Commander ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warsong Commander ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Argent Lance ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Argent Lance ` , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Joust ( Increase Durability ( ) ) , Self Selector ( ) ) ) def create_weapon ( self , player ) : return Weapon ( 2 , 2 )"]}
{"input": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Take control of a random enemy minion.", "output": "class SylvanasWindrunner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sylvanas Windrunner\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, deathrattle=Deathrattle(Steal(), MinionSelector(players=EnemyPlayer(), picker=RandomPicker())))\u00a7", "input_tokens": ["Sylvanas", "Windrunner", "NAME_END", "5", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Take", "control", "of", "a", "random", "enemy", "minion."], "output_tokens": ["class", "Sylvanas", "Windrunner", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sylvanas", "Windrunner", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ",", "deathrattle", "=", "Deathrattle", "(", "Steal", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"], "examples": ["class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Mind Control Tech ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Control Tech ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , condition = None , picker = Random Picker ( ) ) , Opponent Minion Count Is Greater Than ( 3 ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>. <b>Enrage:</b> +3 Attack", "output": "class TaurenWarrior(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tauren Warrior\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3), SelfSelector())])\u00a7", "input_tokens": ["Tauren", "Warrior", "NAME_END", "2", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Enrage", ":", "</b>", "+3", "Attack"], "output_tokens": ["class", "Tauren", "Warrior", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tauren", "Warrior", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "taunt", "=", "True", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "3", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Raging Worgen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Raging Worgen ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) , Aura ( Windfury ( ) , Self Selector ( ) ) ] )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Ironfur Grizzly ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironfur Grizzly ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , taunt = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )"]}
{"input": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion +3 Health.", "output": "class TempleEnforcer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Temple Enforcer\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Temple", "Enforcer", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "a", "friendly", "minion", "+3", "Health."], "output_tokens": ["class", "Temple", "Enforcer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Temple", "Enforcer", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Change", "Health", "(", "3", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"], "examples": ["class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Master Of Disguise ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master of Disguise ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )"]}
{"input": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a 3/3 Finkle Einhorn for your opponent.", "output": "class TheBeast(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"The Beast\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=Deathrattle(Summon(FinkleEinhorn()), PlayerSelector(EnemyPlayer())))\u00a7", "input_tokens": ["The", "Beast", "NAME_END", "9", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "3/3", "Finkle", "Einhorn", "for", "your", "opponent."], "output_tokens": ["class", "The", "Beast", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "The", "Beast", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Finkle", "Einhorn", "(", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"], "examples": ["class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy an enemy minion with <b>Taunt</b>.", "output": "class TheBlackKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"The Black Knight\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(HasStatus(\"taunt\"), EnemyPlayer(), UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["The", "Black", "Knight", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "an", "enemy", "minion", "with", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "The", "Black", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "The", "Black", "Knight", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Has", "Status", "(", "`", "taunt", "`", ")", ",", "Enemy", "Player", "(", ")", ",", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Rend Blackhand ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rend Blackhand ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( And ( Minion Is Not Target ( ) , Is Rarity ( CARD_RARITY . LEGENDARY ) ) , Both Player ( ) , User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 4 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Master Of Disguise ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master of Disguise ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )"]}
{"input": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "output": "class Thoughtsteal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thoughtsteal\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            new_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn)\u00a7            if new_card:\u00a7                new_card = copy.copy(new_card)\u00a7                new_card.drawn = True\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(new_card)\u00a7                    new_card.player = player\u00a7                    self.trigger(\"card_drawn\", new_card)\u00a7                else:\u00a7                    player.trigger(\"card_destroyed\", new_card)\u00a7", "input_tokens": ["Thoughtsteal", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Copy", "2", "cards", "from", "your", "opponent's", "deck", "and", "put", "them", "into", "your", "hand."], "output_tokens": ["class", "Thoughtsteal", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Thoughtsteal", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "new_card", "=", "game", ".", "random_draw", "(", "game", ".", "other_player", ".", "deck", ".", "cards", ",", "lambda", "c", ":", "not", "c", ".", "drawn", ")", "if", "new_card", ":", "new_card", "=", "copy", ".", "copy", "(", "new_card", ")", "new_card", ".", "drawn", "=", "True", "if", "len", "(", "player", ".", "hand", ")", "<", "10", ":", "player", ".", "hand", ".", "append", "(", "new_card", ")", "new_card", ".", "player", "=", "player", "self", ".", "trigger", "(", "`", "card_drawn", "`", ",", "new_card", ")", "else", ":", "player", ".", "trigger", "(", "`", "card_destroyed", "`", ",", "new_card", ")"], "examples": ["class Mind Vision ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Vision ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) if ( len ( game . other_player . hand ) > 0 ) : card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) player . hand . append ( card ) card . player = player", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Gang Up ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gang Up ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 3 ) : player . put_back ( type ( self . target . card ) ( ) )", "class Sense Demons ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sense Demons ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type = = MINION_TYPE . DEMON ) if demon_card : demon_card . drawn = True player . deck . left - = 1 if len ( player . hand ) < 10 : player . hand . append ( demon_card ) demon_card . player = player self . trigger ( ` card_drawn ` , demon_card ) else : player . trigger ( ` card_destroyed ` , demon_card ) else : if len ( player . hand ) < 10 : player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) player . hand [ - 1 ] . player = player self . trigger ( ` card_drawn ` , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )", "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )"]}
{"input": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Divine Shield</b>. <b>Taunt</b>. <b>Deathrattle:</b> Equip a 5/3 Ashbringer.", "output": "class TirionFordring(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tirion Fordring\", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, divine_shield=True, taunt=True, deathrattle=Deathrattle(Equip(Ashbringer()), PlayerSelector()))\u00a7", "input_tokens": ["Tirion", "Fordring", "NAME_END", "6", "ATK_END", "6", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Divine", "Shield", "</b>", ".", "<b>", "Taunt", "</b>", ".", "<b>", "Deathrattle", ":", "</b>", "Equip", "a", "5/3", "Ashbringer."], "output_tokens": ["class", "Tirion", "Fordring", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tirion", "Fordring", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ",", "divine_shield", "=", "True", ",", "taunt", "=", "True", ",", "deathrattle", "=", "Deathrattle", "(", "Equip", "(", "Ashbringer", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Dragon Consort ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Consort ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )"]}
{"input": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>. At the end of the turn, destroy this minion.", "output": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Treant", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Charge", "</b>", ".", "At", "the", "end", "of", "the", "turn,", "destroy", "this", "minion."], "output_tokens": ["class", "Treant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Treant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "_", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Patient Assassin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Patient Assassin ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )", "class Abusive Sergeant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Abusive Sergeant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Anima Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anima Golem ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )"]}
{"input": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Treant", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Treant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Treant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "_", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "output": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Treant", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Treant", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Treant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "_", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Slime ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slime ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 1 , 2 , taunt = True )", "class Stoneclaw Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneclaw Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , taunt = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Misha ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misha ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 4 , taunt = True )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Battlecry:</b> Gain +1 Health for each card in your hand.", "output": "class TwilightDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twilight Drake\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1)\u00a7", "input_tokens": ["Twilight", "Drake", "NAME_END", "4", "ATK_END", "1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "+1", "Health", "for", "each", "card", "in", "your", "hand."], "output_tokens": ["class", "Twilight", "Drake", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Twilight", "Drake", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Health", "(", "Count", "(", "Card", "Selector", "(", ")", ")", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "1", ")"], "examples": ["class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Coldlight Oracle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Bloodsail Corsair ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodsail Corsair ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Bloodmage Thalnos ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bloodmage Thalnos ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "output": "class TwistingNether(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twisting Nether\", 8, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            minion.die(self)\u00a7", "input_tokens": ["Twisting", "Nether", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Destroy", "all", "minions."], "output_tokens": ["class", "Twisting", "Nether", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Twisting", "Nether", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "minion", ".", "die", "(", "self", ")"], "examples": ["class Vanish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vanish ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in sorted ( targets , key = lambda m : m . born ) : minion . bounce ( )", "class Shadowflame ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowflame ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) shadowflame_damage = self . target . calculate_attack ( ) self . target . die ( self ) for minion in game . other_player . minions : minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )", "class Poison Seeds ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Poison Seeds ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import Poison Seeds Treant targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) for target in targets : target . die ( None ) game . check_delayed ( ) for target in targets : Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )", "class Assassinate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassinate ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )", "class Execute ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Execute ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )"]}
{"input": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b>Overload</b>, gain +1/+1.", "output": "class UnboundElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unbound Elemental\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeAttack(1)), SelfSelector())), Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])\u00a7", "input_tokens": ["Unbound", "Elemental", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "play", "a", "card", "with", "<b>", "Overload", "</b>", ",", "gain", "+1/+1."], "output_tokens": ["class", "Unbound", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Unbound", "Elemental", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Card", "Played", "(", "Has", "Overload", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Card", "Played", "(", "Has", "Overload", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Health", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Questing Adventurer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Questing Adventurer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Edwin Van Cleef ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Edwin Van Cleef ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Attribute ( ` cards_played ` , Player Selector ( ) ) , 2 ) ) , Buff ( Change Health ( Attribute ( ` cards_played ` , Player Selector ( ) ) , 2 ) ) ] ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 2 )", "class Secretkeeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Secretkeeper ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )"]}
{"input": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b>Charge</b>.", "output": "class UnleashTheHounds(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unleash the Hounds\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for target in hearthbreaker.targeting.find_enemy_minion_spell_target(player.game, lambda x: True):\u00a7            hound = hearthbreaker.cards.minions.hunter.Hound()\u00a7            hound.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1 and len(player.minions) < 7\u00a7", "input_tokens": ["Unleash", "the", "Hounds", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "For", "each", "enemy", "minion,", "summon", "a", "1/1", "Hound", "with", "<b>", "Charge", "</b>", "."], "output_tokens": ["class", "Unleash", "The", "Hounds", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Unleash", "the", "Hounds", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "target", "in", "hearthbreaker", ".", "targeting", ".", "find_enemy_minion_spell_target", "(", "player", ".", "game", ",", "lambda", "x", ":", "True", ")", ":", "hound", "=", "hearthbreaker", ".", "cards", ".", "minions", ".", "hunter", ".", "Hound", "(", ")", "hound", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "1", "and", "len", "(", "player", ".", "minions", ")", "<", "7"], "examples": ["class Charge ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Charge ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . add_buff ( Buff ( _Charge ( ) ) )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Arcane Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Blast ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 + player . spell_damage ) , self )", "class Velens Chosen ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Velen ` s Chosen ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 2 ) self . target . increase_health ( 4 ) self . target . add_buff ( Buff ( Spell Damage ( 1 ) ) )", "class Explosive Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "output": "class VentureCoMercenary(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Venture Co. Mercenary\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, auras=[Aura(ManaChange(3), CardSelector(condition=IsMinion()))])\u00a7", "input_tokens": ["Venture", "Co.", "Mercenary", "NAME_END", "7", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Your", "minions", "cost", "(3)", "more."], "output_tokens": ["class", "Venture", "Co", "Mercenary", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Venture", "Co", ".", "Mercenary", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "6", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "3", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Minion", "(", ")", ")", ")", "]", ")"], "examples": ["class Stormwind Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Champion ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Foe Reaper4000 ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Foe Reaper 4000 ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( ` attack ` , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Mogor The Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogor the Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )"]}
{"input": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class VioletApprentice(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Violet Apprentice\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Violet", "Apprentice", "NAME_END", "1", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Violet", "Apprentice", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Violet", "Apprentice", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"]}
{"input": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "output": "class VioletTeacher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Violet Teacher\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellCast(), ActionTag(Summon(VioletApprentice()), PlayerSelector()))])\u00a7", "input_tokens": ["Violet", "Teacher", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "summon", "a", "1/1", "Violet", "Apprentice."], "output_tokens": ["class", "Violet", "Teacher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Violet", "Teacher", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Violet", "Apprentice", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Stonesplinter Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonesplinter Trogg ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Troggzor The Earthinator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Troggzor the Earthinator ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )", "class Mana Addict ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Addict ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )"]}
{"input": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Battlecry:</b> Destroy the minions on either side of this minion and gain their Attack and Health.", "output": "class VoidTerror(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Void Terror\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry( Give([Buff(ChangeHealth(Attribute(\"health\", MinionSelector(Adjacent())))), Buff(ChangeAttack(Attribute(\"attack\", MinionSelector(Adjacent()))))]), SelfSelector()), Battlecry(Kill(), MinionSelector(Adjacent()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Void", "Terror", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Destroy", "the", "minions", "on", "either", "side", "of", "this", "minion", "and", "gain", "their", "Attack", "and", "Health."], "output_tokens": ["class", "Void", "Terror", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Void", "Terror", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "Attribute", "(", "`", "health", "`", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "Attribute", "(", "`", "attack", "`", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Big Game Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Big Game Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )", "class Stampeding Kodo ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stampeding Kodo ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Shrinkmeister ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shrinkmeister ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Temple Enforcer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Temple Enforcer ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"]}
{"input": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "output": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Whelp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "output": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Whelp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "output": "class WildPyromancer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wild Pyromancer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), MinionSelector(condition=None, players=BothPlayer())))])\u00a7", "input_tokens": ["Wild", "Pyromancer", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "After", "you", "cast", "a", "spell,", "deal", "1", "damage", "to", "ALL", "minions."], "output_tokens": ["class", "Wild", "Pyromancer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wild", "Pyromancer", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Card", "Used", "(", "Is", "Spell", "(", ")", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Minion", "Selector", "(", "condition", "=", "None", ",", "players", "=", "Both", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )"]}
{"input": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "output": "class WindfuryHarpy(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windfury Harpy\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, windfury=True)\u00a7", "input_tokens": ["Windfury", "Harpy", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Windfury", "Harpy", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Windfury", "Harpy", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ",", "windfury", "=", "True", ")"], "examples": ["class Young Dragonhawk ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Dragonhawk ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , windfury = True )", "class Gilblin Stalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gilblin Stalker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , stealth = True )", "class Fen Creeper ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fen Creeper ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 6 , taunt = True )", "class Wolfrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wolfrider ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 1 , charge = True )", "class Whirling Zapomatic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirling Zap - o - matic ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , p ) : return Minion ( 3 , 2 , windfury = True )"]}
{"input": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "output": "class WorthlessImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Worthless Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Worthless", "Imp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "<i>You", "are", "out", "of", "demons!", "At", "least", "there", "are", "always", "imps...</i>"], "output_tokens": ["class", "Worthless", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Worthless", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Flame Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Blood Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Imp ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Voidwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidwalker ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , taunt = True )", "class Demonfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonfire ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 2 ) self . target . increase_health ( 2 ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "output": "class Wrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        class WrathOne(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Wrath 1 Damage\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.damage(player.effective_spell_damage(1), wrath)\u00a7                player.draw()\u00a7\u00a7        class WrathThree(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Wrath 3 Damage\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.damage(player.effective_spell_damage(3), wrath)\u00a7\u00a7        super().use(player, game)\u00a7        option = game.current_player.agent.choose_option([WrathOne(), WrathThree()], player)\u00a7        target = self.target\u00a7        wrath = self\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Wrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Deal", "$3", "damage", "to", "a", "minion;", "or", "$1", "damage", "and", "draw", "a", "card."], "output_tokens": ["class", "Wrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "class", "Wrath", "One", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "1", "Damage", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "wrath", ")", "player", ".", "draw", "(", ")", "class", "Wrath", "Three", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wrath", "3", "Damage", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "wrath", ")", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "option", "=", "game", ".", "current_player", ".", "agent", ".", "choose_option", "(", "[", "Wrath", "One", "(", ")", ",", "Wrath", "Three", "(", ")", "]", ",", "player", ")", "target", "=", "self", ".", "target", "wrath", "=", "self", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "class Quick Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quick Shot ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( 3 , self ) if len ( player . hand ) = = 0 : player . draw ( )", "class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Fan Of Knives ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fan of Knives ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Blessing Of Wisdom ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessing of Wisdom ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player is game . players [ 0 ] : draw_player = Player One ( ) else : draw_player = Player Two ( ) self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )"]}
{"input": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Windfury</b>", "output": "class YoungDragonhawk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Young Dragonhawk\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, windfury=True)\u00a7", "input_tokens": ["Young", "Dragonhawk", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Young", "Dragonhawk", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Young", "Dragonhawk", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "windfury", "=", "True", ")"], "examples": ["class Frog ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frog ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 0 , 1 , taunt = True )", "class Stonetusk Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stonetusk Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Goldshire Footman ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goldshire Footman ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , taunt = True )", "class Angry Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Angry Chicken ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )", "class Windfury Harpy ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windfury Harpy ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , windfury = True )"]}
{"input": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "output": "class YoungPriestess(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Young Priestess\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\u00a7", "input_tokens": ["Young", "Priestess", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "give", "another", "random", "friendly", "minion", "+1", "Health."], "output_tokens": ["class", "Young", "Priestess", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Young", "Priestess", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Health", "(", "1", ")", ")", ",", "Minion", "Selector", "(", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Master Swordsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Master Swordsmith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Stoneskin Gargoyle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stoneskin Gargoyle ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Dark Cultist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dark Cultist ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Healing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Healing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )"]}
{"input": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Return a friendly minion from the battlefield to your hand.", "output": "class YouthfulBrewmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Youthful Brewmaster\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Youthful", "Brewmaster", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Return", "a", "friendly", "minion", "from", "the", "battlefield", "to", "your", "hand."], "output_tokens": ["class", "Youthful", "Brewmaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Youthful", "Brewmaster", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Bounce", "(", ")", ",", "Minion", "Selector", "(", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Ancient Brewmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Brewmaster ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Anubar Ambusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` ar Ambusher ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )", "class Faceless Manipulator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Faceless Manipulator ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Shattered Sun Cleric ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shattered Sun Cleric ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "output": "class Ysera(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ysera\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        dream_card_list = [EmeraldDrake(), LaughingSister(), Nightmare(), YseraAwakens(), Dream()]\u00a7        return Minion(4, 12, effects=[Effect(TurnEnded(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=dream_card_list)), PlayerSelector()))])\u00a7", "input_tokens": ["Ysera", "NAME_END", "4", "ATK_END", "12", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "add", "a", "Dream", "Card", "to", "your", "hand."], "output_tokens": ["class", "Ysera", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ysera", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "dream_card_list", "=", "[", "Emerald", "Drake", "(", ")", ",", "Laughing", "Sister", "(", ")", ",", "Nightmare", "(", ")", ",", "Ysera", "Awakens", "(", ")", ",", "Dream", "(", ")", "]", "return", "Minion", "(", "4", ",", "12", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "dream_card_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Nat Pagle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nat Pagle ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )", "class Emperor Thaurissan ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emperor Thaurissan ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )", "class Vitality Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vitality Totem ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )", "class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Bite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bite ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 ) player . hero . increase_armor ( 4 )"]}
{"input": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "output": "class YseraAwakens(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ysera Awakens\", 2, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.other_player.minions)\u00a7        targets.extend(player.game.current_player.minions)\u00a7        targets.append(player.game.other_player.hero)\u00a7        targets.append(player.game.current_player.hero)\u00a7        targets = filter(lambda m: not m.is_minion() or m.card.name != \"Ysera\", targets)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(5), self)\u00a7", "input_tokens": ["Ysera", "Awakens", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Dream", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Deal", "$5", "damage", "to", "all", "characters", "except", "Ysera."], "output_tokens": ["class", "Ysera", "Awakens", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ysera", "Awakens", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DREAM", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "player", ".", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "player", ".", "game", ".", "current_player", ".", "minions", ")", "targets", ".", "append", "(", "player", ".", "game", ".", "other_player", ".", "hero", ")", "targets", ".", "append", "(", "player", ".", "game", ".", "current_player", ".", "hero", ")", "targets", "=", "filter", "(", "lambda", "m", ":", "not", "m", ".", "is_minion", "(", ")", "or", "m", ".", "card", ".", "name", "!", "=", "`", "Ysera", "`", ",", "targets", ")", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "5", ")", ",", "self", ")"], "examples": ["class Mind Blast ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mind Blast ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Frostbolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostbolt ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Holy Nova ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Nova ` , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in player . minions : minion . heal ( player . effective_heal_power ( 2 ) , self )", "class Holy Smite ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Smite ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )"]}
{"input": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "output": "class AxeFlinger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Axe Flinger\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, effects=[Effect(Damaged(), ActionTag(Damage(2), HeroSelector(EnemyPlayer())))])\u00a7", "input_tokens": ["Axe", "Flinger", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "deal", "2", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Axe", "Flinger", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Axe", "Flinger", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "2", ")", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Fel Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Cannon ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +1/+1.", "output": "class BlackwingTechnician(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blackwing Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Blackwing", "Technician", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you're", "holding", "a", "Dragon,", "gain", "+1/+1."], "output_tokens": ["class", "Blackwing", "Technician", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blackwing", "Technician", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"], "examples": ["class Alexstraszas Champion ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` s Champion ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Silver Hand Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silver Hand Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )", "class Hungry Crab ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Crab ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 1 , 2 )", "class Razorfen Hunter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Razorfen Hunter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"]}
{"input": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "output": "class Chromaggus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chromaggus\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 8, effects=[Effect(CardDrawn(), [ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_DRAWN, make_copy=True)), PlayerSelector())])])\u00a7", "input_tokens": ["Chromaggus", "NAME_END", "6", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "Whenever", "you", "draw", "a", "card,", "put", "another", "copy", "into", "your", "hand."], "output_tokens": ["class", "Chromaggus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Chromaggus", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "8", ",", "effects", "=", "[", "Effect", "(", "Card", "Drawn", "(", ")", ",", "[", "Action", "Tag", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LAST_DRAWN", ",", "make_copy", "=", "True", ")", ")", ",", "Player", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Nat Pagle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nat Pagle ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )", "class Starving Buzzard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starving Buzzard ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )", "class Fel Reaver ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fel Reaver ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )", "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "class Clockwork Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Clockwork Giant ` , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )"]}
{"input": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> If your hand is empty, gain +3/+3.", "output": "class CoreRager(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Core Rager\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0)))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7", "input_tokens": ["Core", "Rager", "NAME_END", "4", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "your", "hand", "is", "empty,", "gain", "+3/+3."], "output_tokens": ["class", "Core", "Rager", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Core", "Rager", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "3", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "3", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Not", "(", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "4", ")"], "examples": ["class Ethereal Arcanist ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ethereal Arcanist ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Captain Greenskin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Captain Greenskin ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 2 damage to all undamaged enemy minions.", "output": "class DarkIronSkulker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Iron Skulker\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(condition=Not(IsDamaged()), players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Dark", "Iron", "Skulker", "NAME_END", "4", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "2", "damage", "to", "all", "undamaged", "enemy", "minions."], "output_tokens": ["class", "Dark", "Iron", "Skulker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dark", "Iron", "Skulker", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "2", ")", ",", "Minion", "Selector", "(", "condition", "=", "Not", "(", "Is", "Damaged", "(", ")", ")", ",", "players", "=", "Enemy", "Player", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Bomb Lobber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bomb Lobber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Unstable Ghoul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Unstable Ghoul ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Explosive Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Sheep ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )"]}
{"input": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "output": "class Demonwrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonwrath\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            if minion.card.minion_type is not MINION_TYPE.DEMON:\u00a7                minion.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Demonwrath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warlock", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2", "damage", "to", "all", "non-Demon", "minions."], "output_tokens": ["class", "Demonwrath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Demonwrath", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "for", "minion", "in", "targets", ":", "if", "minion", ".", "card", ".", "minion_type", "is", "not", "MINION_TYPE", ".", "DEMON", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Demonheart ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonheart ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( player . game . current_player . minions ) if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : self . target . change_attack ( 5 ) self . target . increase_health ( 5 ) else : self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Arcane Explosion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Explosion ` , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Battlecry:</b> The next Dragon you play costs (2) less.", "output": "class DragonConsort(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon Consort\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-3), CardSelector(condition=IsType(MINION_TYPE.DRAGON)), CardPlayed(IsType(MINION_TYPE.DRAGON)), False)]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7", "input_tokens": ["Dragon", "Consort", "NAME_END", "5", "ATK_END", "5", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Paladin", "PLAYER_CLS_END", "Dragon", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "The", "next", "Dragon", "you", "play", "costs", "(2)", "less."], "output_tokens": ["class", "Dragon", "Consort", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragon", "Consort", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Give", "Aura", "(", "[", "Aura", "Until", "(", "Mana", "Change", "(", "-", "3", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ",", "Card", "Played", "(", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ",", "False", ")", "]", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ")"], "examples": ["class Quartermaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Quartermaster ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( ` Silver Hand Recruit ` ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Onyxia ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Onyxia ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Tirion Fordring ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tirion Fordring ` , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player Selector ( ) ) )"]}
{"input": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "output": "class DragonEgg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon Egg\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(Damaged(), ActionTag(Summon(BlackWhelp()), PlayerSelector()))])\u00a7", "input_tokens": ["Dragon", "Egg", "NAME_END", "0", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "summon", "a", "2/1", "Whelp."], "output_tokens": ["class", "Dragon", "Egg", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragon", "Egg", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Black", "Whelp", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )", "class Frothing Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frothing Berserker ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "output": "class DragonsBreath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon's Breath\", 5, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7", "input_tokens": ["Dragon's", "Breath", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$4", "damage.", "Costs", "(1)", "less", "for", "each", "minion", "that", "died", "this", "turn."], "output_tokens": ["class", "Dragons", "Breath", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Dragon", "`", "s", "Breath", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Dead", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "4", ")", ",", "self", ")"], "examples": ["class Flamestrike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flamestrike ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 4 ) , self )", "class Cobra Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cobra Shot ` , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Shadow Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Bolt ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Rampage ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Rampage ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health ! = target . calculate_max_health ( ) and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 3 ) self . target . increase_health ( 3 )"]}
{"input": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Druid", "of", "the", "Flame", "NAME_END", "5", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Druid", "Of", "The", "Flame", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Flame", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Flame", "Cat", "Form", "(", ")", ",", "Transform", "(", "Flame", "Cat", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Flame", "Bird", "Form", "(", ")", ",", "Transform", "(", "Flame", "Bird", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Transform into a 5/2 minion; or a 2/5 minion.", "output": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Druid", "of", "the", "Flame", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Transform", "into", "a", "5/2", "minion;", "or", "a", "2/5", "minion."], "output_tokens": ["class", "Druid", "Of", "The", "Flame", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Flame", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Flame", "Cat", "Form", "(", ")", ",", "Transform", "(", "Flame", "Cat", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Flame", "Bird", "Form", "(", ")", ",", "Transform", "(", "Flame", "Bird", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Keeper Of The Grove ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Keeper of the Grove ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Starfall ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfall ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 def use ( self , player , game ) : super ( ) . use ( player , game ) option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) option . use ( player , game )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : class Wrath One ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 1 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 1 ) , wrath ) player . draw ( ) class Wrath Three ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath 3 Damage ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : target . damage ( player . effective_spell_damage ( 3 ) , wrath ) super ( ) . use ( player , game ) option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) target = self . target wrath = self option . use ( player , game )"]}
{"input": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "output": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7", "input_tokens": ["Druid", "of", "the", "Flame", "NAME_END", "2", "ATK_END", "5", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Beast", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Druid", "Of", "The", "Flame", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Druid", "of", "the", "Flame", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "choices", "=", "[", "Choice", "(", "Flame", "Cat", "Form", "(", ")", ",", "Transform", "(", "Flame", "Cat", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Flame", "Bird", "Form", "(", ")", ",", "Transform", "(", "Flame", "Bird", "(", ")", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ")"], "examples": ["class Druid Of The Fang ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Fang ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Panther ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Panther ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , _ ) : return Minion ( 3 , 2 , MINION_TYPE . BEAST )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Druid Of The Claw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Druid of the Claw ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 4 , 4 )", "class Lost Tallstrider ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lost Tallstrider ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"]}
{"input": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "output": "class EmperorThaurissan(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emperor Thaurissan\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, effects=[Effect(TurnEnded(), [ActionTag(Give(Buff(ManaChange(-1))), CardSelector())])])\u00a7", "input_tokens": ["Emperor", "Thaurissan", "NAME_END", "5", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "reduce", "the", "Cost", "of", "cards", "in", "your", "hand", "by", "(1)."], "output_tokens": ["class", "Emperor", "Thaurissan", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Emperor", "Thaurissan", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "[", "Action", "Tag", "(", "Give", "(", "Buff", "(", "Mana", "Change", "(", "-", "1", ")", ")", ")", ",", "Card", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Hogger ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hogger ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )", "class Nat Pagle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nat Pagle ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )", "class Ysera ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ysera ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )", "class Harrison Jones ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Harrison Jones ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( ` durability ` , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Shade Of Naxxramas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shade of Naxxramas ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )"]}
{"input": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain 1-4 Attack. <b>Overload:</b> (1)", "output": "class FireguardDestroyer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fireguard Destroyer\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1, battlecry=Battlecry(Give(Buff(ChangeAttack(RandomAmount(1, 4)))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6)\u00a7", "input_tokens": ["Fireguard", "Destroyer", "NAME_END", "3", "ATK_END", "6", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Gain", "1-4", "Attack.", "<b>", "Overload", ":", "</b>", "(1)"], "output_tokens": ["class", "Fireguard", "Destroyer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fireguard", "Destroyer", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "overload", "=", "1", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Attack", "(", "Random", "Amount", "(", "1", ",", "4", ")", ")", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "6", ")"], "examples": ["class Shieldmaiden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shieldmaiden ` , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Dust Devil ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dust Devil ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) def create_minion ( self , player ) : return Minion ( 3 , 1 , windfury = True )", "class Tauren Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tauren Warrior ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Spiteful Smith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spiteful Smith ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )", "class Houndmaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Houndmaster ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "output": "class Flamewaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamewaker\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))])\u00a7", "input_tokens": ["Flamewaker", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "After", "you", "cast", "a", "spell,", "deal", "2", "damage", "randomly", "split", "among", "all", "enemies."], "output_tokens": ["class", "Flamewaker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flamewaker", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Card", "Used", "(", "Is", "Spell", "(", ")", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "None", ",", "Enemy", "Player", "(", ")", ",", "Random", "Picker", "(", "2", ")", ")", ")", ")", "]", ")"], "examples": ["class Arcane Missiles ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Missiles ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero ) target = game . random_choice ( targets ) target . damage ( 1 , self )", "class Demolisher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demolisher ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Goblin Blastmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Blastmage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Wild Pyromancer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wild Pyromancer ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )", "class Ships Cannon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ship ` s Cannon ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )"]}
{"input": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "output": "class GangUp(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gang Up\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(3):\u00a7            player.put_back(type(self.target.card)())\u00a7", "input_tokens": ["Gang", "Up", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Choose", "a", "minion.", "Shuffle", "3", "copies", "of", "it", "into", "your", "deck."], "output_tokens": ["class", "Gang", "Up", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gang", "Up", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "i", "in", "range", "(", "3", ")", ":", "player", ".", "put_back", "(", "type", "(", "self", ".", "target", ".", "card", ")", "(", ")", ")"], "examples": ["class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7", "class Recycle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Recycle ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . opponent . deck . put_back ( self . target ) self . target . remove_from_board ( )", "class Resurrect ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Resurrect ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : from hearthbreaker . engine import card_lookup super ( ) . use ( player , game ) if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : card_name = game . random_choice ( player . graveyard ) card = card_lookup ( card_name ) card . summon ( player , game , len ( player . minions ) )", "class Shadowstep ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadowstep ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( ) self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )", "class Thoughtsteal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thoughtsteal ` , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for i in range ( 0 , 2 ) : new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) if new_card : new_card = copy . copy ( new_card ) new_card . drawn = True if len ( player . hand ) < 10 : player . hand . append ( new_card ) new_card . player = player self . trigger ( ` card_drawn ` , new_card ) else : player . trigger ( ` card_destroyed ` , new_card )"]}
{"input": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "output": "class GrimPatron(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grim Patron\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, effects=[Effect(Damaged(), [ActionTag(Summon(GrimPatron()), PlayerSelector(), GreaterThan(Attribute(\"health\", SelfSelector()), value=0))])])\u00a7", "input_tokens": ["Grim", "Patron", "NAME_END", "3", "ATK_END", "3", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Whenever", "this", "minion", "survives", "damage,", "summon", "another", "Grim", "Patron."], "output_tokens": ["class", "Grim", "Patron", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Grim", "Patron", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "[", "Action", "Tag", "(", "Summon", "(", "Grim", "Patron", "(", ")", ")", ",", "Player", "Selector", "(", ")", ",", "Greater", "Than", "(", "Attribute", "(", "`", "health", "`", ",", "Self", "Selector", "(", ")", ")", ",", "value", "=", "0", ")", ")", "]", ")", "]", ")"], "examples": ["class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Imp Gang Boss ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Gang Boss ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Mekgineer Thermaplugg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mekgineer Thermaplugg ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 9 , 7 , effects = [ Effect ( Minion Died ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Leper Gnome ( ) ) , Player Selector ( ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )"]}
{"input": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "output": "class ImpGangBoss(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp Gang Boss\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(Damaged(), ActionTag(Summon(Imp()), PlayerSelector()))])\u00a7", "input_tokens": ["Imp", "Gang", "Boss", "NAME_END", "2", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Common", "RARITY_END", "Whenever", "this", "minion", "takes", "damage,", "summon", "a", "1/1", "Imp."], "output_tokens": ["class", "Imp", "Gang", "Boss", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "Gang", "Boss", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Damaged", "(", ")", ",", "Action", "Tag", "(", "Summon", "(", "Imp", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Imp Master ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp Master ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )", "class Dragon Egg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon Egg ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )", "class Armorsmith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Armorsmith ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )", "class Gurubashi Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gurubashi Berserker ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 7 , effects = [ Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )", "class Grim Patron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Grim Patron ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( ` health ` , Self Selector ( ) ) , value = 0 ) ) ] ) ] )"]}
{"input": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b>Overloaded</b> Mana Crystals.", "output": "class LavaShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lava Shock\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(2, self)\u00a7        player.upcoming_overload = 0\u00a7        player.mana += player.current_overload\u00a7        player.current_overload = 0\u00a7", "input_tokens": ["Lava", "Shock", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$2", "damage.", "NL", "Unlock", "your", "<b>", "Overloaded", "</b>", "Mana", "Crystals."], "output_tokens": ["class", "Lava", "Shock", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lava", "Shock", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "2", ",", "self", ")", "player", ".", "upcoming_overload", "=", "0", "player", ".", "mana", "+", "=", "player", ".", "current_overload", "player", ".", "current_overload", "=", "0"], "examples": ["class Arcane Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Shot ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Lava Burst ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lava Burst ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self )", "class Lightning Bolt ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Bolt ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )", "class Drain Life ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drain Life ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )", "class Darkbomb ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkbomb ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )"]}
{"input": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Replace your hero with Ragnaros, the Firelord.", "output": "class MajordomoExecutus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Majordomo Executus\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=[Deathrattle(Transform(Ragnaros()), HeroSelector())])\u00a7", "input_tokens": ["Majordomo", "Executus", "NAME_END", "9", "ATK_END", "7", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Replace", "your", "hero", "with", "Ragnaros,", "the", "Firelord."], "output_tokens": ["class", "Majordomo", "Executus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Majordomo", "Executus", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "deathrattle", "=", "[", "Deathrattle", "(", "Transform", "(", "Ragnaros", "(", ")", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Lord Jaraxxus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lord Jaraxxus ` , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace Hero With Minion ( Jaraxxus ( ) ) , Hero Selector ( ) ) , Battlecry ( Remove ( ) , Self Selector ( ) ) , Battlecry ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 15 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Anubarak ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anub ` arak ` , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )", "class Pit Lord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pit Lord ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )", "class Antique Healbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Antique Healbot ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )"]}
{"input": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "output": "class Nefarian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nefarian\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(AddCard(CardQuery(conditions=[ IsClass(Attribute(\"character_class\", HeroSelector(EnemyPlayer()))), IsSpell() ]), 2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7", "input_tokens": ["Nefarian", "NAME_END", "8", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Add", "2", "random", "spells", "to", "your", "hand", "<i>(from", "your", "opponent's", "class)</i>."], "output_tokens": ["class", "Nefarian", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nefarian", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Class", "(", "Attribute", "(", "`", "character_class", "`", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")", ",", "Is", "Spell", "(", ")", "]", ")", ",", "2", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ")"], "examples": ["class Neptulon ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , \\ Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , \\ Puddlestomper murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] super ( ) . __init__ ( ` Neptulon ` , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class King Mukla ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` King Mukla ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 5 )", "class Gazlowe ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gazlowe ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )", "class Leeroy Jenkins ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Leeroy Jenkins ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 , charge = True )", "class Kezan Mystic ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kezan Mystic ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"]}
{"input": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "output": "class QuickShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Quick Shot\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(3, self)\u00a7        if len(player.hand) == 0:\u00a7            player.draw()\u00a7", "input_tokens": ["Quick", "Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3", "damage.", "NL", "If", "your", "hand", "is", "empty,", "draw", "a", "card."], "output_tokens": ["class", "Quick", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Quick", "Shot", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "3", ",", "self", ")", "if", "len", "(", "player", ".", "hand", ")", "=", "=", "0", ":", "player", ".", "draw", "(", ")"], "examples": ["class Shiv ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shiv ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) player . draw ( )", "class Starfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Starfire ` , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 5 ) , self ) player . draw ( )", "class Hammer Of Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hammer of Wrath ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self ) player . draw ( )", "class Soulfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Soulfire ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self ) player . discard ( )", "class Call Pet ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Call Pet ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : def reduce_cost ( card ) : if card . is_minion ( ) and card . minion_type = = MINION_TYPE . BEAST : card . add_buff ( Buff ( Mana Change ( - 4 ) ) ) super ( ) . use ( player , game ) player . bind_once ( ` card_drawn ` , reduce_cost ) player . draw ( )"]}
{"input": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> If you're holding a Dragon, destroy a <b>Legendary</b> minion.", "output": "class RendBlackhand(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rend Blackhand\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(), IsRarity(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 4)\u00a7", "input_tokens": ["Rend", "Blackhand", "NAME_END", "8", "ATK_END", "4", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you're", "holding", "a", "Dragon,", "destroy", "a", "<b>", "Legendary", "</b>", "minion."], "output_tokens": ["class", "Rend", "Blackhand", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Rend", "Blackhand", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "(", "Battlecry", "(", "Kill", "(", ")", ",", "Minion", "Selector", "(", "And", "(", "Minion", "Is", "Not", "Target", "(", ")", ",", "Is", "Rarity", "(", "CARD_RARITY", ".", "LEGENDARY", ")", ")", ",", "Both", "Player", "(", ")", ",", "User", "Picker", "(", ")", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "4", ")"], "examples": ["class The Black Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` The Black Knight ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( ` taunt ` ) , Enemy Player ( ) , User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Deathwing ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathwing ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 12 , 12 )", "class Ironbeak Owl ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbeak Owl ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Windspeaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Windspeaker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Blackwing Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"]}
{"input": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "output": "class Resurrect(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Resurrect\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        from hearthbreaker.engine import card_lookup\u00a7        super().use(player, game)\u00a7        if len(player.graveyard) > 0 and len(player.minions) < 7:\u00a7            card_name = game.random_choice(player.graveyard)\u00a7            card = card_lookup(card_name)\u00a7            card.summon(player, game, len(player.minions))\u00a7", "input_tokens": ["Resurrect", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Summon", "a", "random", "friendly", "minion", "that", "died", "this", "game."], "output_tokens": ["class", "Resurrect", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Resurrect", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "from", "hearthbreaker", ".", "engine", "import", "card_lookup", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "len", "(", "player", ".", "graveyard", ")", ">", "0", "and", "len", "(", "player", ".", "minions", ")", "<", "7", ":", "card_name", "=", "game", ".", "random_choice", "(", "player", ".", "graveyard", ")", "card", "=", "card_lookup", "(", "card_name", ")", "card", ".", "summon", "(", "player", ",", "game", ",", "len", "(", "player", ".", "minions", ")", ")"], "examples": ["class Time Rewinder ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Time Rewinder ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Young Priestess ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Young Priestess ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )", "class Deadly Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Shot ` , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) target = game . random_choice ( targets ) target . die ( None ) game . check_delayed ( ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1", "class Sap ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sap ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . bounce ( )", "class Mindgames ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mindgames ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) if not minion_card : minion_card = Shadow Of Nothing ( ) else : minion_card = copy . copy ( minion_card ) minion_card . drawn = True minion_card . summon ( player , game , 0 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7"]}
{"input": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "output": "class Revenge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Revenge\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        if player.hero.health <= 12:\u00a7            for minion in targets:\u00a7                minion.damage(player.effective_spell_damage(3), self)\u00a7        else:\u00a7            for minion in targets:\u00a7                minion.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Revenge", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Deal", "$1", "damage", "to", "all", "minions.", "If", "you", "have", "12", "or", "less", "Health,", "deal", "$3", "damage", "instead."], "output_tokens": ["class", "Revenge", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Revenge", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "targets", ".", "extend", "(", "game", ".", "current_player", ".", "minions", ")", "if", "player", ".", "hero", ".", "health", "<", "=", "12", ":", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "else", ":", "for", "minion", "in", "targets", ":", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Mortal Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Strike ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . hero . health < = 12 : self . target . damage ( player . effective_spell_damage ( 6 ) , self ) else : self . target . damage ( player . effective_spell_damage ( 4 ) , self )", "class Whirlwind ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Whirlwind ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( 1 ) , self )", "class Lightning Storm ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightning Storm ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )", "class Demonwrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Demonwrath ` , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : if minion . card . minion_type is not MINION_TYPE . DEMON : minion . damage ( player . effective_spell_damage ( 2 ) , self )", "class Blizzard ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blizzard ` , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) for minion in game . other_player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )"]}
{"input": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "output": "class VolcanicDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Volcanic Drake\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4)\u00a7", "input_tokens": ["Volcanic", "Drake", "NAME_END", "6", "ATK_END", "4", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "Costs", "(1)", "less", "for", "each", "minion", "that", "died", "this", "turn."], "output_tokens": ["class", "Volcanic", "Drake", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Volcanic", "Drake", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Dead", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "4", ")"], "examples": ["class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Volcanic Lumberer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Lumberer ` , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )", "class Pint Sized Summoner ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Pint - Sized Summoner ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give Aura ( Aura Until ( Mana Change ( - 1 ) , Card Selector ( condition = Is Minion ( ) ) , Minion Placed ( ) ) ) , Player Selector ( ) ) ) ] )", "class Venture Co Mercenary ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Venture Co . Mercenary ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 6 , auras = [ Aura ( Mana Change ( 3 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )", "class Dragons Breath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragon ` s Breath ` , 5 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 4 ) , self )"]}
{"input": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL Costs (1) less for each minion that died this turn.", "output": "class VolcanicLumberer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Volcanic Lumberer\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 8, taunt=True)\u00a7", "input_tokens": ["Volcanic", "Lumberer", "NAME_END", "7", "ATK_END", "8", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt", "</b>", "NL", "Costs", "(1)", "less", "for", "each", "minion", "that", "died", "this", "turn."], "output_tokens": ["class", "Volcanic", "Lumberer", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Volcanic", "Lumberer", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ",", "buffs", "=", "[", "Buff", "(", "Mana", "Change", "(", "Count", "(", "Dead", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ")", ")", ",", "-", "1", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "8", ",", "taunt", "=", "True", ")"], "examples": ["class Volcanic Drake ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Volcanic Drake ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 6 , 4 )", "class Sea Giant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sea Giant ` , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) def create_minion ( self , player ) : return Minion ( 8 , 8 )", "class Kel Thuzad ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kel ` Thuzad ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )", "class Blood Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blood Knight ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Ancient Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ancient Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )"]}
{"input": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "output": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Whelp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "output": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Whelp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Violet Apprentice ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Violet Apprentice ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )"]}
{"input": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "output": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Whelp", "NAME_END", "2", "ATK_END", "2", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Chicken ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Chicken ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )", "class Feugen ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Feugen ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Treant ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Treant ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , _ ) : return Minion ( 2 , 2 )", "class Sheep ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sheep ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) def create_minion ( self , p ) : return Minion ( 1 , 1 )"]}
