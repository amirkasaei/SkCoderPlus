{"input": "Assassin's Blade NAME_END 3 ATK_END -1 DEF_END 5 COST_END 4 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class AssassinsBlade(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 4)\u00a7", "input_tokens": ["Assassin's", "Blade", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "5", "COST_END", "4", "DUR_END", "Weapon", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "Assassins", "Blade", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Assassin", "`", "s", "Blade", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "4", ")"], "examples": ["class Boulderfist Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boulderfist Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 6 , 7 )", "class War Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` War Golem ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"]}
{"input": "Boulderfist Ogre NAME_END 6 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "output": "class BoulderfistOgre(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boulderfist Ogre\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 7)\u00a7", "input_tokens": ["Boulderfist", "Ogre", "NAME_END", "6", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "NIL"], "output_tokens": ["class", "Boulderfist", "Ogre", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boulderfist", "Ogre", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "7", ")"], "examples": ["class War Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` War Golem ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Assassins Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassin ` s Blade ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 3 , 4 )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 <pad> )"]}
{"input": "Deadly Poison NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your weapon +2 Attack.", "output": "class DeadlyPoison(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deadly Poison\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        player.weapon.base_attack += 2\u00a7        player.hero.change_temp_attack(2)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and player.weapon is not None\u00a7", "input_tokens": ["Deadly", "Poison", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "your", "weapon", "+2", "Attack."], "output_tokens": ["class", "Deadly", "Poison", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deadly", "Poison", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "weapon", ".", "base_attack", "+", "=", "2", "player", ".", "hero", ".", "change_temp_attack", "(", "2", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "player", ".", "weapon", "is", "not", "None"], "examples": ["class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Power Word Shield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Word : Shield ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 2 ) player . draw ( )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . change_temp_attack ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> : <pad> . <pad> . <pad> target . <pad> . <pad> ( self <pad> . <pad> ) <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> Attack <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( 2 <pad> . <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . hero . <pad> ( player . <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> = <pad> . <pad> . <pad> ( <pad> ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( 2 ) player . <pad> ( )"]}
{"input": "Fire Elemental NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage.", "output": "class FireElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fire Elemental\", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7", "input_tokens": ["Fire", "Elemental", "NAME_END", "6", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "3", "damage."], "output_tokens": ["class", "Fire", "Elemental", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Fire", "Elemental", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "5", ")"], "examples": ["class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Doomhammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomhammer ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 2 ) def create_weapon ( self , player ) : return Weapon ( 2 , 8 , buffs = [ Buff ( Windfury ( ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , <pad> ( <pad> = <pad> ( <pad> ) , <pad> = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"]}
{"input": "Gnomish Inventor NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Draw a card.", "output": "class GnomishInventor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Inventor\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7", "input_tokens": ["Gnomish", "Inventor", "NAME_END", "2", "ATK_END", "4", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Draw", "a", "card."], "output_tokens": ["class", "Gnomish", "Inventor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gnomish", "Inventor", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "4", ")"], "examples": ["class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector <pad> Player <pad> User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Player <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Player <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Player <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Heroic Strike NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +4 Attack this turn.", "output": "class HeroicStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heroic Strike\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(4)\u00a7", "input_tokens": ["Heroic", "Strike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "your", "hero", "+4", "Attack", "this", "turn."], "output_tokens": ["class", "Heroic", "Strike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Heroic", "Strike", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "hero", ".", "change_temp_attack", "(", "4", ")"], "examples": ["class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Power Word Shield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Word : Shield ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 2 ) player . draw ( )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> player . hero . change_temp_attack <pad> . <pad> ( <pad> ) <pad>", "class <pad> Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Strike ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . hero <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> ) <pad> target . <pad> . <pad> self <pad> . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> player . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player . hero . change_temp_attack <pad> ( <pad> ) <pad>", "class <pad> Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Strike ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . hero <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player <pad> , <pad> game <pad> ) <pad> player . <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> )"]}
{"input": "Ironbark Protector NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class IronbarkProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironbark Protector\", 8, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, taunt=True)\u00a7", "input_tokens": ["Ironbark", "Protector", "NAME_END", "8", "ATK_END", "8", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Ironbark", "Protector", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Ironbark", "Protector", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "8", ",", "8", ",", "taunt", "=", "True", ")"], "examples": ["class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Mark of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Taunt</b> and +2/+2.<i> (+2 Attack/+2 Health)</i>", "output": "class MarkOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mark of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(2)\u00a7        self.target.increase_health(2)\u00a7        self.target.taunt = True\u00a7", "input_tokens": ["Mark", "of", "the", "Wild", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "<b>", "Taunt", "</b>", "and", "+2/+2.<i>", "(+2", "Attack/+2", "Health)</i>"], "output_tokens": ["class", "Mark", "Of", "The", "Wild", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mark", "of", "the", "Wild", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "2", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "self", ".", "target", ".", "taunt", "=", "True"], "examples": ["class Anodized Robo Cub ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anodized Robo Cub ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , choices = [ Choice ( Attack Mode ( ) , Give ( [ Buff ( Change Attack ( 1 ) ) ] ) , Self Selector ( ) ) , Choice ( Tank Mode ( ) , Give ( [ Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Defender Of Argus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender of Argus ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Taunt ( ) ) , Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Cone Of Cold ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cone of Cold ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Nourish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nourish ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Gain2 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gain 2 mana crystals ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : if player . max_mana < 8 : player . max_mana + = 2 player . mana + = 2 else : player . max_mana = 10 player . mana + = 2 class Draw3 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Draw three cards ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : player . draw ( ) player . draw ( ) player . draw ( ) option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) option . use ( player , game )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> ( <pad> ( ) <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( ) , <pad> ( <pad> ( <pad> Health ( <pad> ) ) <pad> ) <pad> ( ) ) <pad> def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> Of <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ( ) ) <pad> ( <pad> ( <pad> ) ) <pad> ( <pad> ( <pad> ) ) <pad> , <pad> ( <pad> ( ) ) <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> Of <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( <pad> ( <pad> target <pad> . <pad> ( <pad> . <pad> ( <pad> ( <pad> ) self . target . <pad> ( <pad> . <pad> ( <pad> ) <pad> target <pad> self . target <pad> . <pad> . <pad> ( <pad> ) <pad> ) <pad> . <pad> ( Buff ( <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( ) self . target <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) : super ( ) <pad> use ( <pad> player , game <pad> ( <pad> ) <pad> self <pad> ( <pad> ( ) <pad> ) <pad> . <pad> ) <pad> player <pad> . <pad> ( <pad> ( <pad> ) <pad> ) <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> = <pad> . <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> , <pad> ) <pad> ( self <pad> ( 2 <pad> taunt = True <pad>", "class <pad> Of <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ) <pad> ( <pad> , <pad> ) <pad> ( 2 <pad> )", "class <pad> Of <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> of <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> self . target <pad> . <pad> ( <pad> ) self . target <pad> . <pad> ( <pad> ) <pad> self . target . <pad> = <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( ) self . target <pad> . <pad> ( <pad> ) <pad> self <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> self <pad> . <pad> . <pad> ( <pad> 2 <pad> ) <pad> self <pad> . <pad> . <pad> ( <pad> ) <pad> . <pad> . <pad> = <pad>"]}
{"input": "Multi-Shot NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to two random enemy minions.", "output": "class MultiShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Multi-Shot\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        for i in range(0, 2):\u00a7            target = game.random_choice(targets)\u00a7            targets.remove(target)\u00a7            target.damage(player.effective_spell_damage(3), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7", "input_tokens": ["Multi-Shot", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "two", "random", "enemy", "minions."], "output_tokens": ["class", "Multi", "Shot", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Multi", "-", "Shot", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "targets", "=", "copy", ".", "copy", "(", "game", ".", "other_player", ".", "minions", ")", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "target", "=", "game", ".", "random_choice", "(", "targets", ")", "targets", ".", "remove", "(", "target", ")", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")", "def", "can_use", "(", "self", ",", "player", ",", "game", ")", ":", "return", "super", "(", ")", ".", "can_use", "(", "player", ",", "game", ")", "and", "len", "(", "game", ".", "other_player", ".", "minions", ")", ">", "=", "2"], "examples": ["class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . <pad> . damage ( player . effective_spell_damage ( 3 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> = 2 <pad> . <pad> . <pad> ( <pad> ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target . <pad> player . effective_spell_damage ( <pad> ) <pad> . <pad> . <pad> . <pad> . <pad> ( player . <pad> ( <pad> , self ) player . <pad> ) <pad> : <pad> . <pad> . <pad> ( player . <pad> ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . <pad> . damage ( player . effective_spell_damage ( 3 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> = <pad> . <pad> . <pad> ( <pad> ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( 2 ) <pad> target . <pad> . target . damage ( player . effective_spell_damage ( <pad> ) , self ) player <pad> ) <pad> : <pad> . <pad> ( player . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . target . <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> ( <pad> )"]}
{"input": "Power Word: Shield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +2 Health. NL Draw a card.", "output": "class PowerWordShield(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power Word: Shield\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.increase_health(2)\u00a7        player.draw()\u00a7", "input_tokens": ["Power", "Word", ":", "Shield", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Give", "a", "minion", "+2", "Health.", "NL", "Draw", "a", "card."], "output_tokens": ["class", "Power", "Word", "Shield", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Power", "Word", ":", "Shield", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "FREE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "increase_health", "(", "2", ")", "player", ".", "draw", "(", ")"], "examples": ["class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> . <pad> ) <pad> ( self , player , <pad> ) <pad> super ( ) . <pad> ( player , game ) <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> . <pad> ( <pad> , <pad> . <pad> . <pad> target . <pad> . <pad> ( <pad> player <pad> . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target . <pad> self . target <pad> . <pad> ( 2 <pad> self ) player . draw ( ) <pad> self . target <pad> player . <pad> ( 2 <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( 2 ) <pad> player <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player <pad> , <pad> game <pad> ) <pad> . <pad> target <pad> . <pad> ( <pad> ) <pad> player <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> self . target <pad> . <pad> ( 2 <pad> ) player . draw <pad> ( <pad> )"]}
{"input": "Sen'jin Shieldmasta NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Taunt</b>", "output": "class SenjinShieldmasta(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7", "input_tokens": ["Sen'jin", "Shieldmasta", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Senjin", "Shieldmasta", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sen", "`", "jin", "Shieldmasta", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "FREE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ",", "taunt", "=", "True", ")"], "examples": ["class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )"]}
{"input": "Sinister Strike NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to the enemy hero.", "output": "class SinisterStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sinister Strike\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        game.other_player.hero.damage(player.effective_spell_damage(3), self)\u00a7", "input_tokens": ["Sinister", "Strike", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Free", "RARITY_END", "Deal", "$3", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Sinister", "Strike", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sinister", "Strike", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "FREE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "game", ".", "other_player", ".", "hero", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "3", ")", ",", "self", ")"], "examples": ["class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Preparation ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Preparation ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Spell ( ) ) , Spell Cast ( ) ) )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> , <pad> game <pad> ) <pad> target . damage ( player . effective_spell_damage ( 3 ) , <pad> self <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , <pad> hero <pad> . <pad> ( <pad> , <pad> ) <pad>", "class <pad> Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Strike ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( <pad> ( <pad> ( ) <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> game . other_player <pad> . <pad> . damage ( player . effective_spell_damage ( 3 ) , <pad> self <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . hero . <pad> ( <pad> player <pad> . <pad> ( <pad> , <pad> ) <pad>", "class <pad> Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Strike ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . hero . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> ( <pad> 3 <pad> ) , <pad> )"]}
{"input": "Succubus NAME_END 4 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b>Battlecry:</b> Discard a random card.", "output": "class Succubus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Succubus\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Succubus", "NAME_END", "4", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Free", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Discard", "a", "random", "card."], "output_tokens": ["class", "Succubus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Succubus", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "FREE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ",", "battlecry", "=", "Battlecry", "(", "Discard", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector <pad> Player <pad> picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 4 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Player <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 4 , <pad> )"]}
{"input": "War Golem NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "output": "class WarGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"War Golem\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7", "input_tokens": ["War", "Golem", "NAME_END", "7", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "NIL"], "output_tokens": ["class", "War", "Golem", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "War", "Golem", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "7", ",", "7", ")"], "examples": ["class Boulderfist Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boulderfist Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 6 , 7 )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Assassins Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassin ` s Blade ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 3 , 4 )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , False , <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 7 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 7 , <pad> )"]}
{"input": "Acidmaw NAME_END 4 ATK_END 2 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever another minion takes damage, destroy it.", "output": "class Acidmaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acidmaw\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, effects=[Effect(CharacterDamaged(MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(), TargetSelector())])])\u00a7", "input_tokens": ["Acidmaw", "NAME_END", "4", "ATK_END", "2", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "Legendary", "RARITY_END", "Whenever", "another", "minion", "takes", "damage,", "destroy", "it."], "output_tokens": ["class", "Acidmaw", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Acidmaw", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Character", "Damaged", "(", "Minion", "Is", "Not", "Target", "(", ")", ",", "Both", "Player", "(", ")", ")", ",", "[", "Action", "Tag", "(", "Kill", "(", ")", ",", "Target", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Mistress Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mistress of Pain ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Heal ( Event Value ( ) ) , Hero Selector ( ) ) ) ] )", "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Archmage Antonidas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage Antonidas ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 7 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Add Card ( hearthbreaker . cards . Fireball ( ) ) , Player Selector ( ) ) ) ] )", "class Gorehowl ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gorehowl ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 7 , 1 , effects = [ Effect ( Character Attack ( And ( Is Hero ( ) , Target Is Minion ( ) ) ) , [ Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) , Action Tag ( Increase Weapon Attack ( - 1 ) , Weapon Selector ( ) ) , Action Tag ( Give ( Buff Until ( Change Attack ( 1 ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ] ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , effects = [ Effect ( <pad> ( ) , Action Tag ( Damage ( <pad> ) , <pad> Selector ( <pad> Player ( <pad> ( ) <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> . <pad> ( <pad> , <pad> = <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) ) , <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) <pad> ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , effects = [ Effect ( <pad> ( ) , <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ( ) <pad> ) <pad> ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) <pad> ) <pad> ) <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect ( Character <pad> ( <pad> Is <pad> Target <pad> ( ) , <pad> ( <pad> ) <pad> ) , <pad> Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ] ) ] )"]}
{"input": "Boar NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "output": "class Boar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Boar", "NAME_END", "4", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Boar", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Boar", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Ironbark Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbark Protector ` , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 8 , 8 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , charge = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 4 , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Anodized Robo Cub NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b>. <b>Choose One -</b> NL +1 Attack; or +1 Health.", "output": "class AnodizedRoboCub(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anodized Robo Cub\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[Choice(AttackMode(), Give([Buff(ChangeAttack(1))]), SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))]), SelfSelector())])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7", "input_tokens": ["Anodized", "Robo", "Cub", "NAME_END", "2", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Druid", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>", ".", "<b>", "Choose", "One", "-", "</b>", "NL", "+1", "Attack;", "or", "+1", "Health."], "output_tokens": ["class", "Anodized", "Robo", "Cub", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Anodized", "Robo", "Cub", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "choices", "=", "[", "Choice", "(", "Attack", "Mode", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", ",", "Choice", "(", "Tank", "Mode", "(", ")", ",", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "taunt", "=", "True", ")"], "examples": ["class Nourish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nourish ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Gain2 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gain 2 mana crystals ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : if player . max_mana < 8 : player . max_mana + = 2 player . mana + = 2 else : player . max_mana = 10 player . mana + = 2 class Draw3 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Draw three cards ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : player . draw ( ) player . draw ( ) player . draw ( ) option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) option . use ( player , game )", "class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Drakonid Crusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drakonid Crusher ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ` health ` , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> ( <pad> Choice <pad> ( <pad> ( ) <pad> , <pad> ( <pad> ) <pad> ) <pad> ( <pad> ( <pad> ) <pad> , <pad> ) <pad> ( ) <pad> ( ) <pad> ( <pad> ( ) , <pad> ( ) ] , player ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , <pad> = <pad> Buff ( Change <pad> ( <pad> ) , <pad> ( ) , <pad> ( <pad> ( <pad> ) , <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( Give ( [ Buff <pad> Change <pad> Buff ( Change Health ( <pad> ) ) ] ) <pad> ( ) , <pad> ( <pad> ( <pad> ) , <pad> = <pad> ) ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , <pad> = <pad> ( <pad> Attack ( 1 ) , <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> = <pad> , <pad> ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> . <pad> , <pad> Choice <pad> ( <pad> ( ) <pad> , <pad> ( <pad> ( <pad> ( <pad> ) <pad> ) <pad> ) <pad> , <pad> ( ) <pad> ) <pad> ( ) <pad> ( [ <pad> ( ) , <pad> ( ) ] , player ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , <pad> = ( <pad> ( Give ( Buff ( Change <pad> ( <pad> ) ) ) , Self Selector ( ) , <pad> ( <pad> ( <pad> ( <pad> ( <pad> ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , <pad> = <pad> [ <pad> ( <pad> Attack ( <pad> ) , Buff ( Change <pad> ( <pad> ) ) ] ) , Self Selector ( ) , <pad> ( <pad> ( <pad> , <pad> ( <pad> ( ) ) ) , <pad> ) ) <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , <pad> = <pad> ( <pad> Attack ( 1 ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 2 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )"]}
{"input": "Burrowing Mine NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END When you draw this, it explodes. You take 10 damage and draw a card.", "output": "class BurrowingMine(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burrowing Mine\", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard(query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)), PlayerSelector())), Effect(Drawn(), ActionTag(Draw(), PlayerSelector()))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7", "input_tokens": ["Burrowing", "Mine", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "When", "you", "draw", "this,", "it", "explodes.", "You", "take", "10", "damage", "and", "draw", "a", "card."], "output_tokens": ["class", "Burrowing", "Mine", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Burrowing", "Mine", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "effects", "=", "[", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "10", ")", ",", "Hero", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Discard", "(", "query", "=", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LAST_DRAWN", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", ",", "Effect", "(", "Drawn", "(", ")", ",", "Action", "Tag", "(", "Draw", "(", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Preparation ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Preparation ` , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . add_aura ( Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Spell ( ) ) , Spell Cast ( ) ) )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , <pad> . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target <pad> ( <pad> ) <pad> . <pad> . target . <pad> . <pad> ( <pad> ) , self ) player . draw ( ) <pad> . <pad> . <pad> ( player . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( player . <pad> ( <pad> ) , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) ) , <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> , <pad> ) <pad> . <pad> . damage ( <pad> . <pad> ( <pad> ) , self <pad> def <pad> ( self , player <pad> ) : <pad> ( ) . <pad> ( player , game ) <pad> game . <pad> . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player <pad> ( <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) . <pad> ( player , game ) <pad> player . <pad>"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , <pad> = <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> . <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , self <pad> player <pad> ) <pad> : <pad> ( <pad> . <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) ) , <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> = <pad> ( <pad> . <pad> ) <pad> ) <pad> ( <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> ) def <pad> ( self , player , game ) : <pad> super ( ) . <pad> ( player , <pad> game <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ) def <pad> ( self , player , game ) : <pad> super ( ) . <pad> ( player , game ) <pad>"]}
{"input": "Crackle NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3-$6 damage. <b>Overload:</b> (1)", "output": "class Crackle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crackle\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(game.random_amount(3, 6)), self)\u00a7", "input_tokens": ["Crackle", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$3-$6", "damage.", "<b>", "Overload", ":", "</b>", "(1)"], "output_tokens": ["class", "Crackle", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Crackle", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_spell_target", ",", "overload", "=", "1", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "game", ".", "random_amount", "(", "3", ",", "6", ")", ")", ",", "self", ")"], "examples": ["class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , <pad> = <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ( ) <pad> ( <pad> player ) : <pad> ( 6 , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . damage ( player . effective_spell_damage ( 3 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player <pad> , <pad> ) <pad> game <pad> ) <pad> . <pad> target . damage ( player . effective_spell_damage ( 3 ) , <pad> self <pad> , <pad> ) <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) ) <pad> ( self <pad> player ) : <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , <pad> = <pad> , <pad> = <pad> ) def <pad> ( self , player ) : <pad> ( 6 , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . damage ( player . effective_spell_damage ( 3 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player <pad> , <pad> game <pad> ) <pad> . <pad> target . damage ( player . effective_spell_damage <pad> ( <pad> game <pad> . <pad> ( <pad> , <pad> ) <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )"]}
{"input": "Emergency Coolant NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Freeze</b> a minion.", "output": "class EmergencyCoolant(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emergency Coolant\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Emergency", "Coolant", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "<b>", "Freeze", "</b>", "a", "minion."], "output_tokens": ["class", "Emergency", "Coolant", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Emergency", "Coolant", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Bananas ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bananas ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 ) self . target . increase_health ( 1 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ) self <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> player <pad> : <pad> ( <pad> . <pad> ) <pad> , <pad> ) <pad> . <pad> ( <pad> . <pad> ) def <pad> ( <pad> ) <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , <pad> . <pad> , <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ) self . target . <pad> . <pad> ( <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( <pad> ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . <pad> ) <pad> ( self <pad> game <pad> ) super ( ) . <pad> ( <pad> player <pad> , <pad> ) <pad> self <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , <pad> , <pad> = <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( <pad> ) <pad> )"]}
{"input": "Flying Machine NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Windfury</b>", "output": "class FlyingMachine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flying Machine\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, windfury=True)\u00a7", "input_tokens": ["Flying", "Machine", "NAME_END", "1", "ATK_END", "4", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Windfury", "</b>"], "output_tokens": ["class", "Flying", "Machine", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flying", "Machine", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "windfury", "=", "True", ")"], "examples": ["class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Ironbark Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbark Protector ` , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 8 , 8 , taunt = True )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )"]}
{"input": "Goblin Auto-Barber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Battlecry</b>: Give your weapon +1 Attack.", "output": "class GoblinAutoBarber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Auto-Barber\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7", "input_tokens": ["Goblin", "Auto-Barber", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Give", "your", "weapon", "+1", "Attack."], "output_tokens": ["class", "Goblin", "Auto", "Barber", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Goblin", "Auto", "-", "Barber", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Increase", "Weapon", "Attack", "(", "1", ")", ",", "Weapon", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ")"], "examples": ["class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Powermace ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Powermace ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give <pad> ( <pad> Buff ( Change Attack ( <pad> ) <pad> ) , <pad> ( <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = <pad> Battlecry ( Give <pad> ( <pad> ) <pad> ) , <pad> Selector ( <pad> ( <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) , <pad> Selector ( <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ( Change Attack ( <pad> ) ) <pad> ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH , battlecry = Battlecry <pad> ( <pad> Attack ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = <pad> Battlecry <pad> ( <pad> ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> = <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) ) <pad> ) , Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Iron Sensei NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, give another friendly Mech +2/+2.", "output": "class IronSensei(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Sensei\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\u00a7", "input_tokens": ["Iron", "Sensei", "NAME_END", "2", "ATK_END", "2", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Rogue", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "At", "the", "end", "of", "your", "turn,", "give", "another", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Iron", "Sensei", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Iron", "Sensei", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "2", ",", "effects", "=", "[", "Effect", "(", "Turn", "Ended", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Lightwell ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwell ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 5 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 3 ) , Character Selector ( condition = Is Damaged ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Powermace ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Powermace ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )", "class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag ( <pad> ( <pad> ) , <pad> Selector ( <pad> = <pad> ( ) , picker = <pad> Picker ( ) ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player ) : return <pad> ( <pad> , 2 , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> ) <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> ) <pad> ( <pad> ( Double Attack ( ) ) )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag ( <pad> ( <pad> ) , <pad> Selector ( <pad> Is <pad> ( ) , picker = Random Picker ( ) ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , player ) : return <pad> ( <pad> , 2 , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( <pad> ) ) ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ( <pad> ( ) ) )"]}
{"input": "Mal'Ganis NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Your other Demons have +2/+2. NL Your hero is <b>Immune</b>.", "output": "class MalGanis(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(), HeroSelector())])\u00a7", "input_tokens": ["Mal'Ganis", "NAME_END", "9", "ATK_END", "7", "DEF_END", "9", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Legendary", "RARITY_END", "Your", "other", "Demons", "have", "+2/+2.", "NL", "Your", "hero", "is", "<b>", "Immune", "</b>", "."], "output_tokens": ["class", "Mal", "Ganis", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mal", "`", "Ganis", "`", ",", "9", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "9", ",", "7", ",", "auras", "=", "[", "Aura", "(", "Change", "Health", "(", "2", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", ")", ")", ",", "Aura", "(", "Change", "Attack", "(", "2", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "DEMON", ")", ")", ")", ",", "Aura", "(", "Immune", "(", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Senjin Shieldmasta ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sen ` jin Shieldmasta ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) <pad> ( <pad> ) <pad> Minion ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> ( <pad> ) <pad> Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) , <pad> ( <pad> ) ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARLOCK , CARD_RARITY . <pad> , minion_type = MINION_TYPE . DEMON , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) , <pad> ( ) ) ) ) <pad> ( <pad> ) <pad> ( <pad> )"]}
{"input": "Mistress of Pain NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END Whenever this minion deals damage, restore that much Health to your hero.", "output": "class MistressOfPain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mistress of Pain\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(EventValue()), HeroSelector()))])\u00a7", "input_tokens": ["Mistress", "of", "Pain", "NAME_END", "1", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "Rare", "RARITY_END", "Whenever", "this", "minion", "deals", "damage,", "restore", "that", "much", "Health", "to", "your", "hero."], "output_tokens": ["class", "Mistress", "Of", "Pain", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mistress", "of", "Pain", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARLOCK", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "effects", "=", "[", "Effect", "(", "Did", "Damage", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "Event", "Value", "(", ")", ")", ",", "Hero", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Gorehowl ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gorehowl ` , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 7 , 1 , effects = [ Effect ( Character Attack ( And ( Is Hero ( ) , Target Is Minion ( ) ) ) , [ Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) , Action Tag ( Increase Weapon Attack ( - 1 ) , Weapon Selector ( ) ) , Action Tag ( Give ( Buff Until ( Change Attack ( 1 ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ] ) ] )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Lightwell ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwell ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 5 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 3 ) , Character Selector ( condition = Is Damaged ( ) , picker = Random Picker ( ) ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> Damaged <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( Damage ( <pad> ) , <pad> Selector <pad> ( <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ) , <pad> ) <pad> ( <pad> ( <pad> ( <pad> ) , Hero Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( Heal ( <pad> ) , <pad> Selector ( <pad> Is Damaged <pad> ( <pad> ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ( ) <pad> ) , <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , Action Tag <pad> ( <pad> ( <pad> ( <pad> ) ) , Hero Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( Heal ( <pad> ( <pad> ) , <pad> ( <pad> ) ) ) ] )"]}
{"input": "Powermace NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Deathrattle</b>: Give a random friendly Mech +2/+2.", "output": "class Powermace(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Powermace\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))\u00a7", "input_tokens": ["Powermace", "NAME_END", "3", "ATK_END", "-1", "DEF_END", "3", "COST_END", "2", "DUR_END", "Weapon", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Deathrattle", "</b>", ":", "Give", "a", "random", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Powermace", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Powermace", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "3", ",", "2", ",", "deathrattle", "=", "Deathrattle", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")"], "examples": ["class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Doomhammer ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomhammer ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 2 ) def create_weapon ( self , player ) : return Weapon ( 2 , 8 , buffs = [ Buff ( Windfury ( ) ) ] )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) <pad> ) ) <pad> ) <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> , <pad> ) ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> , <pad> = <pad> ( <pad> Attack ( <pad> ) , <pad> ( ) ) ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> picker = <pad> Picker ( <pad> ) , <pad> ( <pad> ( <pad> ) ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> , <pad> = <pad> ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> , <pad> = [ Buff ( <pad> ( ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) <pad> , <pad> Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) <pad> , <pad> Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ( 3 <pad> , <pad> = <pad> ( <pad> ( ) ) , <pad> ( <pad> ( <pad> Selector ( <pad> Is Type ( MINION_TYPE . <pad> ) , <pad> = <pad> ) ) <pad> ) <pad> )"]}
{"input": "Screwjank Clunker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry</b>: Give a friendly Mech +2/+2.", "output": "class ScrewjankClunker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Screwjank Clunker\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7", "input_tokens": ["Screwjank", "Clunker", "NAME_END", "2", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "Give", "a", "friendly", "Mech", "+2/+2."], "output_tokens": ["class", "Screwjank", "Clunker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Screwjank", "Clunker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "RARE", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "2", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Is", "Type", "(", "MINION_TYPE", ".", "MECH", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "5", ")"], "examples": ["class Powermace ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Powermace ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> = <pad> ( Give ( [ Buff ( Change <pad> ( 2 ) ) , Buff ( Change <pad> ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( <pad> Attack ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , battlecry = ( Battlecry ( Give ( Buff ( Change <pad> ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( <pad> Selector ( condition = Is Type ( MINION_TYPE . <pad> ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> ( <pad> ( ) , picker = User Picker ( ) ) , Greater <pad> ( Count ( <pad> Selector ( <pad> Type ( MINION_TYPE . <pad> ) ) ) , value = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> , <pad> , <pad> = <pad> ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = <pad> Picker ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( <pad> Attack ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , battlecry = <pad> Battlecry ( Give ( Buff ( Change Health ( 2 <pad> ) ) , <pad> ( ) , <pad> Selector ( <pad> Is Type ( MINION_TYPE . <pad> ) , <pad> = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( ) , <pad> ( ) ) , <pad> Selector ( <pad> Is Type ( MINION_TYPE . <pad> ) , <pad> = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Sneed's Old Shredder NAME_END 5 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a random legendary minion.", "output": "class SneedsOldShredder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])), PlayerSelector()))\u00a7", "input_tokens": ["Sneed's", "Old", "Shredder", "NAME_END", "5", "ATK_END", "7", "DEF_END", "8", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Mech", "RACE_END", "Legendary", "RARITY_END", "<b>", "Deathrattle", ":", "</b>", "Summon", "a", "random", "legendary", "minion."], "output_tokens": ["class", "Sneeds", "Old", "Shredder", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sneed", "`", "s", "Old", "Shredder", "`", ",", "8", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Rarity", "(", "CARD_RARITY", ".", "LEGENDARY", ")", ",", "Is", "Minion", "(", ")", "]", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Cabal Shadow Priest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cabal Shadow Priest ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , Minion <pad> ( <pad> ( <pad> , <pad> ( ) , <pad> ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = <pad> Is Minion ( ) ] , <pad> ) ) , Player Selector <pad> ( <pad> ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( <pad> ( ) , Minion Selector ( <pad> ( <pad> , <pad> ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH , <pad> = <pad> ( <pad> ) <pad> ) , Minion <pad> ( Is <pad> ( <pad> , <pad> ( ) <pad> ) ) <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ) <pad> Minion <pad> ( <pad> ( <pad> = <pad> ( ) , <pad> ( ) <pad> ) ) <pad> , <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] <pad> ) ) , Player Selector <pad> ( <pad> ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> = <pad> ( ) , <pad> ( ) <pad> ) ) <pad> , <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . MECH <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ( Is <pad> ( <pad> . <pad> ) , <pad> ( ) <pad> ) ) <pad> , <pad> ( <pad> )"]}
{"input": "Toshley NAME_END 5 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry and Deathrattle:</b> Add a <b>Spare Part</b> card to your hand.", "output": "class Toshley(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Toshley\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\u00a7", "input_tokens": ["Toshley", "NAME_END", "5", "ATK_END", "7", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", "and", "Deathrattle", ":", "</b>", "Add", "a", "<b>", "Spare", "Part", "</b>", "card", "to", "your", "hand."], "output_tokens": ["class", "Toshley", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "super", "(", ")", ".", "__init__", "(", "`", "Toshley", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "from", "hearthbreaker", ".", "cards", ".", "spells", ".", "neutral", "import", "spare_part_list", "return", "Minion", "(", "5", ",", "7", ",", "deathrattle", "=", "Deathrattle", "(", "Add", "Card", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "spare_part_list", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")"], "examples": ["class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( Card Query ( <pad> ( <pad> , source = CARD_SOURCE . <pad> ) ) , Player Selector <pad> Player ( <pad> ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , <pad> Card <pad> ( <pad> = <pad> ( <pad> . <pad> ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 7 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , deathrattle = Deathrattle ( <pad> ( Card Query <pad> ( <pad> source = CARD_SOURCE . <pad> ) ) , Player Selector <pad> ( <pad> ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> = <pad> , <pad> = <pad> ) ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( 5 , <pad> )"]}
{"input": "Warbot NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Enrage:</b> +1 Attack.", "output": "class Warbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Warbot\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\u00a7", "input_tokens": ["Warbot", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warrior", "PLAYER_CLS_END", "Mech", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "+1", "Attack."], "output_tokens": ["class", "Warbot", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Warbot", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "MECH", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "1", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Amani Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Amani Berserker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 3 , enrage = [ Aura ( Change Attack ( <pad> ) , Self Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) ) ) <pad> create_minion <pad> , player ) <pad> Minion ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 3 , enrage = [ Aura ( Change Attack ( <pad> ) , Self Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 , <pad> )"]}
{"input": "Deathlord NAME_END 2 ATK_END 8 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. Deathrattle:</b> Your opponent puts a minion from their deck into the battlefield.", "output": "class Deathlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deathlord\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)), PlayerSelector(EnemyPlayer())))\u00a7", "input_tokens": ["Deathlord", "NAME_END", "2", "ATK_END", "8", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Taunt.", "Deathrattle", ":", "</b>", "Your", "opponent", "puts", "a", "minion", "from", "their", "deck", "into", "the", "battlefield."], "output_tokens": ["class", "Deathlord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Deathlord", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "8", ",", "taunt", "=", "True", ",", "deathrattle", "=", "Deathrattle", "(", "Summon", "(", "Card", "Query", "(", "conditions", "=", "[", "Is", "Minion", "(", ")", "]", ",", "source", "=", "CARD_SOURCE", ".", "MY_DECK", ")", ")", ",", "Player", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ")"], "examples": ["class Cabal Shadow Priest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cabal Shadow Priest ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Tinkmaster Overspark ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinkmaster Overspark ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Transform ( Card Query ( source = CARD_SOURCE . LIST , source_list = [ Devilsaur ( ) , Squirrel ( ) ] ) ) , Minion Selector ( players = Both Player ( ) , picker = Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> Selector <pad> ( <pad> ) , <pad> Enemy Player ( ) , picker = <pad> Picker ( <pad> ) ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> ) , Minion Selector ( <pad> Player ( ) , <pad> ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( ) <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> ) <pad> ) ) <pad> ( <pad> , <pad> ) <pad> return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( <pad> ) , <pad> ( ) <pad> ) ) <pad> , <pad> ) <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> ) <pad> Minion <pad> ( 2 <pad> , <pad> = <pad> ( ) , <pad> = <pad> ) ) ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( Card Query ( <pad> = [ <pad> ( ) , <pad> ) ) , <pad> Selector ( <pad> Player <pad> ( <pad> ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( <pad> ( <pad> ( ) ) ) , <pad> Selector ( <pad> ( <pad> ) ) <pad> ) <pad> )"]}
{"input": "Nerub'ar Weblord NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Minions with <b>Battlecry</b> cost (2) more.", "output": "class NerubarWeblord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(BothPlayer(), HasBattlecry()))])\u00a7", "input_tokens": ["Nerub'ar", "Weblord", "NAME_END", "1", "ATK_END", "4", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Minions", "with", "<b>", "Battlecry", "</b>", "cost", "(2)", "more."], "output_tokens": ["class", "Nerubar", "Weblord", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nerub", "`", "ar", "Weblord", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "4", ",", "auras", "=", "[", "Aura", "(", "Mana", "Change", "(", "2", ")", ",", "Card", "Selector", "(", "Both", "Player", "(", ")", ",", "Has", "Battlecry", "(", ")", ")", ")", "]", ")"], "examples": ["class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Amani Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Amani Berserker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , <pad> = <pad> Aura ( Change <pad> ( <pad> ) , <pad> Selector ( ) ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = [ Aura ( Change <pad> ( <pad> ) , <pad> Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = <pad> )"]}
{"input": "Spectral Knight NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "output": "class SpectralKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spectral Knight\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6, spell_targetable=False)\u00a7", "input_tokens": ["Spectral", "Knight", "NAME_END", "4", "ATK_END", "6", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Can't", "be", "targeted", "by", "spells", "or", "Hero", "Powers."], "output_tokens": ["class", "Spectral", "Knight", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spectral", "Knight", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "6", ",", "spell_targetable", "=", "False", ")"], "examples": ["class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Boulderfist Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boulderfist Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 6 , 7 )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mana Wyrm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wyrm ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 5 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 6 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )"]}
{"input": "Wailing Soul NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry: Silence</b> your other minions.", "output": "class WailingSoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wailing Soul\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5)\u00a7", "input_tokens": ["Wailing", "Soul", "NAME_END", "3", "ATK_END", "5", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "Silence", "</b>", "your", "other", "minions."], "output_tokens": ["class", "Wailing", "Soul", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Wailing", "Soul", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Silence", "(", ")", ",", "Minion", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "5", ")"], "examples": ["class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Sneeds Old Shredder ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sneed ` s Old Shredder ` , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 7 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Rarity ( CARD_RARITY . LEGENDARY ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Silence ( ) , Minion Selector <pad> Player <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry <pad> ( <pad> ( <pad> ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ) def create_minion ( self , player ) : return Minion <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( Silence ( ) , Minion Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , Minion Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ) def create_minion ( self , player ) : return <pad> Minion ( <pad> , <pad> )"]}
{"input": "Amani Berserker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> +3 Attack", "output": "class AmaniBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Amani Berserker\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\u00a7", "input_tokens": ["Amani", "Berserker", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Enrage", ":", "</b>", "+3", "Attack"], "output_tokens": ["class", "Amani", "Berserker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Amani", "Berserker", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ",", "enrage", "=", "[", "Aura", "(", "Change", "Attack", "(", "3", ")", ",", "Self", "Selector", "(", ")", ")", "]", ")"], "examples": ["class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Warbot ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Warbot ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) ] )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 3 , enrage = [ Aura ( Change Attack ( <pad> ) , Self Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 3 , enrage = [ Aura ( Change Attack ( <pad> ) , Self Selector ( ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Archmage Antonidas NAME_END 5 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a spell, add a 'Fireball' spell to your hand.", "output": "class ArchmageAntonidas(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage Antonidas\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(hearthbreaker.cards.Fireball()), PlayerSelector()))])\u00a7", "input_tokens": ["Archmage", "Antonidas", "NAME_END", "5", "ATK_END", "7", "DEF_END", "7", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "add", "a", "'Fireball'", "spell", "to", "your", "hand."], "output_tokens": ["class", "Archmage", "Antonidas", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Archmage", "Antonidas", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "LEGENDARY", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "7", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Add", "Card", "(", "hearthbreaker", ".", "cards", ".", "Fireball", "(", ")", ")", ",", "Player", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Mana Wyrm ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wyrm ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )", "class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Spectral Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , spell_targetable = False )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( <pad> ( <pad> = <pad> ( <pad> = <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY . LEGENDARY <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( <pad> ( ) <pad> ) , <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> . <pad> . <pad> ( <pad> ( <pad> ) <pad> )"]}
{"input": "Bananas NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1/+1.", "output": "class Bananas(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bananas\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(1)\u00a7        self.target.increase_health(1)\u00a7", "input_tokens": ["Bananas", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "NIL", "RARITY_END", "Give", "a", "minion", "+1/+1."], "output_tokens": ["class", "Bananas", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Bananas", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "change_attack", "(", "1", ")", "self", ".", "target", ".", "increase_health", "(", "1", ")"], "examples": ["class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> ) def <pad> ( self , player <pad> ) : <pad> super ( ) . <pad> ( player , game ) <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> , <pad> : <pad> . <pad> . <pad> self <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> self <pad> player <pad> : <pad> . <pad> . <pad> def <pad> ( self , player ) : player <pad> . <pad> ( <pad> self . <pad> ) <pad> ( <pad> ) <pad> player <pad> . <pad> ( <pad> , self . <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , <pad> hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ) <pad> self <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> target <pad> . <pad> ( <pad> ) <pad> . <pad> target <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . <pad> ) <pad> ( self <pad> game <pad> ) super ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> ) <pad> self <pad> . <pad> . <pad> ( <pad> )"]}
{"input": "Blessed Champion NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Double a minion's Attack.", "output": "class BlessedChampion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessed Champion\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(DoubleAttack()))\u00a7", "input_tokens": ["Blessed", "Champion", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "Double", "a", "minion's", "Attack."], "output_tokens": ["class", "Blessed", "Champion", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blessed", "Champion", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "RARE", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Double", "Attack", "(", ")", ")", ")"], "examples": ["class Bananas ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bananas ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 ) self . target . increase_health ( 1 )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> ( <pad> player <pad> ) <pad> . <pad> ( <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> ) : <pad> . <pad> target . <pad> . <pad> ( self <pad> . <pad> ) <pad> . <pad> . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player <pad> , <pad> game <pad> ) <pad> . <pad> target <pad> . <pad> ( <pad> ( <pad> ( ) <pad> ) <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ) <pad> )"]}
{"input": "Cabal Shadow Priest NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Take control of an enemy minion that has 2 or less Attack.", "output": "class CabalShadowPriest(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cabal Shadow Priest\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7", "input_tokens": ["Cabal", "Shadow", "Priest", "NAME_END", "4", "ATK_END", "5", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Take", "control", "of", "an", "enemy", "minion", "that", "has", "2", "or", "less", "Attack."], "output_tokens": ["class", "Cabal", "Shadow", "Priest", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cabal", "Shadow", "Priest", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ",", "battlecry", "=", "Battlecry", "(", "Steal", "(", ")", ",", "Minion", "Selector", "(", "Attack", "Less", "Than", "Or", "Equal", "To", "(", "2", ")", ",", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "5", ")"], "examples": ["class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Drakonid Crusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drakonid Crusher ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ` health ` , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 5 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> ( <pad> Player <pad> = <pad> Picker ( ) ) , <pad> Selector ( <pad> = <pad> ( <pad> ) , <pad> = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> , <pad> ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = <pad> Battlecry <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) ) <pad> ) , <pad> ( ) <pad> ( <pad> , <pad> Selector ( <pad> ( <pad> ) , <pad> ) ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 5 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( players = <pad> Player ( ) , picker = User Picker <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> ) <pad> Minion ( 2 <pad> , <pad> = <pad> ( ) <pad> , <pad> = <pad> ) ) <pad> ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = <pad> Battlecry <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> Than <pad> ( <pad> , <pad> Enemy Player ( <pad> ) , <pad> = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Cone of Cold NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> a minion and the minions next to it, and deal $1 damage to them.", "output": "class ConeOfCold(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cone of Cold\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7        index = self.target.index\u00a7\u00a7        if self.target.index < len(self.target.player.minions) - 1:\u00a7            minion = self.target.player.minions[index + 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        if self.target.index > 0:\u00a7            minion = self.target.player.minions[index - 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7", "input_tokens": ["Cone", "of", "Cold", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Freeze", "</b>", "a", "minion", "and", "the", "minions", "next", "to", "it,", "and", "deal", "$1", "damage", "to", "them."], "output_tokens": ["class", "Cone", "Of", "Cold", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Cone", "of", "Cold", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")", "index", "=", "self", ".", "target", ".", "index", "if", "self", ".", "target", ".", "index", "<", "len", "(", "self", ".", "target", ".", "player", ".", "minions", ")", "-", "1", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "+", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "if", "self", ".", "target", ".", "index", ">", "0", ":", "minion", "=", "self", ".", "target", ".", "player", ".", "minions", "[", "index", "-", "1", "]", "minion", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")", "minion", ".", "add_buff", "(", "Buff", "(", "Frozen", "(", ")", ")", ")"], "examples": ["class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Repentance ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Repentance ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion ) : minion . set_health_to ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( ) self . target . damage ( <pad> . <pad> ( 1 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target <pad> . <pad> ( <pad> ) <pad> self . target <pad> self . target . damage ( <pad> . <pad> ( <pad> ) , self ) <pad> . <pad> ( ) <pad> : self . target . <pad> ( player <pad> ( <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> player <pad> ( ) <pad> : <pad> . <pad> ( self ) <pad> . <pad> ) <pad> ( <pad> . <pad> ( ) def <pad> ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , <pad> ) : <pad> . <pad> ( <pad> ( <pad> . <pad> ( ) def <pad> ( self , player ) : player . game . current_player . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : <pad> . <pad> ( <pad> , self . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> , <pad> ) <pad> . <pad> ( <pad> . <pad> ( <pad> target . damage ( <pad> . <pad> ( <pad> ) , self <pad> ( <pad> , player <pad> ) . <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target . <pad> ( <pad> ) <pad> self . target . <pad> : self . target . damage ( player . effective_spell_damage ( <pad> ) , self ) player . <pad> ( ) <pad> : self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def <pad> ( self , <pad> , <pad> ) : <pad> . player . <pad> . <pad> ( ) <pad> . <pad> . <pad> ( self ) <pad> . <pad> . <pad> ( ) <pad> ) . <pad> ( <pad> ( <pad> ) <pad> . <pad> . <pad> ( <pad> , self <pad> ) <pad> self <pad> : player . <pad> . <pad> ( <pad> , self . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def <pad> ( self , <pad> ) : <pad> ( <pad> ) <pad> ( ) . <pad> ( ) <pad> ( self <pad> player ) : player . <pad> . <pad> . <pad> ( <pad> , self . <pad> ) <pad> ( <pad> , <pad> ) : player . <pad> . <pad> . <pad> ( <pad> , self . <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> = <pad> . <pad> ( <pad> . <pad> . minions ) <pad> : target <pad> . <pad> ( <pad> ) <pad> . <pad> ( <pad> ) target . damage ( player . effective_spell_damage ( <pad> ) , self ) <pad> self <pad> player <pad> ( <pad> . <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad>"]}
{"input": "Defender of Argus NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions +1/+1 and <b>Taunt</b>.", "output": "class DefenderOfArgus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender of Argus\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([ Buff(Taunt()), Buff(ChangeAttack(1)), Buff(ChangeHealth(1)) ]), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Defender", "of", "Argus", "NAME_END", "2", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "adjacent", "minions", "+1/+1", "and", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Defender", "Of", "Argus", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Defender", "of", "Argus", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Taunt", "(", ")", ")", ",", "Buff", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "1", ")", ")", "]", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Toshley ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Toshley ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 5 , 7 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> Player ( ) , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : <pad> return Minion ( <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> [ <pad> Minion ( ) ] , <pad> ) ) , <pad> Selector ( <pad> ( ) ) ) )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> ( <pad> ( ) , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> , <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : <pad> return Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> , <pad> = <pad> ( <pad> ( <pad> ( <pad> ( ) <pad> , <pad> ) ) , <pad> Selector ( <pad> ( ) ) ) )"]}
{"input": "Doomhammer NAME_END 2 ATK_END -1 DEF_END 5 COST_END 8 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Windfury, Overload:</b> (2)", "output": "class Doomhammer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomhammer\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=2)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 8, buffs=[Buff(Windfury())])\u00a7", "input_tokens": ["Doomhammer", "NAME_END", "2", "ATK_END", "-1", "DEF_END", "5", "COST_END", "8", "DUR_END", "Weapon", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "<b>", "Windfury,", "Overload", ":", "</b>", "(2)"], "output_tokens": ["class", "Doomhammer", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Doomhammer", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "EPIC", ",", "overload", "=", "2", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "2", ",", "8", ",", "buffs", "=", "[", "Buff", "(", "Windfury", "(", ")", ")", "]", ")"], "examples": ["class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Powermace ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Powermace ` , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Amani Berserker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Amani Berserker ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> 2 <pad> 2 <pad> , <pad> , <pad> , <pad> = <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 2 , <pad> , <pad> = <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . <pad> ) def create_weapon ( self , player ) : return Weapon ( <pad> , <pad> , <pad> = <pad> [ <pad> Buff ( <pad> ( <pad> ) ) ] <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( 2 , <pad> , <pad> = [ <pad> ( <pad> ( ) ) ] )"]}
{"input": "Earth Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Silence</b> a minion, then deal $1 damage to it.", "output": "class EarthShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Shock\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.silence()\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7", "input_tokens": ["Earth", "Shock", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Shaman", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Silence", "</b>", "a", "minion,", "then", "deal", "$1", "damage", "to", "it."], "output_tokens": ["class", "Earth", "Shock", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Earth", "Shock", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "SHAMAN", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "self", ".", "target", ".", "silence", "(", ")", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "1", ")", ",", "self", ")"], "examples": ["class Cone Of Cold ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cone of Cold ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) ) index = self . target . index if self . target . index < len ( self . target . player . minions ) - 1 : minion = self . target . player . minions [ index + 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) if self . target . index > 0 : minion = self . target . player . minions [ index - 1 ] minion . damage ( player . effective_spell_damage ( 1 ) , self ) minion . add_buff ( Buff ( Frozen ( ) ) )", "class Slam ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Slam ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : self . target . damage ( player . effective_spell_damage ( 2 ) , self ) player . draw ( ) else : self . target . damage ( player . effective_spell_damage ( 2 ) , self )", "class Crackle ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Crackle ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( game . random_amount ( 3 , 6 ) ) , self )", "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player <pad> game <pad> ) self . target . <pad> . <pad> ( <pad> ) <pad> target <pad> . damage ( player . effective_spell_damage ( 1 ) , self ) <pad> ( <pad> ( ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> self . target . damage <pad> . <pad> ( <pad> ) , self <pad> ) <pad> self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( <pad> . <pad> ( <pad> ) <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> player <pad> ) <pad> : <pad> . <pad> ) <pad> . <pad> . <pad> ) def <pad> ( self , player ) : player . <pad> . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player <pad> . <pad> ( <pad> , self . <pad> )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) self . target <pad> . <pad> ( <pad> ) <pad> self . target <pad> . damage ( player . effective_spell_damage ( 1 ) , self <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> self . target <pad> . <pad> ( ) <pad> self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage <pad> ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ( <pad> ( ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> . <pad> ) <pad> ( self <pad> game <pad> ) super ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> self . <pad> ( <pad> player <pad> . <pad> ( <pad> , self <pad> )"]}
{"input": "Eye for an Eye NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero takes damage, deal that much damage to the enemy hero.", "output": "class EyeForAnEye(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eye for an Eye\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, character, attacker, amount):\u00a7        if character.is_hero():\u00a7            character.player.opponent.hero.damage(amount, self)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"character_damaged\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"character_damaged\", self._reveal)\u00a7", "input_tokens": ["Eye", "for", "an", "Eye", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "hero", "takes", "damage,", "deal", "that", "much", "damage", "to", "the", "enemy", "hero."], "output_tokens": ["class", "Eye", "For", "An", "Eye", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Eye", "for", "an", "Eye", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "character", ",", "attacker", ",", "amount", ")", ":", "if", "character", ".", "is_hero", "(", ")", ":", "character", ".", "player", ".", "opponent", ".", "hero", ".", "damage", "(", "amount", ",", "self", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "bind", "(", "`", "character_damaged", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "unbind", "(", "`", "character_damaged", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Repentance ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Repentance ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion ) : minion . set_health_to ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Burrowing Mine ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burrowing Mine ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 10 ) , Hero Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Discard ( query = Card Query ( source = CARD_SOURCE . LAST_DRAWN ) ) , Player Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def <pad> ( self , <pad> : <pad> . <pad> . <pad> ) def activate ( self , player ) : player . game . current_player . <pad> ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> ( ` <pad> ` , self . _reveal )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def _reveal ( self <pad> attacker , <pad> player . hero <pad> . <pad> ) <pad> : <pad> ( <pad> . <pad> super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> game ) <pad> . <pad> . <pad> ( ) <pad> . <pad> . <pad> ( player . <pad> ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player , <pad> ) : <pad> ( ) <pad> ( player <pad> ) game . other_player . hero . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , <pad> ( <pad> ( ) <pad> ) , <pad> , <pad> ) , <pad> ( <pad> = <pad> ( <pad> ( <pad> ) , <pad> ) <pad> ( <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) . <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , <pad> ) : <pad> . <pad> ( <pad> ) super ( ) . reveal ( ) def activate ( self , player ) : player <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def _reveal ( self , attacker , <pad> ) : if <pad> . <pad> ( ) <pad> : <pad> . <pad> . <pad> . <pad> ( ) super ( ) . reveal ( ) def activate ( self , player ) : player <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , <pad> , <pad> ) : <pad> ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> ( ) self . <pad> . <pad> ( player . <pad> ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> , <pad> ) : <pad> ( ) . <pad> player <pad> . <pad> . hero . damage ( player . <pad> ( <pad> ) , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> , <pad> , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> ( ) <pad> ( <pad> ) <pad> ( <pad> ) def <pad> ( self , player <pad> ) : <pad> . <pad> ( <pad> , <pad> )"]}
{"input": "Flare NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END All minions lose <b>Stealth</b>. Destroy all enemy <b>Secrets</b>. Draw a card.", "output": "class Flare(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flare\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in hearthbreaker.targeting.find_minion_spell_target(game, lambda m: m.stealth):\u00a7            minion.stealth = False\u00a7\u00a7        for secret in game.other_player.secrets:\u00a7            secret.deactivate(game.other_player)\u00a7\u00a7        game.other_player.secrets = []\u00a7        player.draw()\u00a7", "input_tokens": ["Flare", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Hunter", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "All", "minions", "lose", "<b>", "Stealth", "</b>", ".", "Destroy", "all", "enemy", "<b>", "Secrets", "</b>", ".", "Draw", "a", "card."], "output_tokens": ["class", "Flare", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Flare", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "for", "minion", "in", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", "(", "game", ",", "lambda", "m", ":", "m", ".", "stealth", ")", ":", "minion", ".", "stealth", "=", "False", "for", "secret", "in", "game", ".", "other_player", ".", "secrets", ":", "secret", ".", "deactivate", "(", "game", ".", "other_player", ")", "game", ".", "other_player", ".", "secrets", "=", "[", "]", "player", ".", "draw", "(", ")"], "examples": ["class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Nourish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nourish ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Gain2 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gain 2 mana crystals ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : if player . max_mana < 8 : player . max_mana + = 2 player . mana + = 2 else : player . max_mana = 10 player . mana + = 2 class Draw3 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Draw three cards ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : player . draw ( ) player . draw ( ) player . draw ( ) option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) option . use ( player , game )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ( <pad> ( <pad> , <pad> ( <pad> ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) : super ( ) <pad> use ( <pad> player , game <pad> = <pad> = <pad> ) <pad> ) <pad> . <pad> ( <pad> ) <pad> . <pad> ( ) <pad> . <pad> ( ) <pad> . <pad> ( ) <pad> = player . <pad> . <pad> ( ) <pad> ) <pad> player ) <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , <pad> , <pad> player <pad> ( ) <pad> : <pad> . <pad> ( <pad> ) <pad> . <pad> . <pad> ( <pad> ( ) def <pad> ( self , <pad> ) : player . <pad> . <pad> ( <pad> , self . _reveal ) def <pad> ( self , <pad> ) : player <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> , <pad> ( <pad> ( ) <pad> Selector ( <pad> Player ( <pad> ( ) ) ) ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> copy <pad> copy ( game . other_player . minions <pad> ) : <pad> ( <pad> . <pad> ( <pad> . <pad> ( <pad> ) <pad> self <pad> ( <pad> player <pad> ( ) . <pad> ( <pad> , <pad> ) <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ( <pad> ) <pad> ) <pad> ( <pad> ) <pad> ( <pad> , <pad> ) : <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game <pad> ) <pad> . <pad> . <pad> ( <pad> , <pad> : <pad> . <pad> : <pad> . <pad> = <pad> . <pad> . <pad> : <pad> . <pad> ( <pad> game <pad> . <pad> ) <pad> . <pad> . <pad> = <pad> [ <pad> ] <pad> player <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , <pad> , <pad> ) : <pad> ( ) <pad> . <pad> ( <pad> game <pad> ) <pad> . <pad> ( <pad> , <pad> ) : <pad> . <pad> . <pad> . <pad> deactivate ( <pad> ) <pad> . <pad> . <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> , <pad> ) : <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . HUNTER , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , <pad> game <pad> ) for <pad> in <pad> ( <pad> , <pad> ) : <pad> = game <pad> . <pad> . <pad> . <pad> ( <pad> game <pad> . <pad> ) <pad> game . other_player . <pad> = <pad>"]}
{"input": "Gorehowl NAME_END 7 ATK_END -1 DEF_END 7 COST_END 1 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Attacking a minion costs 1 Attack instead of 1 Durability.", "output": "class Gorehowl(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gorehowl\", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(), TargetIsMinion())), [ActionTag(IncreaseDurability(), WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1), WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1), AttackCompleted())), HeroSelector())])])\u00a7", "input_tokens": ["Gorehowl", "NAME_END", "7", "ATK_END", "-1", "DEF_END", "7", "COST_END", "1", "DUR_END", "Weapon", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Attacking", "a", "minion", "costs", "1", "Attack", "instead", "of", "1", "Durability."], "output_tokens": ["class", "Gorehowl", "(", "Weapon", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gorehowl", "`", ",", "7", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "create_weapon", "(", "self", ",", "player", ")", ":", "return", "Weapon", "(", "7", ",", "1", ",", "effects", "=", "[", "Effect", "(", "Character", "Attack", "(", "And", "(", "Is", "Hero", "(", ")", ",", "Target", "Is", "Minion", "(", ")", ")", ")", ",", "[", "Action", "Tag", "(", "Increase", "Durability", "(", ")", ",", "Weapon", "Selector", "(", ")", ")", ",", "Action", "Tag", "(", "Increase", "Weapon", "Attack", "(", "-", "1", ")", ",", "Weapon", "Selector", "(", ")", ")", ",", "Action", "Tag", "(", "Give", "(", "Buff", "Until", "(", "Change", "Attack", "(", "1", ")", ",", "Attack", "Completed", "(", ")", ")", ")", ",", "Hero", "Selector", "(", ")", ")", "]", ")", "]", ")"], "examples": ["class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , <pad> = [ <pad> ( <pad> Player ( ) ) , <pad> Tag ( <pad> ( ) , <pad> Selector ( <pad> ) <pad> ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> = <pad> ( <pad> ) def <pad> ( self , player <pad> ) : return <pad> ( ) <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> Attack ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( 1 ) , <pad> ( <pad> ( <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 7 , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect ( Character <pad> ( <pad> Is <pad> Target ( ) , <pad> ( ) ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) ] ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( ) <pad> , <pad> ) <pad>", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( Buff ( <pad> Attack ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( 1 ) , <pad> Selector ( <pad> ( ) , <pad> ( ) , <pad> ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . <pad> ) def <pad> ( self , player , <pad> ) <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )"]}
{"input": "Hound NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "output": "class Hound(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hound\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, charge=True)\u00a7", "input_tokens": ["Hound", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Hunter", "PLAYER_CLS_END", "Beast", "RACE_END", "NIL", "RARITY_END", "<b>", "Charge", "</b>"], "output_tokens": ["class", "Hound", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Hound", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "HUNTER", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "BEAST", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ",", "charge", "=", "True", ")"], "examples": ["class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Imp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Senjin Shieldmasta ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sen ` jin Shieldmasta ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False , <pad> MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False , <pad> MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )"]}
{"input": "Injured Blademaster NAME_END 4 ATK_END 7 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage to HIMSELF.", "output": "class InjuredBlademaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Injured Blademaster\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7)\u00a7", "input_tokens": ["Injured", "Blademaster", "NAME_END", "4", "ATK_END", "7", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Deal", "4", "damage", "to", "HIMSELF."], "output_tokens": ["class", "Injured", "Blademaster", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Injured", "Blademaster", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "4", ")", ",", "Self", "Selector", "(", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "7", ")"], "examples": ["class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Succubus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Succubus ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , Character Selector ( players = <pad> Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> Inventor ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( <pad> Player <pad> ( ) ) , <pad> ( <pad> ( <pad> ) <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage <pad> ( <pad> ) , <pad> Selector <pad> ( <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Knife Juggler NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you summon a minion, deal 1 damage to a random enemy.", "output": "class KnifeJuggler(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Knife Juggler\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])\u00a7", "input_tokens": ["Knife", "Juggler", "NAME_END", "3", "ATK_END", "2", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "After", "you", "summon", "a", "minion,", "deal", "1", "damage", "to", "a", "random", "enemy."], "output_tokens": ["class", "Knife", "Juggler", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Knife", "Juggler", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "2", ",", "effects", "=", "[", "Effect", "(", "After", "Added", "(", ")", ",", "Action", "Tag", "(", "Damage", "(", "1", ")", ",", "Character", "Selector", "(", "players", "=", "Enemy", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ",", "condition", "=", "None", ")", ")", ")", "]", ")"], "examples": ["class Mistress Of Pain ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mistress of Pain ` , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 1 , 4 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Heal ( Event Value ( ) ) , Hero Selector ( ) ) ) ] )", "class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Did Damage ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , effects = [ Effect ( <pad> Damaged <pad> ( <pad> Player ( ) ) , <pad> Action Tag ( <pad> ( ) , <pad> ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( Damage ( <pad> ) , <pad> Selector ( ) ) ) <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> , <pad> ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> , <pad> ( <pad> ( <pad> ( <pad> ) <pad> ) def <pad> ( <pad> , player <pad> ( ) <pad> ( <pad> , <pad> ) <pad>"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 2 , effects = [ Effect <pad> ( <pad> ( ) , <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , <pad> = <pad> ( Damage ( <pad> ) , <pad> Selector ( ) <pad> ( <pad> , <pad> ) <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( 3 , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> ) , <pad> ( <pad> , <pad> ) <pad> ) <pad> ) <pad> ) <pad>"]}
{"input": "Lightwell NAME_END 0 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the start of your turn, restore 3 Health to a damaged friendly character.", "output": "class Lightwell(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwell\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3), CharacterSelector(condition=IsDamaged(), picker=RandomPicker())))])\u00a7", "input_tokens": ["Lightwell", "NAME_END", "0", "ATK_END", "5", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "At", "the", "start", "of", "your", "turn,", "restore", "3", "Health", "to", "a", "damaged", "friendly", "character."], "output_tokens": ["class", "Lightwell", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Lightwell", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "RARE", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "0", ",", "5", ",", "effects", "=", "[", "Effect", "(", "Turn", "Started", "(", ")", ",", "Action", "Tag", "(", "Heal", "(", "3", ")", ",", "Character", "Selector", "(", "condition", "=", "Is", "Damaged", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "]", ")"], "examples": ["class Iron Sensei ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Sensei ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) ) ] )", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Spectral Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , spell_targetable = False )", "class Knife Juggler ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Knife Juggler ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) <pad> ) , <pad> Selector <pad> ( <pad> picker = <pad> Picker ( ) ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( <pad> ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( <pad> ) , Character Selector ( players = <pad> Player ( ) , picker = <pad> Picker ( ) <pad> ) ) ) ] )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Turn <pad> ( ) , Action Tag <pad> ( <pad> ( <pad> ) , <pad> Selector ( Is <pad> ( <pad> ) , picker = Random Picker ( ) ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> ) <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 2 , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( ) , Action Tag ( <pad> ( <pad> ) , Character Selector ( <pad> = <pad> ( ) , picker = Random Picker ( ) <pad> ) ) ) ] )"]}
{"input": "Mana Wyrm NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you cast a spell, gain +1 Attack.", "output": "class ManaWyrm(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wyrm\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7", "input_tokens": ["Mana", "Wyrm", "NAME_END", "1", "ATK_END", "3", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Whenever", "you", "cast", "a", "spell,", "gain", "+1", "Attack."], "output_tokens": ["class", "Mana", "Wyrm", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mana", "Wyrm", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "3", ",", "effects", "=", "[", "Effect", "(", "Spell", "Cast", "(", ")", ",", "Action", "Tag", "(", "Give", "(", "Change", "Attack", "(", "1", ")", ")", ",", "Self", "Selector", "(", ")", ")", ")", "]", ")"], "examples": ["class Archmage Antonidas ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage Antonidas ` , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 5 , 7 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Add Card ( hearthbreaker . cards . Fireball ( ) ) , Player Selector ( ) ) ) ] )", "class Spectral Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , spell_targetable = False )", "class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , spell_targetable = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( <pad> ( <pad> ( ) ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( self , player <pad> ) <pad> return <pad> ( ) <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . MAGE , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect ( Spell Cast ( ) , Action Tag ( <pad> ( <pad> ( ) ) , <pad> Selector ( ) ) ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , effects = [ Effect <pad> ( <pad> ( <pad> ) , <pad> Action Tag ( <pad> ( ) , <pad> Selector ( ) ) <pad> ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> = <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , 1 , <pad> )"]}
{"input": "Mogu'shan Warden NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "output": "class MogushanWarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7, taunt=True)\u00a7", "input_tokens": ["Mogu'shan", "Warden", "NAME_END", "1", "ATK_END", "7", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Taunt", "</b>"], "output_tokens": ["class", "Mogushan", "Warden", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Mogu", "`", "shan", "Warden", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "7", ",", "taunt", "=", "True", ")"], "examples": ["class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Senjin Shieldmasta ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sen ` jin Shieldmasta ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , taunt = True )", "class Ironbark Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbark Protector ` , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 8 , 8 , taunt = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , taunt = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )"]}
{"input": "Nourish NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One</b> - Gain 2 Mana Crystals; or Draw 3 cards.", "output": "class Nourish(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nourish\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        class Gain2(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Gain 2 mana crystals\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                if player.max_mana < 8:\u00a7                    player.max_mana += 2\u00a7                    player.mana += 2\u00a7                else:\u00a7                    player.max_mana = 10\u00a7                    player.mana += 2\u00a7\u00a7        class Draw3(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Draw three cards\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                player.draw()\u00a7                player.draw()\u00a7                player.draw()\u00a7\u00a7        option = player.agent.choose_option([Gain2(), Draw3()], player)\u00a7        option.use(player, game)\u00a7", "input_tokens": ["Nourish", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Druid", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Choose", "One", "</b>", "-", "Gain", "2", "Mana", "Crystals;", "or", "Draw", "3", "cards."], "output_tokens": ["class", "Nourish", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Nourish", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "RARE", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "class", "Gain2", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Gain", "2", "mana", "crystals", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "if", "player", ".", "max_mana", "<", "8", ":", "player", ".", "max_mana", "+", "=", "2", "player", ".", "mana", "+", "=", "2", "else", ":", "player", ".", "max_mana", "=", "10", "player", ".", "mana", "+", "=", "2", "class", "Draw3", "(", "Choice", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Draw", "three", "cards", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "DRUID", ",", "CARD_RARITY", ".", "COMMON", ",", "False", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")", "player", ".", "draw", "(", ")", "option", "=", "player", ".", "agent", ".", "choose_option", "(", "[", "Gain2", "(", ")", ",", "Draw3", "(", ")", "]", ",", "player", ")", "option", ".", "use", "(", "player", ",", "game", ")"], "examples": ["class Anodized Robo Cub ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Anodized Robo Cub ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , choices = [ Choice ( Attack Mode ( ) , Give ( [ Buff ( Change Attack ( 1 ) ) ] ) , Self Selector ( ) ) , Choice ( Tank Mode ( ) , Give ( [ Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Flare ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flare ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : m . stealth ) : minion . stealth = False for secret in game . other_player . secrets : secret . deactivate ( game . other_player ) game . other_player . secrets = [ ] player . draw ( )", "class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Repentance ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Repentance ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion ) : minion . set_health_to ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal )"], "sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY <pad> , <pad> . <pad> , <pad> = [ Choice ( <pad> ( ) , <pad> , <pad> ( ) ) , Choice ( <pad> ( ) , <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ] ) <pad> ( <pad> , player ) <pad> ( <pad> , <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ( <pad> ( ) , <pad> ( ) ) ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> ( game , <pad> ) <pad> . <pad> : <pad> . <pad> ( game <pad> ) game . <pad> . <pad> player . draw ( )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self <pad> , <pad> ) <pad> player <pad> ( ) <pad> ( <pad> ) <pad> ( ) <pad> ( <pad> . <pad> ( ) <pad> , player ) <pad> player <pad> . <pad> ( <pad> , self . <pad> ) <pad> ( <pad> ) <pad> player . <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ( <pad> , <pad> ) <pad> . <pad> ( <pad> ( ) . <pad> ) def <pad> ( self , player ) : player <pad> game . <pad> . <pad> ( <pad> , self . _reveal ) def <pad> ( <pad> , player ) <pad> . game . <pad> . <pad> ( <pad> , <pad> . <pad> )"], "oracle-sketch": ["class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . DRUID , CARD_RARITY . <pad> , <pad> . <pad> , <pad> Choice ( <pad> ( ) , <pad> ( <pad> ( <pad> ( <pad> ) ) <pad> ) , <pad> ( ) ) <pad> ( ) <pad> ( [ <pad> ( <pad> ) , <pad> ( <pad> ) ] <pad> , player ) <pad> ( <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> = <pad> ( <pad> ( ) <pad> ( ) <pad> ) def <pad> ( self , player ) : <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> , <pad> : <pad> . <pad> : <pad> . <pad> = <pad> . <pad> . <pad> : <pad> . <pad> ( game . <pad> ) <pad> . <pad> . <pad> = [ ] player . <pad> ( )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE ) def <pad> ( self , <pad> , <pad> ) : <pad> . player <pad> ( ) <pad> : <pad> ( self ) <pad> super ( ) . <pad> ( ) def <pad> ( self , player ) : player . <pad> . <pad> ( ` <pad> ` , <pad> . <pad> ) def <pad> ( self , player ) : player . <pad> . <pad> ( <pad> , <pad> . <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : <pad> . <pad> ( <pad> ) super ( ) . <pad> ( ) def <pad> ( self , player ) : player . <pad> . <pad> . <pad> ( ` <pad> ` , <pad> . <pad> ) def <pad> ( self , player ) : player . <pad> . <pad> . <pad> ( <pad> , <pad> . <pad> )"]}
{"input": "Preparation NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END The next spell you cast this turn costs (3) less.", "output": "class Preparation(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Preparation\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=IsSpell()), SpellCast()))\u00a7", "input_tokens": ["Preparation", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Rogue", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "The", "next", "spell", "you", "cast", "this", "turn", "costs", "(3)", "less."], "output_tokens": ["class", "Preparation", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Preparation", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "ROGUE", ",", "CARD_RARITY", ".", "EPIC", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "player", ".", "add_aura", "(", "Aura", "Until", "(", "Mana", "Change", "(", "-", "3", ")", ",", "Card", "Selector", "(", "condition", "=", "Is", "Spell", "(", ")", ")", ",", "Spell", "Cast", "(", ")", ")", ")"], "examples": ["class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Deadly Poison ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deadly Poison ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . weapon . base_attack + = 2 player . hero . change_temp_attack ( 2 ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and player . weapon is not None", "class Heroic Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Heroic Strike ` , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . hero . change_temp_attack ( 4 )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Burrowing Mine ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burrowing Mine ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 10 ) , Hero Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Discard ( query = Card Query ( source = CARD_SOURCE . LAST_DRAWN ) ) , Player Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( player . <pad> ( 3 ) , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> = <pad> . <pad> ) def <pad> ( self , player , <pad> ) : return <pad> ( ) . <pad> ( player , <pad> ) <pad> . <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ) <pad> ( <pad> ( <pad> , <pad> ) , <pad> ( <pad> ( <pad> = <pad> ( <pad> = <pad> ) ) , <pad> ( <pad> ) ) <pad> ( ) , <pad> ) <pad> ( <pad> ) <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> ( 3 ) , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ROGUE , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> player <pad> . <pad> ( <pad> ( <pad> ) <pad> ( <pad> ( <pad> , <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) player . <pad> ( <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 0 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> , <pad> ) <pad> ( <pad> ( <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) <pad> ) , <pad> ( <pad> ) <pad> ) <pad> )"]}
{"input": "Repentance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, reduce its Health to 1.", "output": "class Repentance(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Repentance\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion):\u00a7\u00a7        minion.set_health_to(1)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7", "input_tokens": ["Repentance", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Paladin", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "your", "opponent", "plays", "a", "minion,", "reduce", "its", "Health", "to", "1."], "output_tokens": ["class", "Repentance", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Repentance", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PALADIN", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "_reveal", "(", "self", ",", "minion", ")", ":", "minion", ".", "set_health_to", "(", "1", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "bind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "game", ".", "current_player", ".", "unbind", "(", "`", "minion_played", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Vaporize ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vaporize ` , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) def _reveal ( self , attacker , target ) : if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : attacker . die ( self ) attacker . game . check_delayed ( ) super ( ) . reveal ( ) def activate ( self , player ) : player . opponent . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . opponent . unbind ( ` character_attack ` , self . _reveal )", "class Eye For An Eye ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Eye for an Eye ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , character , attacker , amount ) : if character . is_hero ( ) : character . player . opponent . hero . damage ( amount , self ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` character_damaged ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` character_damaged ` , self . _reveal )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Nourish ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Nourish ` , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) class Gain2 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gain 2 mana crystals ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : if player . max_mana < 8 : player . max_mana + = 2 player . mana + = 2 else : player . max_mana = 10 player . mana + = 2 class Draw3 ( Choice Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Draw three cards ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) def use ( self , player , game ) : player . draw ( ) player . draw ( ) player . draw ( ) option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) option . use ( player , game )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> self <pad> player <pad> . <pad> ) <pad> : <pad> . <pad> ( self <pad> . <pad> . <pad> def activate ( self , player ) : player . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def <pad> ( self <pad> , <pad> ) : <pad> . <pad> ( <pad> . player . <pad> . <pad> . <pad> ( <pad> , <pad> . <pad> def <pad> ( self , player ) : player . <pad> ( ` <pad> ` , self . _reveal ) def <pad> ( self , player ) : player . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> game <pad> . <pad> . <pad> ( ) <pad> . <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> , <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player , <pad> ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player , <pad> ) : <pad> . <pad> player <pad> ) : super ( ) <pad> def <pad> ( self <pad> player <pad> : player <pad> = <pad> . <pad> = <pad> class <pad> ( <pad> ) : def <pad> ( self ) : <pad> . <pad> ( <pad> . <pad> ) def <pad> ( self , player <pad> ) : player . <pad> ( ) player . <pad> ) <pad> . <pad> player . <pad> . <pad> ( <pad> ) <pad> player <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def _reveal ( self <pad> , <pad> ) <pad> : <pad> . <pad> ( <pad> ) super ( ) . reveal ( ) def activate ( self , player ) : player . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self <pad> , <pad> ) : <pad> . <pad> ( <pad> ) super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def <pad> ( self <pad> , <pad> ) : super ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( ) self . <pad> . <pad> . <pad> ( <pad> , self )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , <pad> . <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( ) <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self <pad> , <pad> ) : <pad> . <pad> ( <pad> ) <pad> super ( ) . <pad> ( <pad> ) def <pad> ( self , player <pad> ) <pad> : player . <pad> . <pad> . <pad> ( ` <pad> ` <pad> , <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> player . <pad> . <pad> . <pad> ( <pad> , <pad> . <pad> )"]}
{"input": "Shadow of Nothing NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Mindgames whiffed! Your opponent had no minions!", "output": "class ShadowOfNothing(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow of Nothing\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(0, 1)\u00a7", "input_tokens": ["Shadow", "of", "Nothing", "NAME_END", "0", "ATK_END", "1", "DEF_END", "0", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "NIL", "RACE_END", "Epic", "RARITY_END", "Mindgames", "whiffed!", "Your", "opponent", "had", "no", "minions!"], "output_tokens": ["class", "Shadow", "Of", "Nothing", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Shadow", "of", "Nothing", "`", ",", "0", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "EPIC", ",", "False", ")", "def", "create_minion", "(", "self", ",", "p", ")", ":", "return", "Minion", "(", "0", ",", "1", ")"], "examples": ["class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Lightwell ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwell ` , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 0 , 5 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 3 ) , Character Selector ( condition = Is Damaged ( ) , picker = Random Picker ( ) ) ) ) ] )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Acidmaw ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Acidmaw ` , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )", "class Spectral Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spectral Knight ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 6 , spell_targetable = False )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( ) , <pad> Selector ( ) ) ) <pad> , player ) <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( 0 , <pad> , <pad> = [ <pad> ( <pad> ( ) , <pad> ( <pad> ) , <pad> ( <pad> ( ) , <pad> ) ) ) ) ] )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ) <pad> ( <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = [ <pad> ( <pad> ( <pad> ( <pad> , <pad> Player ( ) ) , <pad> ( <pad> ( ) , <pad> ( ) ) <pad> ) ] )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . PRIEST , CARD_RARITY . <pad> ) def create_minion ( self , <pad> ) : return Minion ( 0 <pad> , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ) def <pad> ( self <pad> , <pad> ) : <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> ) def create_minion ( self , <pad> ) : return <pad> Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , <pad> ) : return Minion ( <pad> , <pad> )"]}
{"input": "Slam NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it survives, draw a card.", "output": "class Slam(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Slam\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health > player.effective_spell_damage(2) or self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7            player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7", "input_tokens": ["Slam", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Warrior", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "Deal", "$2", "damage", "to", "a", "minion.", "If", "it", "survives,", "draw", "a", "card."], "output_tokens": ["class", "Slam", "(", "Spell", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Slam", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "WARRIOR", ",", "CARD_RARITY", ".", "COMMON", ",", "target_func", "=", "hearthbreaker", ".", "targeting", ".", "find_minion_spell_target", ")", "def", "use", "(", "self", ",", "player", ",", "game", ")", ":", "super", "(", ")", ".", "use", "(", "player", ",", "game", ")", "if", "self", ".", "target", ".", "health", ">", "player", ".", "effective_spell_damage", "(", "2", ")", "or", "self", ".", "target", ".", "divine_shield", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")", "player", ".", "draw", "(", ")", "else", ":", "self", ".", "target", ".", "damage", "(", "player", ".", "effective_spell_damage", "(", "2", ")", ",", "self", ")"], "examples": ["class Multi Shot ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Multi - Shot ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) for i in range ( 0 , 2 ) : target = game . random_choice ( targets ) targets . remove ( target ) target . damage ( player . effective_spell_damage ( 3 ) , self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 2", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )", "class Sinister Strike ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sinister Strike ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )", "class Burrowing Mine ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burrowing Mine ` , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 10 ) , Hero Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Discard ( query = Card Query ( source = CARD_SOURCE . LAST_DRAWN ) ) , Player Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game )", "class Power Word Shield ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power Word : Shield ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . increase_health ( 2 ) player . draw ( )"], "sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> ( <pad> , <pad> ) : <pad> . <pad> . <pad> ( <pad> target . damage ( player . effective_spell_damage ( <pad> ) , self ) <pad> ( <pad> player <pad> ) <pad> ) . <pad> player <pad> ) <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . target . <pad> ( ) self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON <pad> , <pad> = <pad> ) <pad> , <pad> , <pad> ( ) , <pad> ( <pad> = <pad> . <pad> ( <pad> ) , <pad> ( <pad> ( <pad> , <pad> ( <pad> ) <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( <pad> ) player . draw ( )"], "oracle-sketch": ["class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . <pad> ( <pad> 2 ) <pad> target <pad> . <pad> . <pad> target . damage ( player . effective_spell_damage ( <pad> ) , self ) <pad> player <pad> ) : <pad> . <pad> ( player <pad> . <pad> ) <pad>", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( ) self . target . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def use ( self , player , game ) : super ( ) . use ( player , game ) <pad> . <pad> . <pad> . damage ( player . effective_spell_damage ( <pad> ) , self )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON <pad> , <pad> = <pad> ) <pad> ( <pad> , <pad> , <pad> ) <pad> ( <pad> . <pad> , <pad> ) <pad> ( <pad> ) <pad> ( <pad> ( ) , <pad> self <pad> player <pad> ) : <pad> ( <pad> . <pad> ( <pad> , <pad> )", "class <pad> ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . <pad> ( 2 ) player . draw ( )"]}
{"input": "Spellbreaker NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> <b>Silence</b> a minion.", "output": "class Spellbreaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbreaker\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7", "input_tokens": ["Spellbreaker", "NAME_END", "4", "ATK_END", "3", "DEF_END", "4", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "<b>", "Silence", "</b>", "a", "minion."], "output_tokens": ["class", "Spellbreaker", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Spellbreaker", "`", ",", "4", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "NONE", ",", "battlecry", "=", "Battlecry", "(", "Silence", "(", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "4", ",", "3", ")"], "examples": ["class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )", "class Defender Of Argus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender of Argus ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Taunt ( ) ) , Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ) , <pad> Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , <pad> , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , Minion Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , <pad> , <pad> = <pad> ) def <pad> ( self , player <pad> ) : <pad> ( <pad> , <pad> )"]}
{"input": "Sunfury Protector NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions <b>Taunt</b>.", "output": "class SunfuryProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sunfury Protector\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7", "input_tokens": ["Sunfury", "Protector", "NAME_END", "2", "ATK_END", "3", "DEF_END", "2", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Give", "adjacent", "minions", "<b>", "Taunt", "</b>", "."], "output_tokens": ["class", "Sunfury", "Protector", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Sunfury", "Protector", "`", ",", "2", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "battlecry", "=", "Battlecry", "(", "Give", "(", "Buff", "(", "Taunt", "(", ")", ")", ")", ",", "Minion", "Selector", "(", "Adjacent", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "3", ")"], "examples": ["class Defender Of Argus ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender of Argus ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Taunt ( ) ) , Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )", "class Wailing Soul ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wailing Soul ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 5 )", "class Toshley ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Toshley ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 5 , 7 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give <pad> ( Taunt <pad> ( <pad> ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> = Both Player <pad> , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry <pad> ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : <pad> return Minion ( <pad> = <pad> ( <pad> ) , <pad> ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( <pad> Buff ( Taunt <pad> ( <pad> ) ) <pad> ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector <pad> ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : <pad> return Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Tinkmaster Overspark NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Transform another random minion into a 5/5 Devilsaur or a 1/1 Squirrel.", "output": "class TinkmasterOverspark(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tinkmaster Overspark\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7", "input_tokens": ["Tinkmaster", "Overspark", "NAME_END", "3", "ATK_END", "3", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Legendary", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "Transform", "another", "random", "minion", "into", "a", "5/5", "Devilsaur", "or", "a", "1/1", "Squirrel."], "output_tokens": ["class", "Tinkmaster", "Overspark", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Tinkmaster", "Overspark", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "LEGENDARY", ",", "battlecry", "=", "Battlecry", "(", "Transform", "(", "Card", "Query", "(", "source", "=", "CARD_SOURCE", ".", "LIST", ",", "source_list", "=", "[", "Devilsaur", "(", ")", ",", "Squirrel", "(", ")", "]", ")", ")", ",", "Minion", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "Random", "Picker", "(", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "3", ",", "3", ")"], "examples": ["class Deathlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Deathlord ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )", "class Cabal Shadow Priest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cabal Shadow Priest ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Sunfury Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sunfury Protector ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 3 )", "class Toshley ( Minion Card ) : def __init__ ( self ) : from hearthbreaker . cards . spells . neutral import spare_part_list super ( ) . __init__ ( ` Toshley ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : from hearthbreaker . cards . spells . neutral import spare_part_list return Minion ( 5 , 7 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )", "class Spellbreaker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbreaker ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ( <pad> , <pad> , <pad> = <pad> ( <pad> ( Card Query ( conditions = [ Is Minion ( ) ] , <pad> ) ) , Player Selector ( <pad> Player ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( <pad> ) , <pad> ( ) , <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) ) , <pad> Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( Card Query ( <pad> ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : <pad> return Minion ( <pad> , <pad> , <pad> = <pad> ( <pad> ( Card <pad> ( <pad> ) ) , Player <pad> ( ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY <pad> . <pad> , battlecry = Battlecry ( <pad> ( ) , Minion Selector ( <pad> Player ( ) , <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> ( <pad> ( Card Query ( <pad> = [ <pad> ( ) <pad> , <pad> ) ) , <pad> Selector ( <pad> Player ( ) ) ) )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> ( <pad> ) , players = <pad> Player ( ) , picker = <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( ) ) ) , Minion Selector ( <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )", "class <pad> ( Minion Card ) : def __init__ ( self ) : <pad> super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( <pad> ( Card Query ( source = CARD_SOURCE . LIST , source_list = <pad> ) ) , Player <pad> ( ) ) ) def create_minion ( self , player ) : <pad> return Minion <pad> ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , <pad> = <pad> . <pad> , <pad> = <pad> ( <pad> ( ) , Minion Selector ( players = Both Player ( ) , picker = <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 3 )"]}
{"input": "Vaporize NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a minion attacks your hero, destroy it.", "output": "class Vaporize(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vaporize\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if target is self.player.hero and attacker.is_minion() and not attacker.removed:\u00a7            attacker.die(self)\u00a7            attacker.game.check_delayed()\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7", "input_tokens": ["Vaporize", "NAME_END", "-1", "ATK_END", "-1", "DEF_END", "3", "COST_END", "-1", "DUR_END", "Spell", "TYPE_END", "Mage", "PLAYER_CLS_END", "NIL", "RACE_END", "Rare", "RARITY_END", "<b>", "Secret", ":", "</b>", "When", "a", "minion", "attacks", "your", "hero,", "destroy", "it."], "output_tokens": ["class", "Vaporize", "(", "Secret", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Vaporize", "`", ",", "3", ",", "CHARACTER_CLASS", ".", "MAGE", ",", "CARD_RARITY", ".", "RARE", ")", "def", "_reveal", "(", "self", ",", "attacker", ",", "target", ")", ":", "if", "target", "is", "self", ".", "player", ".", "hero", "and", "attacker", ".", "is_minion", "(", ")", "and", "not", "attacker", ".", "removed", ":", "attacker", ".", "die", "(", "self", ")", "attacker", ".", "game", ".", "check_delayed", "(", ")", "super", "(", ")", ".", "reveal", "(", ")", "def", "activate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "bind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")", "def", "deactivate", "(", "self", ",", "player", ")", ":", "player", ".", "opponent", ".", "unbind", "(", "`", "character_attack", "`", ",", "self", ".", "_reveal", ")"], "examples": ["class Repentance ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Repentance ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def _reveal ( self , minion ) : minion . set_health_to ( 1 ) super ( ) . reveal ( ) def activate ( self , player ) : player . game . current_player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal )", "class Emergency Coolant ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Emergency Coolant ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Frozen ( ) ) )", "class Blessed Champion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blessed Champion ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Double Attack ( ) ) )", "class Bananas ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Bananas ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 1 ) self . target . increase_health ( 1 )", "class Earth Shock ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Shock ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )"], "sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , <pad> ) : <pad> . <pad> . <pad> ) def activate ( self , player ) : player . game . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player , game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player , <pad> ) : <pad> ( <pad> ( player <pad> game ) <pad> . <pad> . <pad> ( <pad> ( <pad> ( ) ) )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . find_minion_spell_target ) def <pad> ( self , player <pad> ) : <pad> ( <pad> ( player <pad> ) <pad> . <pad> . <pad> ( <pad> ) <pad> . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> . <pad> . <pad> ) def <pad> ( self , player <pad> ) : <pad> ( player <pad> game <pad> . <pad> . <pad> ( ) <pad> . <pad> . <pad> ( <pad> . <pad> ( <pad> )"], "oracle-sketch": ["class <pad> ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def _reveal ( self , <pad> ) : <pad> . <pad> ( <pad> ) super ( ) . reveal ( ) def activate ( self , player ) : player <pad> . <pad> . bind ( ` <pad> ` , self . _reveal ) def deactivate ( self , player ) : player <pad> . <pad> . unbind ( ` <pad> ` , self . _reveal )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . <pad> ) <pad> ( self <pad> game ) <pad> super ( ) . <pad> ( player , <pad> ) self . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . RARE <pad> ) def <pad> ( self , player <pad> ) : super ( ) . <pad> ( player , <pad> ) self . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , <pad> , <pad> . <pad> . <pad> ) <pad> ( self <pad> game ) <pad> super ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> ) self . <pad> . <pad> ( <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY <pad> . <pad> ) def <pad> ( self , player <pad> ) : super ( ) . <pad> ( <pad> , <pad> ) <pad> . <pad> . <pad> ( <pad> self . <pad> ( player . <pad> ( <pad> , self )"]}
{"input": "Worgen Infiltrator NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Stealth</b>", "output": "class WorgenInfiltrator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Worgen Infiltrator\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, stealth=True)\u00a7", "input_tokens": ["Worgen", "Infiltrator", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Stealth", "</b>"], "output_tokens": ["class", "Worgen", "Infiltrator", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Worgen", "Infiltrator", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ",", "stealth", "=", "True", ")"], "examples": ["class Mogushan Warden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mogu ` shan Warden ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 7 , taunt = True )", "class Boar ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boar ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )", "class Ironbark Protector ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Ironbark Protector ` , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 8 , 8 , taunt = True )", "class Flying Machine ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flying Machine ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 4 , windfury = True )", "class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 , <pad> = True )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( 1 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> , <pad> = True )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , 1 , <pad> = True )"]}
{"input": "Blackwing Corruptor NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry</b>: If you're holding a Dragon, deal 3 damage.", "output": "class BlackwingCorruptor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blackwing Corruptor\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7", "input_tokens": ["Blackwing", "Corruptor", "NAME_END", "5", "ATK_END", "4", "DEF_END", "5", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "NIL", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", "</b>", ":", "If", "you're", "holding", "a", "Dragon,", "deal", "3", "damage."], "output_tokens": ["class", "Blackwing", "Corruptor", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Blackwing", "Corruptor", "`", ",", "5", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "battlecry", "=", "Battlecry", "(", "Damage", "(", "3", ")", ",", "Character", "Selector", "(", "players", "=", "Both", "Player", "(", ")", ",", "picker", "=", "User", "Picker", "(", ")", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "5", ",", "4", ")"], "examples": ["class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )", "class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Drakonid Crusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drakonid Crusher ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ` health ` , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Fire Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fire Elemental ` , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )", "class Gnomish Inventor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Inventor ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , battlecry = ( Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = ( Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ( <pad> ) ) <pad> ) , <pad> ( ) , <pad> ( <pad> ( <pad> , <pad> ( <pad> ( <pad> ) ) , value = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( <pad> ) , Character Selector ( <pad> Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( Damage ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON <pad> , battlecry = <pad> Battlecry ( <pad> ( <pad> ( <pad> ( <pad> ) , <pad> ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON <pad> , battlecry = <pad> Battlecry <pad> ( <pad> ( 3 <pad> ) , <pad> ( <pad> ( <pad> ) , <pad> ( ) , <pad> Greater Than ( <pad> ( <pad> Selector ( <pad> ( ) ) ) , value = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , 4 )"]}
{"input": "Drakonid Crusher NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If your opponent has 15 or less Health, gain +3/+3.", "output": "class DrakonidCrusher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Drakonid Crusher\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Attribute('health', HeroSelector(EnemyPlayer())), value=15)))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7", "input_tokens": ["Drakonid", "Crusher", "NAME_END", "6", "ATK_END", "6", "DEF_END", "6", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Neutral", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "your", "opponent", "has", "15", "or", "less", "Health,", "gain", "+3/+3."], "output_tokens": ["class", "Drakonid", "Crusher", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Drakonid", "Crusher", "`", ",", "6", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "[", "Buff", "(", "Change", "Attack", "(", "3", ")", ")", ",", "Buff", "(", "Change", "Health", "(", "3", ")", ")", "]", ")", ",", "Self", "Selector", "(", ")", ",", "Not", "(", "Greater", "Than", "(", "Attribute", "(", "`", "health", "`", ",", "Hero", "Selector", "(", "Enemy", "Player", "(", ")", ")", ")", ",", "value", "=", "15", ")", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "6", ",", "6", ")"], "examples": ["class Twilight Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Twilight Whelp ` , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )", "class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Cabal Shadow Priest ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cabal Shadow Priest ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( <pad> ) ) ) , Self Selector ( ) , Greater Than ( Count ( <pad> Selector ( <pad> = Is <pad> ( <pad> ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> , <pad> ( <pad> Player <pad> ) , <pad> ( <pad> ) , Greater Than ( Count ( <pad> Selector ( <pad> Is <pad> ( <pad> ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( <pad> Attack ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> , <pad> ( Attack <pad> Equal To ( <pad> ) , <pad> ( ) , <pad> ( ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( <pad> ) ) ) , Self Selector ( ) , Greater Than ( <pad> ( <pad> Selector ( <pad> ( <pad> ) ) ) , value = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( 3 ) , <pad> ( <pad> ( ) , <pad> ( <pad> ) , Greater Than ( <pad> ( <pad> Selector ( <pad> ( <pad> ) ) ) , value = <pad> ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( <pad> Attack ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 6 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( ) , <pad> Selector ( <pad> Than <pad> ( <pad> , <pad> Enemy Player ( ) , <pad> = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
{"input": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "output": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7", "input_tokens": ["Imp", "NAME_END", "1", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Warlock", "PLAYER_CLS_END", "Demon", "RACE_END", "NIL", "RARITY_END", "NIL"], "output_tokens": ["class", "Imp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Imp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "ALL", ",", "CARD_RARITY", ".", "RARE", ",", "False", ",", "minion_type", "=", "MINION_TYPE", ".", "DEMON", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "1", ",", "1", ")"], "examples": ["class Boulderfist Ogre ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Boulderfist Ogre ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 6 , 7 )", "class War Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` War Golem ` , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 7 , 7 )", "class Hound ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hound ` , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 , charge = True )", "class Worgen Infiltrator ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Worgen Infiltrator ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 1 , stealth = True )", "class Assassins Blade ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Assassin ` s Blade ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 3 , 4 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , False , minion_type = MINION_TYPE . <pad> ) def create_minion ( self , player ) : return Minion ( 1 , 1 <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . <pad> ) def create_minion ( self , player ) : return Minion ( <pad> 1 , <pad> )", "class <pad> ( <pad> Card ) : def __init__ ( self ) : super ( ) . __init__ ( <pad> ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> ) def <pad> ( self , player ) : return <pad> ( <pad> , <pad> )"]}
{"input": "Twilight Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +2 Health.", "output": "class TwilightWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twilight Whelp\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7", "input_tokens": ["Twilight", "Whelp", "NAME_END", "2", "ATK_END", "1", "DEF_END", "1", "COST_END", "-1", "DUR_END", "Minion", "TYPE_END", "Priest", "PLAYER_CLS_END", "Dragon", "RACE_END", "Common", "RARITY_END", "<b>", "Battlecry", ":", "</b>", "If", "you're", "holding", "a", "Dragon,", "gain", "+2", "Health."], "output_tokens": ["class", "Twilight", "Whelp", "(", "Minion", "Card", ")", ":", "def", "__init__", "(", "self", ")", ":", "super", "(", ")", ".", "__init__", "(", "`", "Twilight", "Whelp", "`", ",", "1", ",", "CHARACTER_CLASS", ".", "PRIEST", ",", "CARD_RARITY", ".", "COMMON", ",", "minion_type", "=", "MINION_TYPE", ".", "DRAGON", ",", "battlecry", "=", "(", "Battlecry", "(", "Give", "(", "Buff", "(", "Change", "Health", "(", "2", ")", ")", ")", ",", "Self", "Selector", "(", ")", ",", "Greater", "Than", "(", "Count", "(", "Card", "Selector", "(", "condition", "=", "Is", "Type", "(", "MINION_TYPE", ".", "DRAGON", ")", ")", ")", ",", "value", "=", "0", ")", ")", ")", ")", "def", "create_minion", "(", "self", ",", "player", ")", ":", "return", "Minion", "(", "2", ",", "1", ")"], "examples": ["class Blackwing Corruptor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blackwing Corruptor ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )", "class Drakonid Crusher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Drakonid Crusher ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ` health ` , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 6 )", "class Goblin Auto Barber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Goblin Auto - Barber ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )", "class Screwjank Clunker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Screwjank Clunker ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 5 )", "class Injured Blademaster ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Injured Blademaster ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 7 )"], "sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ) , <pad> ( <pad> ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change <pad> ( <pad> ) ) , Buff ( Change Health ( <pad> ) ) ] ) , Self Selector ( ) , <pad> Greater <pad> ( <pad> ( <pad> ( <pad> ) ) , value = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change <pad> ( <pad> ) ) ] ) , Minion <pad> ( Is Type ( MINION_TYPE . <pad> ) , <pad> = <pad> Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"], "oracle-sketch": ["class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , battlecry = Battlecry ( <pad> ( <pad> ( <pad> ( ) , <pad> ( <pad> ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give <pad> ( <pad> Buff ( Change Health ( <pad> ) ) <pad> ) , Self Selector ( ) , <pad> Greater Than ( <pad> ( <pad> Selector ( <pad> ( ) ) ) , value = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . COMMON , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , <pad> Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , minion_type = MINION_TYPE . <pad> , battlecry = Battlecry ( Give ( <pad> Buff ( Change Health ( 2 ) ) , <pad> ( <pad> ) , <pad> Selector ( Is Type ( MINION_TYPE . <pad> ) , <pad> = <pad> ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , <pad> )", "class <pad> ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` <pad> ` , <pad> , CHARACTER_CLASS . <pad> , CARD_RARITY . <pad> , battlecry = Battlecry ( <pad> ( <pad> ) , Self Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( <pad> , <pad> )"]}
